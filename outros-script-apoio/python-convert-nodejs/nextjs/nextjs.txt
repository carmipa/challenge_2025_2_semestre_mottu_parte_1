

# --- src\app\layout.tsx ---

import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        {children}
      </body>
    </html>
  );
}


# --- src\app\page.tsx ---



import NabBar from "@/components/nav-bar";

export default function Home(){
    return(
        <div>
            <NabBar active={"inicio"} />
        </div>
    )
}

# --- src\app\agendamento\page.tsx ---

import NavBar from "@/components/nav-bar";

export default function AgendamentoPage(){
    return(
        <>
            <NavBar active="agendamento"/>

            <main className="Flex justify-center">
                <div className="bg-slate-900 p-6 m-6 rounded min-w-1/3">
                    <h2>Agendamento</h2>
                </div>
            </main>
        </>

    )
}

# --- src\app\agendamento\alterar\[id]\page.tsx ---


"use client";

import { useState, useEffect, FormEvent } from 'react';
import { useParams, useRouter } from 'next/navigation';
import Link from 'next/link';
import NavBar from '@/components/nav-bar';

// Interface para a resposta da API
interface AgendamentoApiResponseDto {
    id: number;
    dataAgendamento: string; // Vem como YYYY-MM-DD
    observacao: string | null;
}

export default function AlterarAgendamentoPage() {
    const params = useParams();
    const router = useRouter();
    const idParam = params?.id;
    const id = typeof idParam === 'string' ? parseInt(idParam, 10) : null;

    // Estados do Formulário
    const [dataAgendamento, setDataAgendamento] = useState("");
    const [observacao, setObservacao] = useState("");

    // Estados de Controle
    const [isLoading, setIsLoading] = useState(true);
    const [isSaving, setIsSaving] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const [success, setSuccess] = useState<string | null>(null);

    // --- useEffect para buscar dados do agendamento ---
    useEffect(() => {
        if (id) {
            setIsLoading(true); setError(null); setSuccess(null);
            const fetchAgendamentoData = async () => {
                try {
                    const apiUrl = `http://localhost:8080/rest/agenda/${id}`; // Endpoint GET Agenda por ID
                    const response = await fetch(apiUrl);
                    if (response.status === 404) { throw new Error("Agendamento não encontrado."); }
                    if (!response.ok) { throw new Error(`Erro ao buscar dados: ${response.statusText}`); }
                    const data: AgendamentoApiResponseDto = await response.json();

                    setDataAgendamento(data.dataAgendamento ? data.dataAgendamento.split('T')[0] : '');
                    setObservacao(data.observacao || '');

                } catch (err: any) { setError(err.message || "Falha ao carregar dados para edição.");
                } finally { setIsLoading(false); }
            };
            fetchAgendamentoData();
        } else { setError("ID do agendamento inválido na URL."); setIsLoading(false); }
    }, [id]);

    // --- Manipulador para salvar as alterações ---
    const handleUpdate = async (event: FormEvent<HTMLFormElement>) => {
        event.preventDefault();
        if (!id) { setError("ID inválido para salvar."); return; }
        setIsSaving(true); setError(null); setSuccess(null);

        const agendamentoData = { dataAgendamento, observacao };
        const apiUrl = `http://localhost:8080/rest/agenda/${id}`; // Endpoint PUT Agenda

        try {
            const response = await fetch(apiUrl, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(agendamentoData),
            });
            if (!response.ok) {
                const errorData = await response.json().catch(() => ({ message: `Erro ${response.status}: ${response.statusText}.` }));
                throw new Error(errorData.message || `Erro ${response.status}`);
            }
            const result = await response.json();
            console.log("Update Success:", result);
            setSuccess("Agendamento atualizado com sucesso!");
            setTimeout(() => { setSuccess(null); }, 5000);
            // Não limpa form na edição
        } catch (err: any) { setError(err.message || "Falha ao salvar alterações.");
        } finally { setIsSaving(false); }
    };

    // --- Renderização ---
    if (isLoading) { /* ... código de loading ... */
        return ( <> <NavBar active="agendamento" /> <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white"> <p className="text-center text-sky-300 py-10">Carregando dados do agendamento...</p> </main> </> );
    }
    if (error && !dataAgendamento) { /* ... código de erro fatal ... */
        return ( <> <NavBar active="agendamento" /> <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white"> <div className="bg-slate-900 p-6 md:p-8 m-4 rounded-lg shadow-xl w-full max-w-4xl mx-auto"> <h2 className="text-2xl md:text-3xl font-bold mb-6 text-center text-red-400">Erro ao Carregar</h2> <p className="text-center text-red-400 bg-red-900/50 p-3 rounded border border-red-500 mb-6">{error}</p> <div className="text-center"> <Link href="/agendamento/listar"> <button className="px-6 py-3 font-semibold text-white bg-slate-600 rounded-md shadow hover:bg-slate-700"> Voltar para Lista </button> </Link> </div> </div> </main> </> );
    }

    return (
        <>
            <NavBar active="agendamento" />
            <main className="flex items-center justify-center min-h-screen bg-[#012A46] text-white px-4 py-10">
                <div className="bg-slate-900 p-6 md:p-8 m-4 rounded-lg shadow-xl w-full max-w-lg">
                    <h2 className="text-2xl md:text-3xl font-bold mb-6 text-center">
                        Alterar Agendamento (ID: {id})
                    </h2>
                    <form onSubmit={handleUpdate}>
                        {/* Mensagem de Erro */}
                        {error && ( <div className="relative mb-4 text-red-400 bg-red-900/50 p-4 pr-10 rounded border border-red-500" role="alert"><span className="block sm:inline">{error}</span><button type="button" className="absolute top-0 bottom-0 right-0 px-4 py-3 text-red-400 hover:text-red-200" onClick={() => setError(null)} aria-label="Fechar"><span className="text-2xl" aria-hidden="true">&times;</span></button></div> )}
                        {/* Mensagem de Sucesso */}
                        {success && ( <p className="text-center text-green-400 mb-4">{success}</p> )}

                        {/* Campos do Formulário */}
                        <div className="mb-4">
                            <label htmlFor="dataAgendamento" className="block mb-1">Data do Agendamento:</label>
                            <input type="date" id="dataAgendamento" name="dataAgendamento" required className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500 date-input-fix" value={dataAgendamento} onChange={(e) => setDataAgendamento(e.target.value)} />
                        </div>
                        <div className="mb-6">
                            <label htmlFor="observacao" className="block mb-1">Observação:</label>
                            <textarea id="observacao" name="observacao" rows={5} className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500" value={observacao} onChange={(e) => setObservacao(e.target.value)} maxLength={400} />
                        </div>

                        {/* Botões de Ação */}
                        <div className="flex flex-col sm:flex-row items-center justify-center gap-4 mt-6">
                            <button type="submit" className={`px-6 py-3 font-semibold text-white bg-green-600 rounded-md shadow hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 focus:ring-offset-slate-900 transition-opacity duration-300 ${isSaving ? 'opacity-50 cursor-not-allowed' : ''}`} disabled={isSaving || isLoading}>
                                {isSaving ? 'Salvando...' : 'Salvar Alterações'}
                            </button>
                            <Link href="/agendamento/listar" className="px-6 py-3 font-semibold text-white bg-slate-600 rounded-md shadow hover:bg-slate-700 text-center focus:outline-none focus:ring-2 focus:ring-slate-500 focus:ring-offset-2 focus:ring-offset-slate-900">
                                Voltar para Lista
                            </Link>
                        </div>
                    </form>
                </div>
            </main>
            {/* Estilos CSS Globais */}
            <style jsx global>{`
                .date-input-fix::-webkit-calendar-picker-indicator { filter: invert(0.8); }
                input[type="date"]:required:invalid::-webkit-datetime-edit { color: transparent; }
                input[type="date"]:focus::-webkit-datetime-edit { color: white !important; }
                input[type="date"]::-webkit-datetime-edit { color: white; }
            `}</style>
        </>
    );
}


# --- src\app\agendamento\buscar\page.tsx ---

// app/agendamento/buscar/page.tsx
"use client";

import { useState, useEffect, ChangeEvent, FormEvent } from 'react';
import Link from 'next/link';
import { useRouter } from 'next/navigation';
import NavBar from '@/components/nav-bar';

// --- Interfaces para Tipagem ---
interface AgendamentoParaLista {
    id: number; dataAgendamento: string; observacao: string; }
interface AgendamentoApiResponseDto {
    id: number; dataAgendamento: string; observacao: string | null; }
// -----------------------------
type TipoBuscaAgendamento = 'id' | 'data' | 'observacao'; // Tipos de busca

export default function BuscarAgendamentosPage() {
    const [todosAgendamentos, setTodosAgendamentos] = useState<AgendamentoParaLista[]>([]);
    const [resultadosBusca, setResultadosBusca] = useState<AgendamentoParaLista[]>([]);
    const [tipoBusca, setTipoBusca] = useState<TipoBuscaAgendamento>('observacao'); // Padrão: observacao
    const [termoBusca, setTermoBusca] = useState('');
    const [isLoading, setIsLoading] = useState(false);
    const [isSearching, setIsSearching] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const [success, setSuccess] = useState<string | null>(null);
    const [buscaRealizada, setBuscaRealizada] = useState(false);

    // --- Estados e Funções para Modal de Deleção ---
    const [showDeleteModal, setShowDeleteModal] = useState(false);
    const [agendamentoParaDeletar, setAgendamentoParaDeletar] = useState<AgendamentoParaLista | null>(null);
    const [isDeleting, setIsDeleting] = useState(false);
    const [showDeleteSuccessModal, setShowDeleteSuccessModal] = useState(false);
    const router = useRouter();

    const fetchTodosAgendamentos = async () => { /* ... (igual listagem) ... */
        if (todosAgendamentos.length > 0) return;
        setIsLoading(true); setError(null); setSuccess(null);
        try {
            const response = await fetch("http://localhost:8080/rest/agenda/all");
            if (!response.ok) { throw new Error(`Erro HTTP ${response.status}: ${response.statusText}`); }
            const data: AgendamentoApiResponseDto[] = await response.json();
            const agendamentosFormatados: AgendamentoParaLista[] = data.map(dto => ({
                id: dto.id,
                dataAgendamento: dto.dataAgendamento ? new Date(dto.dataAgendamento + 'T00:00:00').toLocaleDateString('pt-BR') : 'N/A',
                observacao: dto.observacao || '',
            }));
            setTodosAgendamentos(agendamentosFormatados);
        } catch (err: any) { setError(err.message || "Falha ao carregar dados base.");
        } finally { setIsLoading(false); }
    };
    useEffect(() => { fetchTodosAgendamentos(); }, []);

    const handleSearch = (event?: FormEvent<HTMLFormElement>) => { /* ... (lógica de filtro) ... */
        if (event) event.preventDefault();
        setIsSearching(true); setBuscaRealizada(true); setSuccess(null); setError(null);
        const query = termoBusca.trim().toLowerCase();
        if (!query) { setResultadosBusca([]); setIsSearching(false); return; }
        let resultados: AgendamentoParaLista[] = [];
        switch (tipoBusca) {
            case 'id':
                resultados = todosAgendamentos.filter(a => a.id.toString() === query.replace(/\D/g, '')); break;
            case 'data': // Busca simples por data formatada (DD/MM/YYYY)
                resultados = todosAgendamentos.filter(a => a.dataAgendamento.includes(query)); break;
            case 'observacao':
                resultados = todosAgendamentos.filter(a => a.observacao.toLowerCase().includes(query)); break;
            default: resultados = [];
        }
        setResultadosBusca(resultados); setIsSearching(false);
    };
    const handleDeleteClick = (agendamento: AgendamentoParaLista) => { /* ... (igual listagem) ... */
        setAgendamentoParaDeletar(agendamento); setShowDeleteModal(true); setError(null); setSuccess(null); };
    const confirmDelete = async () => { /* ... (igual listagem) ... */
        if (!agendamentoParaDeletar) return; setIsDeleting(true); setError(null); setSuccess(null);
        const { id } = agendamentoParaDeletar;
        try {
            const response = await fetch(`http://localhost:8080/rest/agenda/${id}`, { method: 'DELETE' });
            if (!response.ok) { const errorText = await response.text().catch(() => `Erro ${response.status}`); throw new Error(`Falha ao deletar: ${errorText || response.statusText}`); }
            setShowDeleteModal(false); setShowDeleteSuccessModal(true);
            setTodosAgendamentos(prev => prev.filter(a => a.id !== id));
            setResultadosBusca(prev => prev.filter(a => a.id !== id));
        } catch (err: any) { setError(err.message || "Falha ao excluir."); setShowDeleteModal(false);
        } finally { setIsDeleting(false); }
    };
    const cancelDelete = () => { /* ... (igual listagem) ... */
        setShowDeleteModal(false); setAgendamentoParaDeletar(null); };
    const closeSuccessModal = () => { /* ... (igual listagem) ... */
        setShowDeleteSuccessModal(false); setAgendamentoParaDeletar(null); };
    const getPlaceholder = (): string => { /* ... (adaptado) ... */
        switch (tipoBusca) {
            case 'id': return 'Digite o ID...';
            case 'data': return 'Digite a data (DD/MM/YYYY)...';
            case 'observacao': return 'Digite parte da observação...';
            default: return 'Digite o termo...';
        }
    }
    // -------------------------------------------------------------

    return (
        <>
            <NavBar active="agendamento" />
            <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                <h1 className="text-3xl font-bold mb-6 text-center">Buscar Agendamentos</h1>

                {/* Formulário de Busca */}
                <form onSubmit={handleSearch} className="mb-8 p-6 bg-slate-800 rounded-lg shadow-lg flex flex-col md:flex-row gap-4 items-end">
                    {/* Select para tipo de busca */}
                    <div className="w-full md:w-auto">
                        <label htmlFor="tipoBusca" className="block text-sm font-medium mb-1 text-slate-300">Buscar por:</label>
                        <select id="tipoBusca" name="tipoBusca" className="w-full p-2 rounded bg-slate-700 border border-slate-600 focus:outline-none focus:ring-2 focus:ring-sky-500" value={tipoBusca} onChange={(e) => { setTipoBusca(e.target.value as TipoBuscaAgendamento); setTermoBusca(''); setResultadosBusca([]); setBuscaRealizada(false); }}>
                            <option value="observacao">Observação</option>
                            <option value="id">ID</option>
                            <option value="data">Data (DD/MM/YYYY)</option>
                        </select>
                    </div>
                    {/* Input único para termo */}
                    <div className="flex-1 min-w-0">
                        <label htmlFor="termoBusca" className="block text-sm font-medium mb-1 text-slate-300">Termo de Busca:</label>
                        <input type={tipoBusca === 'id' ? 'number' : 'text'} id="termoBusca" className="w-full p-2 rounded bg-slate-700 border border-slate-600 focus:outline-none focus:ring-2 focus:ring-sky-500" value={termoBusca} onChange={(e) => setTermoBusca(e.target.value)} placeholder={getPlaceholder()} required />
                    </div>
                    <button type="submit" className="px-5 py-2 bg-sky-600 hover:bg-sky-700 text-white font-semibold rounded-md shadow focus:outline-none focus:ring-2 focus:ring-sky-500 whitespace-nowrap" disabled={isLoading || isSearching}>
                        {isSearching ? 'Buscando...' : 'Buscar'}
                    </button>
                </form>

                {/* Mensagens e Tabela de Resultados (lógica similar à listagem/busca cliente) */}
                {isLoading && <p className="text-center text-sky-300 py-4">Carregando...</p>}
                {error && ( <div className="relative mb-4 text-red-400 bg-red-900/50 p-4 pr-10 rounded border border-red-500" role="alert"><span className="block sm:inline">{error}</span><button type="button" className="absolute top-0 bottom-0 right-0 px-4 py-3 text-red-400 hover:text-red-200" onClick={() => setError(null)} aria-label="Fechar"><span className="text-2xl" aria-hidden="true">&times;</span></button></div> )}
                {/* Sucesso é modal */}

                {!isLoading && buscaRealizada && (
                    <div className="overflow-x-auto bg-slate-900 rounded-lg shadow mt-6">
                        <h2 className="text-xl font-semibold p-4 bg-slate-800 rounded-t-lg">Resultados da Busca</h2>
                        <table className="min-w-full table-auto">
                            <thead className="bg-slate-800 border-b border-slate-700">
                            <tr>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">ID</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Data</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Observação</th>
                                <th className="px-6 py-3 text-center text-xs font-medium text-slate-300 uppercase tracking-wider">Ações</th>
                            </tr>
                            </thead>
                            <tbody className="divide-y divide-slate-700">
                            {isSearching ? ( <tr><td colSpan={4} className="px-6 py-4 text-center text-slate-400">Buscando...</td></tr>
                            ) : resultadosBusca.length === 0 ? ( <tr><td colSpan={4} className="px-6 py-4 text-center text-slate-400">Nenhum agendamento encontrado.</td></tr>
                            ) : (
                                resultadosBusca.map((agendamento) => (
                                    <tr key={agendamento.id} className="hover:bg-slate-800/50">
                                        <td className="px-6 py-4 whitespace-nowrap">{agendamento.id}</td>
                                        <td className="px-6 py-4 whitespace-nowrap">{agendamento.dataAgendamento}</td>
                                        <td className="px-6 py-4 whitespace-normal max-w-md truncate" title={agendamento.observacao}>{agendamento.observacao}</td>
                                        <td className="px-6 py-4 whitespace-nowrap text-center space-x-2">
                                            {(agendamento.id) ? ( <Link href={`/agendamento/alterar/${agendamento.id}`}><button className="px-3 py-1 text-sm bg-yellow-500 hover:bg-yellow-600 text-black rounded" disabled={isDeleting}>Editar</button></Link>
                                            ) : ( <button className="px-3 py-1 text-sm bg-gray-500 text-black rounded cursor-not-allowed" disabled>Editar</button> )}
                                            <button onClick={() => handleDeleteClick(agendamento)} className="px-3 py-1 text-sm bg-red-600 hover:bg-red-700 text-white rounded" disabled={isDeleting || !agendamento.id}>
                                                Deletar
                                            </button>
                                        </td>
                                    </tr>
                                ))
                            )}
                            </tbody>
                        </table>
                    </div>
                )}
            </main>

            {/* Modais de Deleção (iguais aos da listagem) */}
            {showDeleteModal && agendamentoParaDeletar && ( <div className="fixed inset-0 bg-black bg-opacity-75 z-40 flex items-center justify-center p-4" onClick={cancelDelete}><div className="bg-slate-800 p-6 rounded-lg shadow-xl max-w-md w-full z-50 border border-red-500" onClick={(e) => e.stopPropagation()}><h3 className="text-xl font-semibold text-red-400 mb-4">Confirmar Exclusão</h3><p className="text-white mb-3">Tem certeza?</p><div className='text-slate-300 text-sm mb-6 border-l-2 border-red-500 pl-3'><p><strong>ID:</strong> {agendamentoParaDeletar.id}</p><p><strong>Data:</strong> {agendamentoParaDeletar.dataAgendamento}</p><p><strong>Obs:</strong> {agendamentoParaDeletar.observacao}</p></div><div className="flex justify-end gap-4"><button type="button" className="px-4 py-2 bg-slate-600 hover:bg-slate-700 text-white font-semibold rounded-md" onClick={cancelDelete} disabled={isDeleting}>Não</button><button type="button" className={`px-4 py-2 bg-red-600 hover:bg-red-700 text-white font-semibold rounded-md ${isDeleting ? 'opacity-50 cursor-not-allowed' : ''}`} onClick={confirmDelete} disabled={isDeleting}>{isDeleting ? 'Excluindo...' : 'Sim'}</button></div></div></div> )}
            {showDeleteSuccessModal && ( <div className="fixed inset-0 bg-black bg-opacity-60 z-40 flex items-center justify-center p-4" onClick={closeSuccessModal}><div className="bg-slate-800 p-6 rounded-lg shadow-xl max-w-sm w-full z-50 border border-green-500" onClick={(e) => e.stopPropagation()}><h3 className="text-xl font-semibold text-green-400 mb-4 text-center">Sucesso!</h3><p className="text-white mb-6 text-center">Agendamento excluído.</p><div className="flex justify-center"><button type="button" className="px-4 py-2 bg-green-600 hover:bg-green-700 text-white font-semibold rounded-md" onClick={closeSuccessModal}>OK</button></div></div></div> )}
        </>
    );
}


# --- src\app\agendamento\cadastrar\page.tsx ---

// app/agendamento/cadastrar/page.tsx
"use client";

import { useState, FormEvent } from 'react';
import Link from 'next/link';
import NavBar from '@/components/nav-bar';

export default function CadastrarAgendamentoPage() {

    const today = new Date().toISOString().split('T')[0];
    const initialState = {
        dataAgendamento: today,
        observacao: ""
    };

    // Estados do Formulário
    const [dataAgendamento, setDataAgendamento] = useState(initialState.dataAgendamento);
    const [observacao, setObservacao] = useState(initialState.observacao);

    // Estados de Controle
    const [isLoading, setIsLoading] = useState(false); // Renomeado de isSaving
    const [error, setError] = useState<string | null>(null);
    const [success, setSuccess] = useState<string | null>(null);

    // Função para Limpar o Formulário
    const resetForm = () => {
        setDataAgendamento(initialState.dataAgendamento);
        setObservacao(initialState.observacao);
        setError(null);
    };

    // --- Manipulador de Submissão do Formulário ---
    const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {
        event.preventDefault();
        setIsLoading(true); setError(null); setSuccess(null);

        const agendamentoData = { dataAgendamento, observacao };

        console.log('Salvando agendamento:', JSON.stringify(agendamentoData, null, 2));
        const apiUrl = "http://localhost:8080/rest/agenda"; // Endpoint POST Agenda

        try {
            const response = await fetch(apiUrl, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(agendamentoData),
            });

            if (!response.ok) {
                const errorData = await response.json().catch(() => ({ message: `Erro ${response.status}: ${response.statusText}.` }));
                throw new Error(errorData.message || `Erro ${response.status}`);
            }

            const result = await response.json();
            console.log("Save Success:", result);
            setSuccess("Agendamento criado com sucesso!");
            resetForm(); // Limpa o formulário
            setTimeout(() => { setSuccess(null); }, 5000); // Limpa msg após 5s

        } catch (err: any) {
            setError(err.message || "Falha ao criar agendamento.");
        } finally {
            setIsLoading(false);
        }
    };

    return (
        <>
            <NavBar active="agendamento" />
            <main className="flex items-center justify-center min-h-screen bg-[#012A46] text-white px-4 py-10">
                <div className="bg-slate-900 p-6 md:p-8 m-4 rounded-lg shadow-xl w-full max-w-lg"> {/* Ajustado max-width */}
                    <h2 className="text-2xl md:text-3xl font-bold mb-6 text-center">Novo Agendamento</h2>
                    <form onSubmit={handleSubmit}>
                        {/* Mensagens */}
                        {error && ( <div className="relative mb-4 text-red-400 bg-red-900/50 p-4 pr-10 rounded border border-red-500" role="alert"><span className="block sm:inline">{error}</span><button type="button" className="absolute top-0 bottom-0 right-0 px-4 py-3 text-red-400 hover:text-red-200" onClick={() => setError(null)} aria-label="Fechar"><span className="text-2xl" aria-hidden="true">&times;</span></button></div> )}
                        {success && ( <p className="text-center text-green-400 mb-4">{success}</p> )}

                        {/* Campos do Formulário */}
                        <div className="mb-4">
                            <label htmlFor="dataAgendamento" className="block mb-1">Data do Agendamento:</label>
                            <input
                                type="date"
                                id="dataAgendamento"
                                name="dataAgendamento"
                                required
                                className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500 date-input-fix"
                                value={dataAgendamento}
                                onChange={(e) => setDataAgendamento(e.target.value)}
                            />
                        </div>
                        <div className="mb-6">
                            <label htmlFor="observacao" className="block mb-1">Observação:</label>
                            <textarea
                                id="observacao"
                                name="observacao"
                                rows={5}
                                className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500"
                                value={observacao}
                                onChange={(e) => setObservacao(e.target.value)}
                                maxLength={400} // Baseado no DTO/Model
                            />
                        </div>

                        {/* Botões de Ação */}
                        <div className="flex flex-col sm:flex-row items-center justify-center gap-4 mt-6">
                            <button type="submit" className={`px-6 py-3 font-semibold text-white bg-sky-600 rounded-md shadow hover:bg-sky-700 focus:outline-none focus:ring-2 focus:ring-sky-500 focus:ring-offset-2 focus:ring-offset-slate-900 transition-opacity duration-300 ${isLoading ? 'opacity-50 cursor-not-allowed' : ''}`} disabled={isLoading}>
                                {isLoading ? 'Salvando...' : 'Salvar Agendamento'}
                            </button>
                            <Link href="/agendamento/listar" className="px-6 py-3 font-semibold text-white bg-slate-600 rounded-md shadow hover:bg-slate-700 text-center focus:outline-none focus:ring-2 focus:ring-slate-500 focus:ring-offset-2 focus:ring-offset-slate-900">
                                Voltar para Lista
                            </Link>
                        </div>
                    </form>
                </div>
            </main>
            {/* Estilos CSS Globais */}
            <style jsx global>{`
                .date-input-fix::-webkit-calendar-picker-indicator { filter: invert(0.8); }
                input[type="date"]:required:invalid::-webkit-datetime-edit { color: transparent; }
                input[type="date"]:focus::-webkit-datetime-edit { color: white !important; }
                input[type="date"]::-webkit-datetime-edit { color: white; }
            `}</style>
        </>
    );
}


# --- src\app\agendamento\deletar\page.tsx ---



# --- src\app\agendamento\listar\page.tsx ---

// app/agendamento/listar/page.tsx
"use client";

import { useState, useEffect } from 'react';
import Link from 'next/link';
import { useRouter } from 'next/navigation';
import NavBar from '@/components/nav-bar';

// --- Interfaces para Tipagem (Ajuste conforme sua API) ---
interface AgendamentoParaLista {
    id: number;
    dataAgendamento: string; // Data formatada
    observacao: string;
}
interface AgendamentoApiResponseDto {
    id: number;
    dataAgendamento: string; // Vem como yyyy-MM-dd
    observacao: string | null;
}
// -----------------------------

export default function ListarAgendamentosPage() {
    const [agendamentos, setAgendamentos] = useState<AgendamentoParaLista[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);
    // const [success, setSuccess] = useState<string | null>(null); // Usaremos o modal de sucesso

    // --- Estados para o Modal de Deleção (GARANTA QUE ESTÃO AQUI) ---
    const [showDeleteConfirmModal, setShowDeleteConfirmModal] = useState(false);
    const [showDeleteSuccessModal, setShowDeleteSuccessModal] = useState(false);
    const [agendamentoParaDeletar, setAgendamentoParaDeletar] = useState<AgendamentoParaLista | null>(null);
    const [isDeleting, setIsDeleting] = useState(false);
    // ---------------------------------------------------------------

    const router = useRouter();

    // --- Função para buscar e formatar os agendamentos ---
    const fetchAgendamentos = async () => {
        setIsLoading(true); setError(null);
        // Limpa estados dos modais ao recarregar a lista
        setShowDeleteConfirmModal(false); // <<< Chamada que estava dando erro
        setShowDeleteSuccessModal(false); // <<< Chamada que estava dando erro
        setAgendamentoParaDeletar(null);  // <<< Chamada que estava dando erro
        try {
            const response = await fetch("http://localhost:8080/rest/agenda/all"); // Endpoint GET Agenda
            if (!response.ok) { throw new Error(`Erro HTTP ${response.status}: ${response.statusText}`); }
            const data: AgendamentoApiResponseDto[] = await response.json();

            const agendamentosFormatados: AgendamentoParaLista[] = data.map(dto => ({
                id: dto.id,
                dataAgendamento: dto.dataAgendamento ? new Date(dto.dataAgendamento + 'T00:00:00').toLocaleDateString('pt-BR', { timeZone: 'UTC' }) : 'N/A', // Adiciona UTC timezone
                observacao: dto.observacao || '',
            }));
            setAgendamentos(agendamentosFormatados);
        } catch (err: any) { setError(err.message || "Falha ao carregar agendamentos.");
        } finally { setIsLoading(false); }
    };

    useEffect(() => { fetchAgendamentos(); }, []);

    // --- Funções para o fluxo de deleção com modal ---
    const handleDeleteClick = (agendamento: AgendamentoParaLista) => {
        setAgendamentoParaDeletar(agendamento); setShowDeleteModal(true); setError(null); };

    const confirmDelete = async () => {
        if (!agendamentoParaDeletar) return;
        setIsDeleting(true); setError(null);
        const { id } = agendamentoParaDeletar;
        try {
            const response = await fetch(`http://localhost:8080/rest/agenda/${id}`, { method: 'DELETE' });
            if (!response.ok) {
                const errorText = await response.text().catch(() => `Erro ${response.status}`);
                throw new Error(`Falha ao deletar agendamento: ${errorText || response.statusText}`); }
            setShowDeleteModal(false); setShowDeleteSuccessModal(true); // Abre modal de sucesso
            setAgendamentos(prev => prev.filter(a => a.id !== id)); // Remove da lista local
        } catch (err: any) { setError(err.message || "Falha ao excluir agendamento."); setShowDeleteModal(false);
        } finally { setIsDeleting(false); }
    };

    const cancelDelete = () => { setShowDeleteModal(false); setAgendamentoParaDeletar(null); };
    const closeSuccessModal = () => { setShowDeleteSuccessModal(false); setAgendamentoParaDeletar(null); };
    // ----------------------------------------------------

    return (
        <>
            <NavBar active="agendamento" />
            <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                <div className="flex justify-between items-center mb-6">
                    <h1 className="text-3xl font-bold">Agendamentos</h1>
                    <Link href="/agendamento/cadastrar">
                        <button className="px-4 py-2 bg-sky-600 hover:bg-sky-700 text-white font-semibold rounded-md shadow focus:outline-none focus:ring-2 focus:ring-sky-500">
                            Novo Agendamento
                        </button>
                    </Link>
                </div>

                {/* Mensagens */}
                {isLoading && <p className="text-center text-sky-300 py-4">Carregando...</p>}
                {error && ( <div className="relative mb-4 text-red-400 bg-red-900/50 p-4 pr-10 rounded border border-red-500" role="alert"><span className="block sm:inline">{error}</span><button type="button" className="absolute top-0 bottom-0 right-0 px-4 py-3 text-red-400 hover:text-red-200" onClick={() => setError(null)} aria-label="Fechar"><span className="text-2xl" aria-hidden="true">&times;</span></button></div> )}

                {/* Tabela de Agendamentos */}
                {!isLoading && (
                    <div className="overflow-x-auto bg-slate-900 rounded-lg shadow">
                        <table className="min-w-full table-auto">
                            <thead className="bg-slate-800 border-b border-slate-700">
                            <tr>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">ID</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Data</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Observação</th>
                                <th className="px-6 py-3 text-center text-xs font-medium text-slate-300 uppercase tracking-wider">Ações</th>
                            </tr>
                            </thead>
                            <tbody className="divide-y divide-slate-700">
                            {agendamentos.length === 0 && !isLoading ? (
                                <tr><td colSpan={4} className="px-6 py-4 text-center text-slate-400">Nenhum agendamento encontrado.</td></tr>
                            ) : (
                                agendamentos.map((agendamento) => (
                                    <tr key={agendamento.id} className="hover:bg-slate-800/50">
                                        <td className="px-6 py-4 whitespace-nowrap">{agendamento.id}</td>
                                        <td className="px-6 py-4 whitespace-nowrap">{agendamento.dataAgendamento}</td>
                                        <td className="px-6 py-4 whitespace-normal max-w-md truncate" title={agendamento.observacao}>{agendamento.observacao}</td>
                                        <td className="px-6 py-4 whitespace-nowrap text-center space-x-2">
                                            {(agendamento.id) ? ( <Link href={`/agendamento/alterar/${agendamento.id}`}><button className="px-3 py-1 text-sm bg-yellow-500 hover:bg-yellow-600 text-black rounded" disabled={isDeleting}>Editar</button></Link>
                                            ) : ( <button className="px-3 py-1 text-sm bg-gray-500 text-black rounded cursor-not-allowed" disabled>Editar</button> )}
                                            <button onClick={() => handleDeleteClick(agendamento)} className="px-3 py-1 text-sm bg-red-600 hover:bg-red-700 text-white rounded" disabled={isDeleting || !agendamento.id}>
                                                Deletar
                                            </button>
                                        </td>
                                    </tr>
                                ))
                            )}
                            </tbody>
                        </table>
                    </div>
                )}
            </main>

            {/* Modal de Confirmação de Deleção */}
            {showDeleteConfirmModal && agendamentoParaDeletar && (
                <div className="fixed inset-0 bg-black bg-opacity-75 z-40 flex items-center justify-center p-4" onClick={cancelDelete}>
                    <div className="bg-slate-800 p-6 rounded-lg shadow-xl max-w-md w-full z-50 border border-red-500" onClick={(e) => e.stopPropagation()}>
                        <h3 className="text-xl font-semibold text-red-400 mb-4">Confirmar Exclusão</h3>
                        <p className="text-white mb-3">Tem certeza que deseja excluir o agendamento?</p>
                        <div className='text-slate-300 text-sm mb-6 border-l-2 border-red-500 pl-3'>
                            <p><strong>ID:</strong> {agendamentoParaDeletar.id}</p>
                            <p><strong>Data:</strong> {agendamentoParaDeletar.dataAgendamento}</p>
                            <p><strong>Obs:</strong> {agendamentoParaDeletar.observacao}</p>
                        </div>
                        <div className="flex justify-end gap-4">
                            <button type="button" className="px-4 py-2 bg-slate-600 hover:bg-slate-700 text-white font-semibold rounded-md" onClick={cancelDelete} disabled={isDeleting}>Não</button>
                            <button type="button" className={`px-4 py-2 bg-red-600 hover:bg-red-700 text-white font-semibold rounded-md ${isDeleting ? 'opacity-50 cursor-not-allowed' : ''}`} onClick={confirmDelete} disabled={isDeleting}>
                                {isDeleting ? 'Excluindo...' : 'Sim'}
                            </button>
                        </div>
                    </div>
                </div>
            )}

            {/* Modal de Sucesso da Deleção */}
            {showDeleteSuccessModal && (
                <div className="fixed inset-0 bg-black bg-opacity-60 z-40 flex items-center justify-center p-4" onClick={closeSuccessModal}>
                    <div className="bg-slate-800 p-6 rounded-lg shadow-xl max-w-sm w-full z-50 border border-green-500" onClick={(e) => e.stopPropagation()}>
                        <h3 className="text-xl font-semibold text-green-400 mb-4 text-center">Sucesso!</h3>
                        <p className="text-white mb-6 text-center">Agendamento excluído.</p>
                        <div className="flex justify-center">
                            <button type="button" className="px-4 py-2 bg-green-600 hover:bg-green-700 text-white font-semibold rounded-md" onClick={closeSuccessModal}>OK</button>
                        </div>
                    </div>
                </div>
            )}
        </>
    );
}


# --- src\app\clientes\page.tsx ---

// app/clientes/page.tsx
"use client";

import Link from 'next/link';
import NavBar from '@/components/nav-bar';

export default function ClientesMenuPage() {

    return (
        <>
            {/* Passa a prop 'active' correta para a NavBar */}
            <NavBar active="clientes" />

            <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                <h1 className="text-3xl font-bold mb-8 text-center">Gerenciar Clientes</h1>

                <div className="flex flex-col items-center gap-6 mt-10 md:flex-row md:justify-center">
                    {/* Botão/Link para Listar */}
                    <Link href="/clientes/listar">
                        <button className="w-60 px-6 py-3 text-lg font-semibold text-white bg-sky-600 rounded-md shadow hover:bg-sky-700 focus:outline-none focus:ring-2 focus:ring-sky-500 focus:ring-offset-2 focus:ring-offset-slate-900 transition-colors">
                            Listar Clientes
                        </button>
                    </Link>

                    {/* Botão/Link para Cadastrar */}
                    <Link href="/clientes/cadastrar">
                        <button className="w-60 px-6 py-3 text-lg font-semibold text-white bg-green-600 rounded-md shadow hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 focus:ring-offset-slate-900 transition-colors">
                            Cadastrar Novo Cliente
                        </button>
                    </Link>

                    {/* Você pode adicionar mais botões aqui para outras ações se desejar */}

                </div>
            </main>
        </>
    );
}


# --- src\app\clientes\alterar\[idCliente]\[idEndereco]\page.tsx ---


"use client";

import { useState, useEffect, FormEvent } from 'react';
import { useParams, useRouter } from 'next/navigation';
import Link from 'next/link';
import NavBar from '@/components/nav-bar';
import { IMaskInput } from 'react-imask';

// Função auxiliar para limpar máscaras
const cleanMaskedValue = (value: string): string => {
    return value.replace(/\D/g, '');
};

// Interface para a resposta da API
interface ClienteApiResponseDto {
    idCli: number;
    nome: string;
    sobrenome: string;
    tipoCliente: string;
    numeroDocumento: string;
    sexo: string;
    dataNascimento: string;
    atividadeProfissional: string;
    endereco: {
        codigo: number; numero: number; cep: string; logradouro: string;
        cidade: string; bairro: string; estado: string; complemento: string | null;
    } | null;
    contato: {
        codigo: number; celular: string; email: string; contato: string;
    } | null;
}

export default function AlterarClientePage() {
    const params = useParams();
    const router = useRouter();

    const idClienteParam = params?.idCliente;
    const idEnderecoParam = params?.idEndereco;
    const idCliente = typeof idClienteParam === 'string' ? parseInt(idClienteParam, 10) : null;
    const idEndereco = typeof idEnderecoParam === 'string' ? parseInt(idEnderecoParam, 10) : null;

    // Estados do Formulário
    const [tipoCliente, setTipoCliente] = useState("PF");
    const [nome, setNome] = useState("");
    const [sobrenome, setSobrenome] = useState("");
    const [sexo, setSexo] = useState("M");
    const [tipoDocumento, setTipoDocumento] = useState("CPF");
    const [numeroDocumento, setNumeroDocumento] = useState("");
    const [dataNascimento, setDataNascimento] = useState("");
    const [atividadeProfissional, setAtividadeProfissional] = useState("");
    const [celular, setCelular] = useState("");
    const [email, setEmail] = useState("");
    const [contato, setContato] = useState("");
    const [numeroCasa, setNumeroCasa] = useState("");
    const [cep, setCep] = useState("");
    const [logradouro, setLogradouro] = useState("");
    const [bairro, setBairro] = useState("");
    const [cidade, setCidade] = useState("");
    const [estado, setEstado] = useState("");
    const [complemento, setComplemento] = useState("");

    // Estados de Controle
    const [isLoading, setIsLoading] = useState(true);
    const [isSaving, setIsSaving] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const [success, setSuccess] = useState<string | null>(null); // Estado para a mensagem de sucesso

    // useEffect para buscar dados (mantido igual)
    useEffect(() => {
        if (idCliente && idEndereco) {
            setIsLoading(true); setError(null); setSuccess(null);
            const fetchClienteData = async () => {
                try {
                    const apiUrl = `http://localhost:8080/rest/clientes/${idCliente}/${idEndereco}`;
                    const response = await fetch(apiUrl);
                    if (response.status === 404) { throw new Error("Cliente não encontrado."); }
                    if (!response.ok) { throw new Error(`Erro ao buscar dados: ${response.statusText}`); }
                    const data: ClienteApiResponseDto = await response.json();

                    // Preenche estados...
                    setTipoCliente(data.tipoCliente || 'PF');
                    setNome(data.nome || '');
                    setSobrenome(data.sobrenome || '');
                    setSexo(data.sexo || 'M');
                    setTipoDocumento(data.tipoDocumento || 'CPF');
                    setNumeroDocumento(data.numeroDocumento || '');
                    setDataNascimento(data.dataNascimento ? data.dataNascimento.split('T')[0] : '');
                    setAtividadeProfissional(data.atividadeProfissional || '');
                    setCelular(data.contato?.celular || '');
                    setEmail(data.contato?.email || '');
                    setContato(data.contato?.contato || '');
                    setNumeroCasa(data.endereco?.numero?.toString() || '');
                    setCep(data.endereco?.cep || '');
                    setLogradouro(data.endereco?.logradouro || '');
                    setBairro(data.endereco?.bairro || '');
                    setCidade(data.endereco?.cidade || ''); // Assume que DTO de resposta tem 'cidade'
                    setEstado(data.endereco?.estado || ''); // Assume que DTO de resposta tem 'estado'
                    setComplemento(data.endereco?.complemento || '');

                } catch (err: any) {
                    setError(err.message || "Falha ao carregar dados.");
                } finally {
                    setIsLoading(false);
                }
            };
            fetchClienteData();
        } else {
            setError("IDs inválidos na URL."); setIsLoading(false);
        }
    }, [idCliente, idEndereco]);

    // --- Manipulador para salvar as alterações (handleUpdate) ---
    const handleUpdate = async (event: FormEvent<HTMLFormElement>) => {
        event.preventDefault();
        if (!idCliente || !idEndereco) { setError("IDs inválidos."); return; }

        setIsSaving(true); setError(null); setSuccess(null);

        const cleanedNumeroDocumento = cleanMaskedValue(numeroDocumento);
        const cleanedCelular = cleanMaskedValue(celular);
        const cleanedCep = cleanMaskedValue(cep);

        const clienteData = {
            tipoCliente, nome, sobrenome, sexo, tipoDocumento,
            numeroDocumento: cleanedNumeroDocumento, dataNascimento, atividadeProfissional,
            endereco: {
                numero: parseInt(numeroCasa, 10), cep: cleanedCep, logradouro, bairro,
                localidade: cidade, uf: estado, complemento,
            },
            contato: { celular: cleanedCelular, email, contato }
        };

        const apiUrl = `http://localhost:8080/rest/clientes/${idCliente}/${idEndereco}`;

        try {
            const response = await fetch(apiUrl, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(clienteData),
            });

            if (!response.ok) {
                const errorData = await response.json().catch(() => ({ message: `Erro ${response.status}: ${response.statusText}.` }));
                throw new Error(errorData.message || `Erro ${response.status}`);
            }

            const result = await response.json();
            console.log("Update Success:", result);
            setSuccess("Cliente atualizado com sucesso!"); // <<< Define a mensagem de sucesso

            // Limpa a mensagem de sucesso após alguns segundos
            setTimeout(() => {
                setSuccess(null);
            }, 5000); // 5 segundos

            // Não limpamos o formulário na edição

        } catch (err: any) {
            setError(err.message || "Falha ao salvar alterações.");
        } finally {
            setIsSaving(false);
        }
    };

    // --- Lógica de busca de CEP (mantida) ---
    const handleCepChange = async (value: string) => {
        const maskedCep = value;
        const newCep = cleanMaskedValue(maskedCep);
        setCep(maskedCep);
        setLogradouro(''); setBairro(''); setCidade(''); setEstado('');
        if (newCep.length === 8) {
            setIsSaving(true); setError(null); // Reutiliza isSaving para indicar busca CEP
            try {
                const response = await fetch(`https://viacep.com.br/ws/${newCep}/json/`);
                if (!response.ok) throw new Error('CEP não encontrado');
                const data = await response.json();
                if (data.erro) { throw new Error('CEP inválido'); }
                setLogradouro(data.logradouro || ''); setBairro(data.bairro || '');
                setCidade(data.localidade || ''); setEstado(data.uf || '');
            } catch (cepError: any) { setError(`Erro CEP: ${cepError.message}`);
            } finally { setIsSaving(false); }
        }
    };

    const cpfMask = "000.000.000-00";
    const cnpjMask = "00.000.000/0000-00";

    // --- Renderização ---
    if (isLoading) { /* ... código de loading ... */
        return (
            <>
                <NavBar active="clientes" />
                <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                    <p className="text-center text-sky-300 py-10">Carregando dados do cliente...</p>
                </main>
            </>
        );
    }
    if (error && !nome) { /* ... código de erro fatal se não carregou nome ... */
        return (
            <>
                <NavBar active="clientes" />
                <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                    <div className="bg-slate-900 p-6 md:p-8 m-4 rounded-lg shadow-xl w-full max-w-4xl mx-auto">
                        <h2 className="text-2xl md:text-3xl font-bold mb-6 text-center text-red-400">Erro ao Carregar</h2>
                        <p className="text-center text-red-400 bg-red-900/50 p-3 rounded border border-red-500 mb-6">{error}</p>
                        <div className="text-center">
                            <Link href="/clientes/listar">
                                <button className="px-6 py-3 font-semibold text-white bg-slate-600 rounded-md shadow hover:bg-slate-700">
                                    Voltar para Lista
                                </button>
                            </Link>
                        </div>
                    </div>
                </main>
            </>
        );
    }

    return (
        <>
            <NavBar active="clientes" />
            <main className="flex items-center justify-center min-h-screen bg-[#012A46] text-white px-4 py-10">
                <div className="bg-slate-900 p-6 md:p-8 m-4 rounded-lg shadow-xl w-full max-w-4xl">
                    <h2 className="text-2xl md:text-3xl font-bold mb-6 text-center">Alterar Cliente (ID: {idCliente})</h2>
                    <form onSubmit={handleUpdate}>
                        {/* Caixa de Mensagem de Erro (mantida com botão fechar) */}
                        {error && (
                            <div className="relative mb-4 text-red-400 bg-red-900/50 p-4 pr-10 rounded border border-red-500" role="alert">
                                <span className="block sm:inline">{error}</span>
                                <button type="button" className="absolute top-0 bottom-0 right-0 px-4 py-3 text-red-400 hover:text-red-200" onClick={() => setError(null)} aria-label="Fechar">
                                    <span className="text-2xl" aria-hidden="true">&times;</span>
                                </button>
                            </div>
                        )}

                        {/* Fieldsets e Inputs (iguais ao cadastro, usando IMaskInput) */}
                        {/* Dados Pessoais */}
                        <fieldset className="mb-6 border border-slate-700 p-4 rounded">
                            <legend className="text-xl font-semibold mb-2 px-2">Dados Pessoais</legend>
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                <div className="mb-4">
                                    <label htmlFor="tipo_cliente" className="block mb-1">Tipo de Cliente:</label>
                                    <select id="tipo_cliente" name="tipo_cliente" required className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500" value={tipoCliente} onChange={(e) => setTipoCliente(e.target.value)}>
                                        <option value="PF">Pessoa Física</option>
                                        <option value="PJ">Pessoa Jurídica</option>
                                    </select>
                                </div>
                                <div className="mb-4">
                                    <label htmlFor="nome" className="block mb-1">Nome:</label>
                                    <input type="text" id="nome" name="nome" required className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500" value={nome} onChange={(e) => setNome(e.target.value)} />
                                </div>
                                <div className="mb-4">
                                    <label htmlFor="sobrenome" className="block mb-1">Sobrenome:</label>
                                    <input type="text" id="sobrenome" name="sobrenome" required className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500" value={sobrenome} onChange={(e) => setSobrenome(e.target.value)} />
                                </div>
                                <div className="mb-4">
                                    <label htmlFor="sexo" className="block mb-1">Sexo:</label>
                                    <select id="sexo" name="sexo" required className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500" value={sexo} onChange={(e) => setSexo(e.target.value)}>
                                        <option value="M">Masculino</option>
                                        <option value="F">Feminino</option>
                                        <option value="O">Outro</option>
                                    </select>
                                </div>
                                <div className="mb-4">
                                    <label htmlFor="tipo_documento" className="block mb-1">Tipo de Documento:</label>
                                    <select id="tipo_documento" name="tipo_documento" required className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500" value={tipoDocumento} onChange={(e) => { setTipoDocumento(e.target.value); setNumeroDocumento(''); }}>
                                        <option value="CPF">CPF</option>
                                        <option value="CNPJ">CNPJ</option>
                                    </select>
                                </div>
                                <div className="mb-4">
                                    <label htmlFor="numero_documento" className="block mb-1">Número do Documento:</label>
                                    <IMaskInput mask={tipoDocumento === 'CPF' ? cpfMask : cnpjMask} value={numeroDocumento} unmask={false} onAccept={(value) => setNumeroDocumento(value)} id="numero_documento" name="numero_documento" placeholder={tipoDocumento === 'CPF' ? '000.000.000-00' : '00.000.000/0000-00'} required className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500" />
                                </div>
                                <div className="mb-4">
                                    <label htmlFor="data_nascimento" className="block mb-1">Data de Nascimento:</label>
                                    <input type="date" id="data_nascimento" name="data_nascimento" required className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500 date-input-fix" value={dataNascimento} onChange={(e) => setDataNascimento(e.target.value)} />
                                </div>
                                <div className="mb-4">
                                    <label htmlFor="atividade_profissional" className="block mb-1">Atividade Profissional:</label>
                                    <input type="text" id="atividade_profissional" name="atividade_profissional" required className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500" value={atividadeProfissional} onChange={(e) => setAtividadeProfissional(e.target.value)} />
                                </div>
                            </div>
                        </fieldset>

                        {/* Contatos */}
                        <fieldset className="mb-6 border border-slate-700 p-4 rounded">
                            <legend className="text-xl font-semibold mb-2 px-2">Contatos</legend>
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                <div className="mb-4">
                                    <label htmlFor="celular" className="block mb-1">Celular:</label>
                                    <IMaskInput mask="(00) 00000-0000" value={celular} unmask={false} onAccept={(value) => setCelular(value)} type="tel" id="celular" name="celular" placeholder="(99) 99999-9999" required className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500" />
                                </div>
                                <div className="mb-4">
                                    <label htmlFor="email" className="block mb-1">E-mail:</label>
                                    <input type="email" id="email" name="email" placeholder="exemplo@dominio.com" required className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500" value={email} onChange={(e) => setEmail(e.target.value)} />
                                </div>
                                <div className="mb-4 md:col-span-2">
                                    <label htmlFor="contato" className="block mb-1">Nome do Contato Principal:</label>
                                    <input type="text" id="contato" name="contato" required className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500" value={contato} onChange={(e) => setContato(e.target.value)} />
                                </div>
                            </div>
                        </fieldset>

                        {/* Endereço */}
                        <fieldset className="mb-6 border border-slate-700 p-4 rounded">
                            <legend className="text-xl font-semibold mb-2 px-2">Endereço</legend>
                            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                                <div className="mb-4 md:col-span-1">
                                    <label htmlFor="cep" className="block mb-1">CEP:</label>
                                    <IMaskInput mask="00000-000" value={cep} unmask={false} onAccept={handleCepChange} id="cep" name="cep" placeholder="00000-000" required className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500" />
                                </div>
                                <div className="mb-4 md:col-span-2">
                                    <label htmlFor="logradouro" className="block mb-1">Logradouro:</label>
                                    <input type="text" id="logradouro" name="logradouro" maxLength={100} required readOnly className="w-full p-2 rounded bg-slate-700 border border-slate-600 cursor-not-allowed" value={logradouro} onChange={(e) => setLogradouro(e.target.value)} />
                                </div>
                                <div className="mb-4">
                                    <label htmlFor="numeroCasa" className="block mb-1">Número:</label>
                                    <input type="text" id="numeroCasa" name="numeroCasa" maxLength={8} required className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500" value={numeroCasa} onChange={(e) => setNumeroCasa(e.target.value)} />
                                </div>
                                <div className="mb-4">
                                    <label htmlFor="complemento" className="block mb-1">Complemento:</label>
                                    <input type="text" id="complemento" name="complemento" maxLength={100} className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500" value={complemento} onChange={(e) => setComplemento(e.target.value)} />
                                </div>
                                <div className="mb-4">
                                    <label htmlFor="bairro" className="block mb-1">Bairro:</label>
                                    <input type="text" id="bairro" name="bairro" maxLength={100} required readOnly className="w-full p-2 rounded bg-slate-700 border border-slate-600 cursor-not-allowed" value={bairro} onChange={(e) => setBairro(e.target.value)} />
                                </div>
                                <div className="mb-4">
                                    <label htmlFor="cidade" className="block mb-1">Cidade:</label>
                                    <input type="text" id="cidade" name="cidade" maxLength={100} required readOnly className="w-full p-2 rounded bg-slate-700 border border-slate-600 cursor-not-allowed" value={cidade} onChange={(e) => setCidade(e.target.value)} />
                                </div>
                                <div className="mb-4">
                                    <label htmlFor="estado" className="block mb-1">Estado:</label>
                                    <input type="text" id="estado" name="estado" maxLength={2} required readOnly className="w-full p-2 rounded bg-slate-700 border border-slate-600 cursor-not-allowed" value={estado} onChange={(e) => setEstado(e.target.value)} />
                                </div>
                            </div>
                        </fieldset>

                        {/* <<< Mensagem de Sucesso Simples (acima dos botões) >>> */}
                        {success && (
                            <p className="text-center text-green-400 mb-4">{success}</p>
                        )}

                        {/* Botões de Ação */}
                        <div className="flex flex-col sm:flex-row items-center justify-center gap-4 mt-6">
                            <button
                                type="submit"
                                className={`px-6 py-3 font-semibold text-white bg-green-600 rounded-md shadow hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 focus:ring-offset-slate-900 transition-opacity duration-300 ${isSaving ? 'opacity-50 cursor-not-allowed' : ''}`}
                                disabled={isSaving || isLoading}
                            >
                                {isSaving ? 'Salvando...' : 'Salvar Alterações'}
                            </button>
                            <Link href="/clientes/listar" className="px-6 py-3 font-semibold text-white bg-slate-600 rounded-md shadow hover:bg-slate-700 text-center focus:outline-none focus:ring-2 focus:ring-slate-500 focus:ring-offset-2 focus:ring-offset-slate-900">
                                Voltar para Lista
                            </Link>
                        </div>
                    </form>
                </div>
            </main>

            {/* Estilos CSS Globais */}
            <style jsx global>{`
                .date-input-fix::-webkit-calendar-picker-indicator { filter: invert(0.8); }
                input[type="date"]:required:invalid::-webkit-datetime-edit { color: transparent; }
                input[type="date"]:focus::-webkit-datetime-edit { color: white !important; }
                input[type="date"]::-webkit-datetime-edit { color: white; }
            `}</style>
        </>
    );
}


# --- src\app\clientes\buscar\page.tsx ---

// app/clientes/buscar/page.tsx
"use client";

import { useState, useEffect, ChangeEvent, FormEvent } from 'react';
import Link from 'next/link';
import NavBar from '@/components/nav-bar';

// Interfaces (mantidas da versão anterior)
interface ClienteParaLista {
    idCli: number;
    idEndereco: number;
    nomeCompleto: string;
    documento: string;
    email: string;
    cidadeEstado: string;
}

interface ClienteApiResponseDto {
    idCli: number;
    nome: string;
    sobrenome: string;
    tipoCliente: string;
    numeroDocumento: string;
    endereco: { codigo: number; cidade: string; estado: string; } | null;
    contato: { celular: string; email: string; } | null;
}

// Define os tipos de busca possíveis
type TipoBusca = 'nome' | 'id' | 'doc';

export default function BuscarClientesPage() {
    const [todosClientes, setTodosClientes] = useState<ClienteParaLista[]>([]);
    const [resultadosBusca, setResultadosBusca] = useState<ClienteParaLista[]>([]);
    const [tipoBusca, setTipoBusca] = useState<TipoBusca>('nome'); // <<< Novo estado: tipo de busca (padrão: nome)
    const [termoBusca, setTermoBusca] = useState(''); // <<< Novo estado: termo único de busca
    // const [termoBuscaNome, setTermoBuscaNome] = useState(''); // Removido
    // const [termoBuscaDoc, setTermoBuscaDoc] = useState(''); // Removido
    const [isLoading, setIsLoading] = useState(false);
    const [isSearching, setIsSearching] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const [buscaRealizada, setBuscaRealizada] = useState(false);

    // --- Função para buscar TODOS os clientes (mantida) ---
    const fetchTodosClientes = async () => {
        if (todosClientes.length > 0) return;
        setIsLoading(true);
        setError(null);
        try {
            const response = await fetch("http://localhost:8080/rest/clientes/all");
            if (!response.ok) {
                throw new Error(`Erro HTTP ${response.status}: ${response.statusText}`);
            }
            const data: ClienteApiResponseDto[] = await response.json();
            const clientesFormatados: ClienteParaLista[] = data.map(dto => ({
                idCli: dto.idCli,
                idEndereco: dto.endereco?.codigo || 0,
                nomeCompleto: `${dto.nome || ''} ${dto.sobrenome || ''}`.trim(),
                documento: dto.numeroDocumento || 'N/A',
                email: dto.contato?.email || 'N/A',
                cidadeEstado: dto.endereco ? `${dto.endereco.cidade || 'N/A'} - ${dto.endereco.estado || 'N/A'}` : 'N/A',
            }));
            setTodosClientes(clientesFormatados);
        } catch (err: any) {
            console.error("Erro ao buscar dados da API:", err);
            setError(err.message || "Falha ao carregar dados base dos clientes.");
        } finally {
            setIsLoading(false);
        }
    };

    // --- Busca inicial (mantida) ---
    useEffect(() => {
        fetchTodosClientes();
    }, []);

    // --- Função para realizar a busca/filtro (CLIENT-SIDE - MODIFICADA) ---
    const handleSearch = (event?: FormEvent<HTMLFormElement>) => {
        if (event) event.preventDefault();
        setIsSearching(true);
        setBuscaRealizada(true);

        const query = termoBusca.trim().toLowerCase(); // Termo de busca geral
        if (!query) { // Se a busca for vazia, mostra todos ou nenhum? Vamos mostrar nenhum.
            setResultadosBusca([]);
            setIsSearching(false);
            return;
        }

        let resultados: ClienteParaLista[] = [];

        // Filtra baseado no tipo de busca selecionado
        switch (tipoBusca) {
            case 'nome':
                resultados = todosClientes.filter(cliente =>
                    cliente.nomeCompleto.toLowerCase().includes(query)
                );
                break;
            case 'id':
                // Filtra por ID do cliente (idCli) - compara como string
                resultados = todosClientes.filter(cliente =>
                    cliente.idCli.toString() === query.replace(/\D/g, '') // Compara ID como string, remove não-dígitos da busca
                );
                break;
            case 'doc':
                // Filtra por documento (CPF/CNPJ) - remove não-dígitos de ambos para comparar
                const docQuery = query.replace(/\D/g, '');
                resultados = todosClientes.filter(cliente =>
                    cliente.documento.replace(/\D/g, '').includes(docQuery)
                );
                break;
            default:
                resultados = []; // Tipo de busca desconhecido
        }

        setResultadosBusca(resultados);
        setIsSearching(false);
    };

    // --- Função para deletar cliente (mantida) ---
    const handleDelete = async (idCliente: number, idEndereco: number) => {
        if (!idCliente || !idEndereco) {
            setError("ID inválido para exclusão."); return;
        }
        if (!window.confirm(`Tem certeza que deseja excluir o cliente ID ${idCliente} (Endereço ID ${idEndereco})?`)) {
            return;
        }
        setError(null);
        try {
            const response = await fetch(`http://localhost:8080/rest/clientes/${idCliente}/${idEndereco}`, { method: 'DELETE' });
            if (!response.ok) {
                const errorText = await response.text().catch(() => `Erro ${response.status}`);
                throw new Error(`Falha ao deletar cliente: ${errorText || response.statusText}`);
            }
            alert("Cliente excluído com sucesso!");
            setTodosClientes(prev => prev.filter(c => !(c.idCli === idCliente && c.idEndereco === idEndereco)));
            setResultadosBusca(prev => prev.filter(c => !(c.idCli === idCliente && c.idEndereco === idEndereco)));
        } catch (err: any) {
            console.error("Erro ao deletar cliente:", err);
            setError(err.message || "Falha ao excluir cliente.");
        } finally {
            // Lógica de loading aqui se necessário
        }
    };

    // Define placeholder dinâmico para o input de busca
    const getPlaceholder = (): string => {
        switch (tipoBusca) {
            case 'nome': return 'Digite parte do nome...';
            case 'id': return 'Digite o Código do Cliente (ID)...';
            case 'doc': return 'Digite parte do CPF ou CNPJ...';
            default: return 'Digite o termo de busca...';
        }
    }

    return (
        <>
            <NavBar active="clientes" />

            <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                <h1 className="text-3xl font-bold mb-6 text-center">Buscar Clientes</h1>

                {/* Formulário de Busca Modificado */}
                <form onSubmit={handleSearch} className="mb-8 p-6 bg-slate-800 rounded-lg shadow-lg flex flex-col md:flex-row gap-4 items-end">
                    {/* <<< Select para escolher o tipo de busca >>> */}
                    <div className="w-full md:w-auto">
                        <label htmlFor="tipoBusca" className="block text-sm font-medium mb-1 text-slate-300">Buscar por:</label>
                        <select
                            id="tipoBusca"
                            name="tipoBusca"
                            className="w-full p-2 rounded bg-slate-700 border border-slate-600 focus:outline-none focus:ring-2 focus:ring-sky-500"
                            value={tipoBusca}
                            onChange={(e) => {
                                setTipoBusca(e.target.value as TipoBusca);
                                setTermoBusca(''); // Limpa termo ao trocar tipo
                                setResultadosBusca([]); // Limpa resultados anteriores
                                setBuscaRealizada(false);
                            }}
                        >
                            <option value="nome">Nome</option>
                            <option value="id">Código Cliente</option>
                            <option value="doc">Documento (CPF/CNPJ)</option>
                        </select>
                    </div>

                    {/* <<< Input único para o termo de busca >>> */}
                    <div className="flex-1 min-w-0">
                        <label htmlFor="termoBusca" className="block text-sm font-medium mb-1 text-slate-300">Termo de Busca:</label>
                        <input
                            type={tipoBusca === 'id' ? 'number' : 'text'} // Muda para number se busca for por ID
                            id="termoBusca"
                            className="w-full p-2 rounded bg-slate-700 border border-slate-600 focus:outline-none focus:ring-2 focus:ring-sky-500"
                            value={termoBusca}
                            onChange={(e) => setTermoBusca(e.target.value)}
                            placeholder={getPlaceholder()} // Placeholder dinâmico
                            required // Torna o campo obrigatório para buscar
                        />
                    </div>

                    <button
                        type="submit"
                        className="px-5 py-2 bg-sky-600 hover:bg-sky-700 text-white font-semibold rounded-md shadow focus:outline-none focus:ring-2 focus:ring-sky-500 whitespace-nowrap"
                        disabled={isLoading || isSearching}
                    >
                        {isSearching ? 'Buscando...' : 'Buscar'}
                    </button>
                </form>

                {/* Exibição de Loading Inicial e Erro */}
                {isLoading && <p className="text-center text-sky-300 py-4">Carregando dados base...</p>}
                {error && <p className="text-center text-red-400 bg-red-900/50 p-3 rounded border border-red-500">{error}</p>}

                {/* Tabela de Resultados da Busca (lógica mantida) */}
                {!isLoading && !error && buscaRealizada && (
                    <div className="overflow-x-auto bg-slate-900 rounded-lg shadow mt-6">
                        <h2 className="text-xl font-semibold p-4 bg-slate-800 rounded-t-lg">Resultados da Busca</h2>
                        <table className="min-w-full table-auto">
                            {/* Cabeçalho da Tabela (thead) ... */}
                            <thead className="bg-slate-800 border-b border-slate-700">
                            <tr>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Nome Completo</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Documento</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Email</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Cidade/UF</th>
                                <th className="px-6 py-3 text-center text-xs font-medium text-slate-300 uppercase tracking-wider">Ações</th>
                            </tr>
                            </thead>
                            <tbody className="divide-y divide-slate-700">
                            {isSearching ? (
                                <tr><td colSpan={5} className="px-6 py-4 text-center text-slate-400">Buscando...</td></tr>
                            ) : resultadosBusca.length === 0 ? (
                                <tr><td colSpan={5} className="px-6 py-4 text-center text-slate-400">Nenhum cliente encontrado com os critérios informados.</td></tr>
                            ) : (
                                // Corpo da Tabela (tbody) com map e botões (igual anterior) ...
                                resultadosBusca.map((cliente) => (
                                    <tr key={`${cliente.idCli}-${cliente.idEndereco}`} className="hover:bg-slate-800/50">
                                        <td className="px-6 py-4 whitespace-nowrap">{cliente.nomeCompleto}</td>
                                        <td className="px-6 py-4 whitespace-nowrap">{cliente.documento}</td>
                                        <td className="px-6 py-4 whitespace-nowrap">{cliente.email}</td>
                                        <td className="px-6 py-4 whitespace-nowrap">{cliente.cidadeEstado}</td>
                                        <td className="px-6 py-4 whitespace-nowrap text-center space-x-2">
                                            {(cliente.idCli && cliente.idEndereco) ? (
                                                <Link href={`/clientes/alterar/${cliente.idCli}/${cliente.idEndereco}`}>
                                                    <button className="px-3 py-1 text-sm bg-yellow-500 hover:bg-yellow-600 text-black rounded">Alterar</button>
                                                </Link>
                                            ) : (
                                                <button className="px-3 py-1 text-sm bg-gray-500 text-black rounded cursor-not-allowed" disabled>Alterar</button>
                                            )}
                                            <button onClick={() => handleDelete(cliente.idCli, cliente.idEndereco)} className="px-3 py-1 text-sm bg-red-600 hover:bg-red-700 text-white rounded" disabled={isLoading || !cliente.idCli || !cliente.idEndereco}>
                                                Deletar
                                            </button>
                                        </td>
                                    </tr>
                                ))
                            )}
                            </tbody>
                        </table>
                    </div>
                )}
            </main>
        </>
    );
}


# --- src\app\clientes\cadastrar\page.tsx ---

// Adicione esta diretiva no topo para usar Hooks React
"use client";

import NavBar from "@/components/nav-bar"; // Garanta que este componente exista no seu projeto
// import Link from "next/link"; // Removido pois o botão Voltar será removido
import { useState, FormEvent } from "react"; // Importa useState e FormEvent
import { IMaskInput } from 'react-imask'; // Importa da biblioteca 'react-imask'

// Função auxiliar para limpar máscaras (remover não-dígitos)
const cleanMaskedValue = (value: string): string => {
    return value.replace(/\D/g, '');
};

export default function CadastrarPage() {
    // --- Estados Iniciais ---
    const initialState = {
        tipoCliente: "PF", nome: "", sobrenome: "", sexo: "M", tipoDocumento: "CPF",
        numeroDocumento: "", dataNascimento: "", atividadeProfissional: "",
        celular: "", email: "", contato: "", numeroCasa: "", cep: "",
        logradouro: "", bairro: "", cidade: "", estado: "", complemento: ""
    };

    // --- Variáveis de Estado para os Inputs do Formulário ---
    const [tipoCliente, setTipoCliente] = useState(initialState.tipoCliente);
    const [nome, setNome] = useState(initialState.nome);
    const [sobrenome, setSobrenome] = useState(initialState.sobrenome);
    const [sexo, setSexo] = useState(initialState.sexo);
    const [tipoDocumento, setTipoDocumento] = useState(initialState.tipoDocumento);
    const [numeroDocumento, setNumeroDocumento] = useState(initialState.numeroDocumento);
    const [dataNascimento, setDataNascimento] = useState(initialState.dataNascimento);
    const [atividadeProfissional, setAtividadeProfissional] = useState(initialState.atividadeProfissional);
    const [celular, setCelular] = useState(initialState.celular);
    const [email, setEmail] = useState(initialState.email);
    const [contato, setContato] = useState(initialState.contato);
    const [numeroCasa, setNumeroCasa] = useState(initialState.numeroCasa);
    const [cep, setCep] = useState(initialState.cep);
    const [logradouro, setLogradouro] = useState(initialState.logradouro);
    const [bairro, setBairro] = useState(initialState.bairro);
    const [cidade, setCidade] = useState(initialState.cidade);
    const [estado, setEstado] = useState(initialState.estado);
    const [complemento, setComplemento] = useState(initialState.complemento);

    // --- Estado para Feedback da API ---
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const [success, setSuccess] = useState<string | null>(null); // Mantido para a mensagem de texto

    // --- Função para Limpar o Formulário ---
    const resetForm = () => {
        setTipoCliente(initialState.tipoCliente);
        setNome(initialState.nome);
        setSobrenome(initialState.sobrenome);
        setSexo(initialState.sexo);
        setTipoDocumento(initialState.tipoDocumento);
        setNumeroDocumento(initialState.numeroDocumento);
        setDataNascimento(initialState.dataNascimento);
        setAtividadeProfissional(initialState.atividadeProfissional);
        setCelular(initialState.celular);
        setEmail(initialState.email);
        setContato(initialState.contato);
        setNumeroCasa(initialState.numeroCasa);
        setCep(initialState.cep);
        setLogradouro(initialState.logradouro);
        setBairro(initialState.bairro);
        setCidade(initialState.cidade);
        setEstado(initialState.estado);
        setComplemento(initialState.complemento);
        setError(null); // Limpa erros também
        // setSuccess(null); // <<< REMOVIDO daqui para a msg não sumir imediatamente
    };


    // --- Manipulador de Submissão do Formulário ---
    const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {
        event.preventDefault();
        setIsLoading(true);
        setError(null);
        setSuccess(null); // Limpa msg de sucesso anterior ao tentar novo envio

        const cleanedNumeroDocumento = cleanMaskedValue(numeroDocumento);
        const cleanedCelular = cleanMaskedValue(celular);
        const cleanedCep = cleanMaskedValue(cep);

        const clienteData = {
            tipoCliente, nome, sobrenome, sexo, tipoDocumento,
            numeroDocumento: cleanedNumeroDocumento, dataNascimento, atividadeProfissional,
            endereco: {
                numero: parseInt(numeroCasa, 10), cep: cleanedCep, logradouro, bairro,
                localidade: cidade, uf: estado, complemento,
            },
            contato: { celular: cleanedCelular, email, contato }
        };

        console.log('Enviando dados (limpos) para API:', JSON.stringify(clienteData, null, 2));
        const apiUrl = "http://localhost:8080/rest/clientes";

        try {
            const response = await fetch(apiUrl, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(clienteData),
            });

            if (!response.ok) {
                const errorData = await response.json().catch(() => ({ message: `Erro ${response.status}: ${response.statusText}. Resposta não contém JSON.` }));
                throw new Error(errorData.message || `Erro ${response.status}: ${response.statusText}`);
            }

            const result = await response.json();
            console.log("Success:", result);
            setSuccess("Cliente cadastrado com sucesso!"); // Define a mensagem
            resetForm(); // Limpa o formulário

            // Limpa a mensagem de sucesso após alguns segundos
            setTimeout(() => {
                setSuccess(null);
            }, 5000); // 5000 milissegundos = 5 segundos

        } catch (err: any) {
            console.error("API Error:", err);
            setError(err.message || "Falha ao conectar com a API ou processar a resposta.");
        } finally {
            setIsLoading(false);
        }
    };

    // --- Lógica de busca de CEP ---
    const handleCepChange = async (value: string) => {
        const maskedCep = value;
        const newCep = cleanMaskedValue(maskedCep);
        setCep(maskedCep);

        setLogradouro(''); setBairro(''); setCidade(''); setEstado('');

        if (newCep.length === 8) {
            setIsLoading(true);
            setError(null);
            try {
                const response = await fetch(`https://viacep.com.br/ws/${newCep}/json/`);
                if (!response.ok) throw new Error('CEP não encontrado ou falha na rede');
                const data = await response.json();
                if (data.erro) { throw new Error('CEP inválido retornado pela API'); }
                setLogradouro(data.logradouro || '');
                setBairro(data.bairro || '');
                setCidade(data.localidade || '');
                setEstado(data.uf || '');
            } catch (cepError: any) {
                console.error("CEP Error:", cepError);
                setError(`Erro ao buscar CEP: ${cepError.message}`);
            } finally {
                setIsLoading(false);
            }
        }
    };

    const cpfMask = "000.000.000-00";
    const cnpjMask = "00.000.000/0000-00";

    return (
        <>
            <NavBar active="cadastrar" />

            <main className="flex items-center justify-center min-h-screen bg-[#012A46] text-white px-4 py-10">
                <div className="bg-slate-900 p-6 md:p-8 m-4 rounded-lg shadow-xl w-full max-w-4xl">
                    <h2 className="text-2xl md:text-3xl font-bold mb-6 text-center">Cadastrar Cliente</h2>

                    <form onSubmit={handleSubmit}>

                        {/* Caixa de Mensagem de Erro (mantida) */}
                        {error && (
                            <div className="relative mb-4 text-red-400 bg-red-900/50 p-4 pr-10 rounded border border-red-500" role="alert">
                                <span className="block sm:inline">{error}</span>
                                <button type="button" className="absolute top-0 bottom-0 right-0 px-4 py-3 text-red-400 hover:text-red-200" onClick={() => setError(null)} aria-label="Fechar">
                                    <span className="text-2xl" aria-hidden="true">&times;</span>
                                </button>
                            </div>
                        )}

                        {/* Formulário ... */}
                        {/* Dados Pessoais */}
                        <fieldset className="mb-6 border border-slate-700 p-4 rounded">
                            <legend className="text-xl font-semibold mb-2 px-2">Dados Pessoais</legend>
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                {/* ... Inputs com IMaskInput onde aplicável ... */}
                                <div className="mb-4">
                                    <label htmlFor="tipo_cliente" className="block mb-1">Tipo de Cliente:</label>
                                    <select id="tipo_cliente" name="tipo_cliente" required className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500" value={tipoCliente} onChange={(e) => setTipoCliente(e.target.value)}>
                                        <option value="PF">Pessoa Física</option>
                                        <option value="PJ">Pessoa Jurídica</option>
                                    </select>
                                </div>
                                <div className="mb-4">
                                    <label htmlFor="nome" className="block mb-1">Nome:</label>
                                    <input type="text" id="nome" name="nome" required className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500" value={nome} onChange={(e) => setNome(e.target.value)} />
                                </div>
                                <div className="mb-4">
                                    <label htmlFor="sobrenome" className="block mb-1">Sobrenome:</label>
                                    <input type="text" id="sobrenome" name="sobrenome" required className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500" value={sobrenome} onChange={(e) => setSobrenome(e.target.value)} />
                                </div>
                                <div className="mb-4">
                                    <label htmlFor="sexo" className="block mb-1">Sexo:</label>
                                    <select id="sexo" name="sexo" required className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500" value={sexo} onChange={(e) => setSexo(e.target.value)}>
                                        <option value="M">Masculino</option>
                                        <option value="F">Feminino</option>
                                        <option value="O">Outro</option>
                                    </select>
                                </div>
                                <div className="mb-4">
                                    <label htmlFor="tipo_documento" className="block mb-1">Tipo de Documento:</label>
                                    <select id="tipo_documento" name="tipo_documento" required className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500" value={tipoDocumento} onChange={(e) => { setTipoDocumento(e.target.value); setNumeroDocumento(''); }}>
                                        <option value="CPF">CPF</option>
                                        <option value="CNPJ">CNPJ</option>
                                    </select>
                                </div>
                                <div className="mb-4">
                                    <label htmlFor="numero_documento" className="block mb-1">Número do Documento:</label>
                                    <IMaskInput mask={tipoDocumento === 'CPF' ? cpfMask : cnpjMask} value={numeroDocumento} unmask={false} onAccept={(value) => setNumeroDocumento(value)} id="numero_documento" name="numero_documento" placeholder={tipoDocumento === 'CPF' ? '000.000.000-00' : '00.000.000/0000-00'} required className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500" />
                                </div>
                                <div className="mb-4">
                                    <label htmlFor="data_nascimento" className="block mb-1">Data de Nascimento:</label>
                                    <input type="date" id="data_nascimento" name="data_nascimento" required className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500 date-input-fix" value={dataNascimento} onChange={(e) => setDataNascimento(e.target.value)} />
                                </div>
                                <div className="mb-4">
                                    <label htmlFor="atividade_profissional" className="block mb-1">Atividade Profissional:</label>
                                    <input type="text" id="atividade_profissional" name="atividade_profissional" required className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500" value={atividadeProfissional} onChange={(e) => setAtividadeProfissional(e.target.value)} />
                                </div>
                            </div>
                        </fieldset>

                        {/* Contatos */}
                        <fieldset className="mb-6 border border-slate-700 p-4 rounded">
                            <legend className="text-xl font-semibold mb-2 px-2">Contatos</legend>
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                <div className="mb-4">
                                    <label htmlFor="celular" className="block mb-1">Celular:</label>
                                    <IMaskInput mask="(00) 00000-0000" value={celular} unmask={false} onAccept={(value) => setCelular(value)} type="tel" id="celular" name="celular" placeholder="(99) 99999-9999" required className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500" />
                                </div>
                                <div className="mb-4">
                                    <label htmlFor="email" className="block mb-1">E-mail:</label>
                                    <input type="email" id="email" name="email" placeholder="exemplo@dominio.com" required className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500" value={email} onChange={(e) => setEmail(e.target.value)} />
                                </div>
                                <div className="mb-4 md:col-span-2">
                                    <label htmlFor="contato" className="block mb-1">Nome do Contato Principal:</label>
                                    <input type="text" id="contato" name="contato" required className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500" value={contato} onChange={(e) => setContato(e.target.value)} />
                                </div>
                            </div>
                        </fieldset>

                        {/* Endereço */}
                        <fieldset className="mb-6 border border-slate-700 p-4 rounded">
                            <legend className="text-xl font-semibold mb-2 px-2">Endereço</legend>
                            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                                <div className="mb-4 md:col-span-1">
                                    <label htmlFor="cep" className="block mb-1">CEP:</label>
                                    <IMaskInput mask="00000-000" value={cep} unmask={false} onAccept={handleCepChange} id="cep" name="cep" placeholder="00000-000" required className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500" />
                                </div>
                                <div className="mb-4 md:col-span-2">
                                    <label htmlFor="logradouro" className="block mb-1">Logradouro:</label>
                                    <input type="text" id="logradouro" name="logradouro" maxLength={100} required readOnly className="w-full p-2 rounded bg-slate-700 border border-slate-600 cursor-not-allowed" value={logradouro} onChange={(e) => setLogradouro(e.target.value)} />
                                </div>
                                <div className="mb-4">
                                    <label htmlFor="numeroCasa" className="block mb-1">Número:</label>
                                    <input type="text" id="numeroCasa" name="numeroCasa" maxLength={8} required className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500" value={numeroCasa} onChange={(e) => setNumeroCasa(e.target.value)} />
                                </div>
                                <div className="mb-4">
                                    <label htmlFor="complemento" className="block mb-1">Complemento:</label>
                                    <input type="text" id="complemento" name="complemento" maxLength={100} className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500" value={complemento} onChange={(e) => setComplemento(e.target.value)} />
                                </div>
                                <div className="mb-4">
                                    <label htmlFor="bairro" className="block mb-1">Bairro:</label>
                                    <input type="text" id="bairro" name="bairro" maxLength={100} required readOnly className="w-full p-2 rounded bg-slate-700 border border-slate-600 cursor-not-allowed" value={bairro} onChange={(e) => setBairro(e.target.value)} />
                                </div>
                                <div className="mb-4">
                                    <label htmlFor="cidade" className="block mb-1">Cidade:</label>
                                    <input type="text" id="cidade" name="cidade" maxLength={100} required readOnly className="w-full p-2 rounded bg-slate-700 border border-slate-600 cursor-not-allowed" value={cidade} onChange={(e) => setCidade(e.target.value)} />
                                </div>
                                <div className="mb-4">
                                    <label htmlFor="estado" className="block mb-1">Estado:</label>
                                    <input type="text" id="estado" name="estado" maxLength={2} required readOnly className="w-full p-2 rounded bg-slate-700 border border-slate-600 cursor-not-allowed" value={estado} onChange={(e) => setEstado(e.target.value)} />
                                </div>
                            </div>
                        </fieldset>

                        {/* <<< Mensagem de Sucesso Simples (acima do botão) >>> */}
                        {success && (
                            <p className="text-center text-green-400 mb-4">{success}</p>
                        )}

                        {/* Botões de Ação (Botão Voltar Removido) */}
                        <div className="flex items-center justify-center gap-4 mt-6"> {/* Ajustado para centralizar único botão */}
                            <button
                                type="submit"
                                className={`px-6 py-3 font-semibold text-white bg-sky-600 rounded-md shadow hover:bg-sky-700 focus:outline-none focus:ring-2 focus:ring-sky-500 focus:ring-offset-2 focus:ring-offset-slate-900 transition-opacity duration-300 ${isLoading ? 'opacity-50 cursor-not-allowed' : ''}`}
                                disabled={isLoading}
                            >
                                {isLoading ? 'Cadastrando...' : 'Cadastrar Cliente'}
                            </button>
                            {/* Link Voltar Removido */}
                        </div>
                    </form>
                </div>
            </main>

            {/* Estilos CSS Globais (mantidos) */}
            <style jsx global>{`
                .date-input-fix::-webkit-calendar-picker-indicator { filter: invert(0.8); }
                input[type="date"]:required:invalid::-webkit-datetime-edit { color: transparent; }
                input[type="date"]:focus::-webkit-datetime-edit { color: white !important; }
                input[type="date"]::-webkit-datetime-edit { color: white; }
            `}</style>
        </>
    );
}


# --- src\app\clientes\deletar\page.tsx ---

// app/clientes/listar/page.tsx
"use client";

import { useState, useEffect } from 'react';
import Link from 'next/link';
import NavBar from '@/components/nav-bar';

// Interfaces (ajuste conforme sua API)
interface ClienteParaLista {
    idCli: number; idEndereco: number; nomeCompleto: string;
    documento: string; email: string; cidadeEstado: string;
}
interface ClienteApiResponseDto {
    idCli: number; nome: string; sobrenome: string; tipoCliente: string; numeroDocumento: string;
    endereco: { codigo: number; cidade: string; estado: string; } | null;
    contato: { celular: string; email: string; } | null;
}

export default function ListarClientesPage() {
    const [clientes, setClientes] = useState<ClienteParaLista[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const [success, setSuccess] = useState<string | null>(null); // Estado para mensagem de sucesso/delete

    // --- Estados para o Modal de Deleção ---
    const [showDeleteModal, setShowDeleteModal] = useState(false);
    const [clienteParaDeletar, setClienteParaDeletar] = useState<ClienteParaLista | null>(null);
    const [isDeleting, setIsDeleting] = useState(false); // Loading específico para delete
    // -----------------------------------------

    const fetchClientes = async () => {
        setIsLoading(true); setError(null); setSuccess(null); // Limpa sucesso ao recarregar
        try {
            const response = await fetch("http://localhost:8080/rest/clientes/all"); // Endpoint GET all
            if (!response.ok) { throw new Error(`Erro HTTP ${response.status}: ${response.statusText}`); }
            const data: ClienteApiResponseDto[] = await response.json();
            const clientesFormatados: ClienteParaLista[] = data.map(dto => ({
                idCli: dto.idCli,
                idEndereco: dto.endereco?.codigo || 0, // Pega o ID do endereço
                nomeCompleto: `${dto.nome || ''} ${dto.sobrenome || ''}`.trim(),
                documento: dto.numeroDocumento || 'N/A',
                email: dto.contato?.email || 'N/A',
                cidadeEstado: dto.endereco ? `${dto.endereco.cidade || 'N/A'} - ${dto.endereco.estado || 'N/A'}` : 'N/A',
            }));
            setClientes(clientesFormatados);
        } catch (err: any) { setError(err.message || "Falha ao carregar dados.");
        } finally { setIsLoading(false); }
    };

    useEffect(() => { fetchClientes(); }, []);

    // --- Função para ABRIR o modal de confirmação ---
    const handleDeleteClick = (cliente: ClienteParaLista) => {
        setClienteParaDeletar(cliente); // Guarda o cliente a ser deletado
        setShowDeleteModal(true);      // Abre o modal
        setError(null);                // Limpa erros anteriores
        setSuccess(null);              // Limpa sucessos anteriores
    };

    // --- Função para CONFIRMAR a deleção (chamada pelo modal) ---
    const confirmDelete = async () => {
        if (!clienteParaDeletar) return;

        setIsDeleting(true); // Ativa loading do delete
        setError(null);
        setSuccess(null);

        const { idCli, idEndereco } = clienteParaDeletar;

        try {
            const response = await fetch(`http://localhost:8080/rest/clientes/${idCli}/${idEndereco}`, { method: 'DELETE' });
            if (!response.ok) {
                const errorText = await response.text().catch(() => `Erro ${response.status}`);
                throw new Error(`Falha ao deletar cliente: ${errorText || response.statusText}`);
            }

            // Sucesso! Define a mensagem e remove da lista local
            setSuccess("Cliente excluído com sucesso!"); // <<< Usa setSuccess
            setClientes(prev => prev.filter(c => !(c.idCli === idCli && c.idEndereco === idEndereco)));

            // Limpa a mensagem de sucesso após alguns segundos
            setTimeout(() => { setSuccess(null); }, 5000); // 5 segundos

        } catch (err: any) {
            console.error("Erro ao deletar cliente:", err);
            setError(err.message || "Falha ao excluir cliente.");
        } finally {
            setIsDeleting(false); // Desativa loading do delete
            setShowDeleteModal(false); // Fecha o modal
            setClienteParaDeletar(null); // Limpa cliente selecionado
        }
    };

    // --- Função para CANCELAR a deleção (chamada pelo modal) ---
    const cancelDelete = () => {
        setShowDeleteModal(false);
        setClienteParaDeletar(null);
    };

    return (
        <>
            <NavBar active="clientes" />
            <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                {/* Título e botão Cadastrar */}
                <div className="flex justify-between items-center mb-6">
                    <h1 className="text-3xl font-bold">Lista de Clientes</h1>
                    <Link href="/clientes/cadastrar">
                        <button className="px-4 py-2 bg-sky-600 hover:bg-sky-700 text-white font-semibold rounded-md shadow focus:outline-none focus:ring-2 focus:ring-sky-500">
                            Cadastrar Novo Cliente
                        </button>
                    </Link>
                </div>

                {/* Mensagens de Loading, Erro e Sucesso */}
                {isLoading && <p className="text-center text-sky-300 py-4">Carregando...</p>}
                {error && (
                    <div className="relative mb-4 text-red-400 bg-red-900/50 p-4 pr-10 rounded border border-red-500" role="alert">
                        <span className="block sm:inline">{error}</span>
                        <button type="button" className="absolute top-0 bottom-0 right-0 px-4 py-3 text-red-400 hover:text-red-200" onClick={() => setError(null)} aria-label="Fechar">
                            <span className="text-2xl" aria-hidden="true">&times;</span>
                        </button>
                    </div>
                )}
                {success && (
                    <div className="relative mb-4 text-green-400 bg-green-900/50 p-4 pr-10 rounded border border-green-500" role="alert">
                        <span className="block sm:inline">{success}</span>
                        <button type="button" className="absolute top-0 bottom-0 right-0 px-4 py-3 text-green-400 hover:text-green-200" onClick={() => setSuccess(null)} aria-label="Fechar">
                            <span className="text-2xl" aria-hidden="true">&times;</span>
                        </button>
                    </div>
                )}

                {/* Tabela de Clientes */}
                {!isLoading && ( // Remove !error daqui para mostrar tabela mesmo com erro de delete
                    <div className="overflow-x-auto bg-slate-900 rounded-lg shadow">
                        <table className="min-w-full table-auto">
                            <thead className="bg-slate-800 border-b border-slate-700">
                            <tr>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Nome Completo</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Documento</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Email</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Cidade/UF</th>
                                <th className="px-6 py-3 text-center text-xs font-medium text-slate-300 uppercase tracking-wider">Ações</th>
                            </tr>
                            </thead>
                            <tbody className="divide-y divide-slate-700">
                            {clientes.length === 0 ? (
                                <tr><td colSpan={5} className="px-6 py-4 text-center text-slate-400">Nenhum cliente cadastrado.</td></tr>
                            ) : (
                                clientes.map((cliente) => (
                                    <tr key={`${cliente.idCli}-${cliente.idEndereco}`} className="hover:bg-slate-800/50">
                                        <td className="px-6 py-4 whitespace-nowrap">{cliente.nomeCompleto}</td>
                                        <td className="px-6 py-4 whitespace-nowrap">{cliente.documento}</td>
                                        <td className="px-6 py-4 whitespace-nowrap">{cliente.email}</td>
                                        <td className="px-6 py-4 whitespace-nowrap">{cliente.cidadeEstado}</td>
                                        <td className="px-6 py-4 whitespace-nowrap text-center space-x-2">
                                            {/* Botão Editar */}
                                            {(cliente.idCli && cliente.idEndereco) ? ( <Link href={`/clientes/alterar/${cliente.idCli}/${cliente.idEndereco}`}><button className="px-3 py-1 text-sm bg-yellow-500 hover:bg-yellow-600 text-black rounded" disabled={isDeleting}>Editar</button></Link>
                                            ) : ( <button className="px-3 py-1 text-sm bg-gray-500 text-black rounded cursor-not-allowed" disabled>Editar</button> )}
                                            {/* Botão Deletar agora abre o modal */}
                                            <button
                                                onClick={() => handleDeleteClick(cliente)} // <<< Chama handleDeleteClick
                                                className="px-3 py-1 text-sm bg-red-600 hover:bg-red-700 text-white rounded"
                                                disabled={isDeleting || !cliente.idCli || !cliente.idEndereco}
                                            >
                                                Deletar
                                            </button>
                                        </td>
                                    </tr>
                                ))
                            )}
                            </tbody>
                        </table>
                    </div>
                )}
            </main>

            {/* --- Modal de Confirmação de Deleção --- */}
            {showDeleteModal && clienteParaDeletar && (
                <div className="fixed inset-0 bg-black bg-opacity-75 z-40 flex items-center justify-center p-4"> {/* Overlay */}
                    <div className="bg-slate-800 p-6 rounded-lg shadow-xl max-w-md w-full z-50 border border-red-500"> {/* Caixa do Modal */}
                        <h3 className="text-xl font-semibold text-red-400 mb-4">Confirmar Exclusão</h3>
                        <p className="text-white mb-3">Tem certeza que deseja excluir o cliente?</p>
                        {/* Mostra alguns dados do cliente para confirmação */}
                        <div className='text-slate-300 text-sm mb-6 border-l-2 border-red-500 pl-3'>
                            <p><strong>ID:</strong> {clienteParaDeletar.idCli} / End. ID: {clienteParaDeletar.idEndereco}</p>
                            <p><strong>Nome:</strong> {clienteParaDeletar.nomeCompleto}</p>
                            <p><strong>Documento:</strong> {clienteParaDeletar.documento}</p>
                        </div>
                        <div className="flex justify-end gap-4">
                            <button
                                type="button"
                                className="px-4 py-2 bg-slate-600 hover:bg-slate-700 text-white font-semibold rounded-md focus:outline-none focus:ring-2 focus:ring-slate-500 focus:ring-offset-2 focus:ring-offset-slate-800"
                                onClick={cancelDelete} // Chama a função de cancelar
                                disabled={isDeleting} // Desabilita enquanto deleta
                            >
                                Não, cancelar
                            </button>
                            <button
                                type="button"
                                className={`px-4 py-2 bg-red-600 hover:bg-red-700 text-white font-semibold rounded-md focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 focus:ring-offset-slate-800 ${isDeleting ? 'opacity-50 cursor-not-allowed' : ''}`}
                                onClick={confirmDelete} // Chama a função que realmente deleta
                                disabled={isDeleting} // Desabilita enquanto deleta
                            >
                                {isDeleting ? 'Excluindo...' : 'Sim, excluir'}
                            </button>
                        </div>
                    </div>
                </div>
            )}
        </>
    );
}


# --- src\app\clientes\listar\page.tsx ---

// app/clientes/page.tsx
"use client"; // Necessário para Hooks (useState, useEffect)

import { useState, useEffect } from 'react';
import Link from 'next/link';
import NavBar from '@/components/nav-bar'; // Importa sua NavBar

// --- Interfaces para Tipagem ---
// Interface para representar os dados do cliente como exibidos na lista
// Ajuste conforme os campos que você quer mostrar e que sua API retorna
interface ClienteParaLista {
    idCli: number;
    idEndereco: number; // Precisamos do ID do endereço para formar a chave composta para editar/deletar
    nomeCompleto: string;
    documento: string;
    email: string;
    cidadeEstado: string;
}

// Interface para tipar a resposta esperada da API (baseado no seu ClienteResponseDto)
// É uma boa prática ter isso, ajuste se seu DTO for diferente
interface ClienteApiResponseDto {
    idCli: number;
    nome: string;
    sobrenome: string;
    tipoCliente: string;
    numeroDocumento: string;
    endereco: {
        codigo: number; // ID do endereço
        cidade: string;
        estado: string;
        // outros campos de endereço se precisar
    } | null;
    contato: {
        celular: string;
        email: string;
        // outros campos de contato se precisar
    } | null;
    // outros campos do ClienteResponseDto
}
// -----------------------------

export default function ListarClientesPage() {
    const [clientes, setClientes] = useState<ClienteParaLista[]>([]); // Estado para a lista formatada
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);

    // --- Função para buscar e formatar os clientes ---
    const fetchClientes = async () => {
        setIsLoading(true);
        setError(null);
        try {
            const response = await fetch("http://localhost:8080/rest/clientes/all"); // Endpoint GET all
            if (!response.ok) {
                throw new Error(`Erro HTTP ${response.status}: ${response.statusText}`);
            }
            const data: ClienteApiResponseDto[] = await response.json(); // Tipando a resposta da API

            // Mapeia os dados da API para o formato que queremos exibir na tabela
            const clientesFormatados: ClienteParaLista[] = data.map(dto => ({
                idCli: dto.idCli,
                idEndereco: dto.endereco?.codigo || 0, // Pega o ID do endereço (ou 0 se for nulo)
                nomeCompleto: `${dto.nome || ''} ${dto.sobrenome || ''}`.trim(),
                documento: dto.numeroDocumento || 'N/A',
                email: dto.contato?.email || 'N/A', // Pega email do contato
                cidadeEstado: dto.endereco ? `${dto.endereco.cidade || 'N/A'} - ${dto.endereco.estado || 'N/A'}` : 'N/A',
            }));

            setClientes(clientesFormatados);

        } catch (err: any) {
            console.error("Erro ao buscar dados da API:", err);
            setError(err.message || "Falha ao carregar dados dos clientes.");
        } finally {
            setIsLoading(false);
        }
    };

    // --- useEffect para buscar dados na montagem ---
    useEffect(() => {
        fetchClientes();
    }, []); // Array vazio executa só uma vez

    // --- Função para deletar cliente ---
    const handleDelete = async (idCliente: number, idEndereco: number) => {
        if (!idCliente || !idEndereco) {
            setError("ID inválido para exclusão.");
            return;
        }
        if (!window.confirm(`Tem certeza que deseja excluir o cliente ID ${idCliente} (Endereço ID ${idEndereco})?`)) {
            return;
        }

        setIsLoading(true); // Pode usar um loading específico para delete
        setError(null);
        try {
            // Endpoint DELETE da sua API Java usando a chave composta
            const response = await fetch(`http://localhost:8080/rest/clientes/${idCliente}/${idEndereco}`, {
                method: 'DELETE',
            });

            if (!response.ok) {
                const errorText = await response.text().catch(() => `Erro ${response.status}`);
                throw new Error(`Falha ao deletar cliente: ${errorText}`);
            }

            // Se deletou com sucesso (status 204 No Content ou 200 OK)
            alert("Cliente excluído com sucesso!");
            // Remove o cliente da lista local para atualizar a UI imediatamente
            setClientes(prevClientes => prevClientes.filter(c => !(c.idCli === idCliente && c.idEndereco === idEndereco)));

        } catch (err: any) {
            console.error("Erro ao deletar cliente:", err);
            setError(err.message || "Falha ao excluir cliente.");
        } finally {
            setIsLoading(false);
        }
    };

    return (
        <>
            {/* Passa a prop 'active' correta para a NavBar */}
            <NavBar active="clientes" />

            <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                <div className="flex justify-between items-center mb-6">
                    <h1 className="text-3xl font-bold">Lista de Clientes</h1>
                    {/* Botão para ir para a página de cadastro */}
                    <Link href="/clientes/cadastrar">
                        <button className="px-4 py-2 bg-sky-600 hover:bg-sky-700 text-white font-semibold rounded-md shadow focus:outline-none focus:ring-2 focus:ring-sky-500">
                            Cadastrar Novo Cliente
                        </button>
                    </Link>
                </div>

                {/* Exibição de Loading e Erro */}
                {isLoading && <p className="text-center text-sky-300 py-4">Carregando clientes...</p>}
                {error && <p className="text-center text-red-400 bg-red-900/50 p-3 rounded border border-red-500">{error}</p>}

                {/* Tabela de Clientes */}
                {!isLoading && !error && (
                    <div className="overflow-x-auto bg-slate-900 rounded-lg shadow">
                        <table className="min-w-full table-auto">
                            <thead className="bg-slate-800 border-b border-slate-700">
                            <tr>
                                {/* Ajuste as colunas conforme necessário */}
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Nome Completo</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Documento</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Email</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Cidade/UF</th>
                                <th className="px-6 py-3 text-center text-xs font-medium text-slate-300 uppercase tracking-wider">Ações</th>
                            </tr>
                            </thead>
                            <tbody className="divide-y divide-slate-700">
                            {clientes.length === 0 ? (
                                <tr>
                                    <td colSpan={5} className="px-6 py-4 text-center text-slate-400">Nenhum cliente cadastrado.</td>
                                </tr>
                            ) : (
                                // Mapeia a lista de clientes formatados para linhas da tabela
                                clientes.map((cliente) => (
                                    <tr key={`${cliente.idCli}-${cliente.idEndereco}`} className="hover:bg-slate-800/50">
                                        <td className="px-6 py-4 whitespace-nowrap">{cliente.nomeCompleto}</td>
                                        <td className="px-6 py-4 whitespace-nowrap">{cliente.documento}</td>
                                        <td className="px-6 py-4 whitespace-nowrap">{cliente.email}</td>
                                        <td className="px-6 py-4 whitespace-nowrap">{cliente.cidadeEstado}</td>
                                        <td className="px-6 py-4 whitespace-nowrap text-center space-x-2">
                                            {/* Link para Edição (leva para a página que ainda será criada) */}
                                            <Link href={`/clientes/alterar/${cliente.idCli}/${cliente.idEndereco}`}>
                                                <button className="px-3 py-1 text-sm bg-yellow-500 hover:bg-yellow-600 text-black rounded">
                                                    Alterar
                                                </button>
                                            </Link>
                                            {/* Botão Deletar */}
                                            <button
                                                onClick={() => handleDelete(cliente.idCli, cliente.idEndereco)}
                                                className="px-3 py-1 text-sm bg-red-600 hover:bg-red-700 text-white rounded"
                                                disabled={isLoading} // Desabilita enquanto outra ação ocorre
                                            >
                                                Deletar
                                            </button>
                                        </td>
                                    </tr>
                                ))
                            )}
                            </tbody>
                        </table>
                    </div>
                )}
            </main>
        </>
    );
}


# --- src\app\inicio\page.tsx ---

import NavBar from "@/components/nav-bar";

export default function InicioPage() {
    return (
        <>
            <NavBar active="inicio" />

            {/* --- Modificações aqui --- */}
            <main
                className="flex items-center justify-center min-h-screen text-white bg-cover bg-center bg-no-repeat"
                // Define a imagem de fundo usando valor arbitrário do Tailwind
                // e define uma cor de fundo sólida como fallback caso a imagem não carregue
                style={{
                    backgroundImage: `url('/admin-ajax.png')`, // Caminho para a imagem na pasta public
                    backgroundColor: '#012A46', // Cor de fundo de fallback
                }}
            >
                {/* O conteúdo da seção agora fica sobre a imagem de fundo */}
                <section className="bg-black/50 backdrop-blur-sm max-w-2xl p-8 m-4 rounded-xl text-center"> {/* Ajustei o fundo da seção para melhor contraste */}
                    <h1 className="mb-4 text-4xl font-bold">Bem-vindo à Oficina Virtual</h1>
                    <p className="mb-8 text-lg">
                        Descubra uma nova forma de cuidar do seu veículo com praticidade e eficiência. Experimente nossa plataforma e agende seu serviço online.
                    </p>
                    {/* Você precisa adicionar o texto ou ícone do botão aqui */}
                    <button className="px-6 py-3 font-semibold text-white transition bg-[#075985] rounded-md shadow hover:bg-[#075985]/90">
                        Agendar Serviço {/* Exemplo de texto para o botão */}
                    </button>
                </section>
            </main>
            {/* --- Fim das Modificações --- */}
        </>
    );
}

# --- src\app\oficinaOnline\alterar\[id]\page.tsx ---

// app/oficinaOnline/alterar/[id]/page.tsx
"use client";

import { useState, useEffect, FormEvent } from 'react';
import { useParams, useRouter } from 'next/navigation'; // Hooks para params e navegação
import Link from 'next/link';
import NavBar from '@/components/nav-bar';
import { IMaskInput } from 'react-imask'; // Importado caso precise (ex: horas)

// Função auxiliar para limpar máscaras (se usar alguma)
const cleanMaskedValue = (value: string): string => {
    return value.replace(/\D/g, '');
};

// Interface para a resposta da API (igual à da listagem)
interface OficinaApiResponseDto {
    id: number;
    dataOficina: string;
    descricaoProblema: string;
    diagnostico: string;
    partesAfetadas: string;
    horasTrabalhadas: string;
}

export default function AlterarOficinaPage() {
    const params = useParams();
    const router = useRouter();

    // Pega o ID da URL (vem como string ou string[])
    const idParam = params?.id;
    const id = typeof idParam === 'string' ? parseInt(idParam, 10) : null;

    // --- Estados do Formulário (iniciam vazios) ---
    const [dataOficina, setDataOficina] = useState(""); // Será preenchido pelo fetch
    const [descricaoProblema, setDescricaoProblema] = useState("");
    const [diagnostico, setDiagnostico] = useState("");
    const [partesAfetadas, setPartesAfetadas] = useState("");
    const [horasTrabalhadas, setHorasTrabalhadas] = useState("");

    // --- Estados de Controle ---
    const [isLoading, setIsLoading] = useState(true); // Loading inicial dos dados
    const [isSaving, setIsSaving] = useState(false); // Loading para salvar
    const [error, setError] = useState<string | null>(null);
    const [success, setSuccess] = useState<string | null>(null);
    // Não precisamos do estado diagnosticoIa aqui, pois o diagnóstico já existe

    // --- useEffect para buscar dados da oficina ao carregar ---
    useEffect(() => {
        if (id) { // Só busca se o ID for válido
            setIsLoading(true); setError(null); setSuccess(null);

            const fetchOficinaData = async () => {
                try {
                    const apiUrl = `http://localhost:8080/rest/oficina/${id}`; // Endpoint GET por ID
                    const response = await fetch(apiUrl);

                    if (response.status === 404) { throw new Error("Registro de oficina não encontrado."); }
                    if (!response.ok) { throw new Error(`Erro ao buscar dados: ${response.statusText}`); }

                    const data: OficinaApiResponseDto = await response.json();

                    // Preenche os estados com os dados recebidos
                    setDataOficina(data.dataOficina ? data.dataOficina.split('T')[0] : '');
                    setDescricaoProblema(data.descricaoProblema || '');
                    setDiagnostico(data.diagnostico || '');
                    setPartesAfetadas(data.partesAfetadas || '');
                    setHorasTrabalhadas(data.horasTrabalhadas || '');

                } catch (err: any) { setError(err.message || "Falha ao carregar dados para edição.");
                } finally { setIsLoading(false); }
            };
            fetchOficinaData();
        } else {
            setError("ID do registro inválido na URL."); setIsLoading(false);
        }
    }, [id]); // Roda quando o ID muda (só na primeira vez, geralmente)

    // --- Manipulador para SALVAR as alterações ---
    const handleUpdate = async (event: FormEvent<HTMLFormElement>) => {
        event.preventDefault();
        if (!id) { setError("ID inválido para salvar."); return; }

        setIsSaving(true); setError(null); setSuccess(null);

        // Monta o objeto com os dados atuais do formulário
        const oficinaData = {
            dataOficina, descricaoProblema, diagnostico,
            partesAfetadas, horasTrabalhadas
        };

        // Endpoint PUT para atualização
        const apiUrl = `http://localhost:8080/rest/oficina/${id}`;

        try {
            const response = await fetch(apiUrl, {
                method: 'PUT', // <<< Método PUT
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(oficinaData),
            });

            if (!response.ok) {
                const errorData = await response.json().catch(() => ({ message: `Erro ${response.status}: ${response.statusText}.` }));
                throw new Error(errorData.message || `Erro ${response.status}`);
            }

            const result = await response.json();
            console.log("Update Success:", result);
            setSuccess("Registro de oficina atualizado com sucesso!"); // Mensagem de sucesso

            // Limpa a mensagem de sucesso após alguns segundos
            setTimeout(() => { setSuccess(null); }, 5000);

            // Não limpamos o formulário na edição

        } catch (err: any) { setError(err.message || "Falha ao salvar alterações.");
        } finally { setIsSaving(false); }
    };

    // --- Renderização ---
    if (isLoading) { /* ... código de loading ... */
        return (
            <>
                <NavBar active="oficinaOnline" />
                <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                    <p className="text-center text-sky-300 py-10">Carregando dados do registro...</p>
                </main>
            </>
        );
    }
    // Mostra erro fatal se não conseguiu carregar os dados iniciais
    if (error && !descricaoProblema) { // Verifica um campo que deveria ter sido carregado
        return (
            <>
                <NavBar active="oficinaOnline" />
                <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                    <div className="bg-slate-900 p-6 md:p-8 m-4 rounded-lg shadow-xl w-full max-w-4xl mx-auto">
                        <h2 className="text-2xl md:text-3xl font-bold mb-6 text-center text-red-400">Erro ao Carregar</h2>
                        <p className="text-center text-red-400 bg-red-900/50 p-3 rounded border border-red-500 mb-6">{error}</p>
                        <div className="text-center">
                            <Link href="/oficinaOnline"> {/* Link para a lista principal */}
                                <button className="px-6 py-3 font-semibold text-white bg-slate-600 rounded-md shadow hover:bg-slate-700">
                                    Voltar para Lista
                                </button>
                            </Link>
                        </div>
                    </div>
                </main>
            </>
        );
    }

    // Renderiza o formulário de edição
    return (
        <>
            <NavBar active="oficinaOnline" />

            <main className="flex items-center justify-center min-h-screen bg-[#012A46] text-white px-4 py-10">
                <div className="bg-slate-900 p-6 md:p-8 m-4 rounded-lg shadow-xl w-full max-w-2xl">
                    <h2 className="text-2xl md:text-3xl font-bold mb-6 text-center">
                        Alterar Registro de Oficina (ID: {id})
                    </h2>

                    {/* Formulário chama handleUpdate */}
                    <form onSubmit={handleUpdate}>

                        {/* Mensagem de Erro (para salvar ou buscar CEP) */}
                        {error && ( <div className="relative mb-4 text-red-400 bg-red-900/50 p-4 pr-10 rounded border border-red-500" role="alert"><span className="block sm:inline">{error}</span><button type="button" className="absolute top-0 bottom-0 right-0 px-4 py-3 text-red-400 hover:text-red-200" onClick={() => setError(null)} aria-label="Fechar"><span className="text-2xl" aria-hidden="true">&times;</span></button></div> )}
                        {/* Mensagem de sucesso será exibida acima dos botões */}

                        {/* Campos do Formulário - Reutiliza estrutura do cadastro */}
                        {/* Os values e onChanges estão ligados aos estados desta página */}
                        <div className="mb-4">
                            <label htmlFor="dataOficina" className="block mb-1">Data:</label>
                            <input type="date" id="dataOficina" name="dataOficina" required className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500 date-input-fix" value={dataOficina} onChange={(e) => setDataOficina(e.target.value)} />
                        </div>
                        <div className="mb-4">
                            <label htmlFor="descricaoProblema" className="block mb-1">Descrição do Problema (Cliente):</label>
                            <textarea id="descricaoProblema" name="descricaoProblema" rows={4} required className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500" value={descricaoProblema} onChange={(e) => setDescricaoProblema(e.target.value)} maxLength={500} />
                        </div>
                        {/* Não colocamos o botão de buscar IA aqui, pois o diagnóstico já existe */}
                        <div className="mb-4">
                            <label htmlFor="partesAfetadas" className="block mb-1">Partes Afetadas:</label>
                            <input type="text" id="partesAfetadas" name="partesAfetadas" required className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500" value={partesAfetadas} onChange={(e) => setPartesAfetadas(e.target.value)} maxLength={500} />
                        </div>
                        <div className="mb-4">
                            <label htmlFor="diagnostico" className="block mb-1">Diagnóstico:</label>
                            <textarea id="diagnostico" name="diagnostico" rows={4} required className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500" value={diagnostico} onChange={(e) => setDiagnostico(e.target.value)} maxLength={4000} />
                        </div>
                        <div className="mb-4">
                            <label htmlFor="horasTrabalhadas" className="block mb-1">Horas Trabalhadas (Texto):</label>
                            <input type="text" id="horasTrabalhadas" name="horasTrabalhadas" required className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500" value={horasTrabalhadas} onChange={(e) => setHorasTrabalhadas(e.target.value)} maxLength={5} placeholder="Ex: 2.5" />
                            <p className="text-xs text-slate-400 mt-1">Nota: Campo definido como texto no backend.</p>
                        </div>

                        {/* Mensagem de Sucesso Simples */}
                        {success && (
                            <p className="text-center text-green-400 mb-4">{success}</p>
                        )}

                        {/* Botões de Ação */}
                        <div className="flex flex-col sm:flex-row items-center justify-center gap-4 mt-6">
                            <button type="submit" className={`px-6 py-3 font-semibold text-white bg-green-600 rounded-md shadow hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 focus:ring-offset-slate-900 transition-opacity duration-300 ${isSaving ? 'opacity-50 cursor-not-allowed' : ''}`} disabled={isSaving || isLoading}>
                                {isSaving ? 'Salvando...' : 'Salvar Alterações'}
                            </button>
                            {/* Link para voltar para a lista principal da oficina */}
                            <Link href="/oficinaOnline" className="px-6 py-3 font-semibold text-white bg-slate-600 rounded-md shadow hover:bg-slate-700 text-center focus:outline-none focus:ring-2 focus:ring-slate-500 focus:ring-offset-2 focus:ring-offset-slate-900">
                                Voltar para Lista
                            </Link>
                        </div>
                    </form>
                </div>
            </main>

            {/* Estilos CSS Globais */}
            <style jsx global>{`
                .date-input-fix::-webkit-calendar-picker-indicator { filter: invert(0.8); }
                input[type="date"]:required:invalid::-webkit-datetime-edit { color: transparent; }
                input[type="date"]:focus::-webkit-datetime-edit { color: white !important; }
                input[type="date"]::-webkit-datetime-edit { color: white; }
            `}</style>
        </>
    );
}


# --- src\app\oficinaOnline\buscar\page.tsx ---

// app/oficinaOnline/buscar/page.tsx
"use client";

import { useState, useEffect, ChangeEvent, FormEvent } from 'react';
import Link from 'next/link';
import { useRouter } from 'next/navigation';
import NavBar from '@/components/nav-bar';

// --- Interfaces para Tipagem (Reutilizadas/Adaptadas da Listagem) ---
interface OficinaParaLista {
    id: number;
    dataOficina: string;
    descricaoProblema: string;
    diagnostico: string;
    horasTrabalhadas: string; // Pode ser útil mostrar
}

interface OficinaApiResponseDto {
    id: number;
    dataOficina: string;
    descricaoProblema: string;
    diagnostico: string;
    partesAfetadas: string;
    horasTrabalhadas: string;
}
// --------------------------------------------------------------------

// Define os tipos de busca possíveis para Oficina
type TipoBuscaOficina = 'id' | 'descricao' | 'diagnostico';

export default function BuscarOficinaPage() {
    const [todasOficinas, setTodasOficinas] = useState<OficinaParaLista[]>([]); // Guarda todos os registros
    const [resultadosBusca, setResultadosBusca] = useState<OficinaParaLista[]>([]); // Guarda os resultados filtrados
    const [tipoBusca, setTipoBusca] = useState<TipoBuscaOficina>('descricao'); // <<< Padrão: buscar por descrição
    const [termoBusca, setTermoBusca] = useState('');
    const [isLoading, setIsLoading] = useState(false); // Loading para fetch inicial
    const [isSearching, setIsSearching] = useState(false); // Loading para busca/filtro
    const [error, setError] = useState<string | null>(null);
    const [success, setSuccess] = useState<string | null>(null); // Para msg de delete
    const [buscaRealizada, setBuscaRealizada] = useState(false);

    // --- Estados para o Modal de Deleção ---
    const [showDeleteModal, setShowDeleteModal] = useState(false);
    const [oficinaParaDeletar, setOficinaParaDeletar] = useState<OficinaParaLista | null>(null);
    const [isDeleting, setIsDeleting] = useState(false);
    const [showDeleteSuccessModal, setShowDeleteSuccessModal] = useState(false);
    // -----------------------------------------

    const router = useRouter();

    // --- Função para buscar TODOS os registros da API (apenas uma vez) ---
    const fetchTodasOficinas = async () => {
        if (todasOficinas.length > 0) return;
        setIsLoading(true); setError(null); setSuccess(null);
        try {
            const response = await fetch("http://localhost:8080/rest/oficina/all");
            if (!response.ok) { throw new Error(`Erro HTTP ${response.status}: ${response.statusText}`); }
            const data: OficinaApiResponseDto[] = await response.json();
            const oficinasFormatadas: OficinaParaLista[] = data.map(dto => ({
                id: dto.id,
                dataOficina: dto.dataOficina ? new Date(dto.dataOficina + 'T00:00:00').toLocaleDateString('pt-BR') : 'N/A',
                descricaoProblema: dto.descricaoProblema || 'N/A',
                diagnostico: dto.diagnostico || 'Pendente',
                horasTrabalhadas: dto.horasTrabalhadas || 'N/A',
            }));
            setTodasOficinas(oficinasFormatadas);
        } catch (err: any) { setError(err.message || "Falha ao carregar dados base da oficina.");
        } finally { setIsLoading(false); }
    };

    useEffect(() => { fetchTodasOficinas(); }, []);

    // --- Função para realizar a busca/filtro (CLIENT-SIDE) ---
    const handleSearch = (event?: FormEvent<HTMLFormElement>) => {
        if (event) event.preventDefault();
        setIsSearching(true); setBuscaRealizada(true); setSuccess(null); setError(null);
        const query = termoBusca.trim().toLowerCase();
        if (!query) { setResultadosBusca([]); setIsSearching(false); return; }

        let resultados: OficinaParaLista[] = [];

        switch (tipoBusca) {
            case 'id':
                resultados = todasOficinas.filter(o => o.id.toString() === query.replace(/\D/g, ''));
                break;
            case 'descricao':
                resultados = todasOficinas.filter(o => o.descricaoProblema.toLowerCase().includes(query));
                break;
            case 'diagnostico':
                resultados = todasOficinas.filter(o => o.diagnostico.toLowerCase().includes(query));
                break;
            default:
                resultados = [];
        }
        setResultadosBusca(resultados);
        setIsSearching(false);
    };

    // --- Funções de Deleção com Modal (adaptadas para Oficina) ---
    const handleDeleteClick = (oficina: OficinaParaLista) => {
        setOficinaParaDeletar(oficina); setShowDeleteModal(true); setError(null); setSuccess(null); };

    const confirmDelete = async () => {
        if (!oficinaParaDeletar) return;
        setIsDeleting(true); setError(null); setSuccess(null);
        const { id } = oficinaParaDeletar;
        try {
            const response = await fetch(`http://localhost:8080/rest/oficina/${id}`, { method: 'DELETE' });
            if (!response.ok) {
                const errorText = await response.text().catch(() => `Erro ${response.status}`);
                throw new Error(`Falha ao deletar registro: ${errorText || response.statusText}`); }
            setShowDeleteModal(false); setShowDeleteSuccessModal(true);
            // Remove da lista completa E dos resultados da busca atual
            setTodasOficinas(prev => prev.filter(o => o.id !== id));
            setResultadosBusca(prev => prev.filter(o => o.id !== id));
        } catch (err: any) { setError(err.message || "Falha ao excluir registro."); setShowDeleteModal(false);
        } finally { setIsDeleting(false); }
    };

    const cancelDelete = () => { setShowDeleteModal(false); setOficinaParaDeletar(null); };
    const closeSuccessModal = () => { setShowDeleteSuccessModal(false); setOficinaParaDeletar(null); };
    // -------------------------------------------------------------

    // Define placeholder dinâmico
    const getPlaceholder = (): string => {
        switch (tipoBusca) {
            case 'id': return 'Digite o ID do Registro...';
            case 'descricao': return 'Digite parte da descrição do problema...';
            case 'diagnostico': return 'Digite parte do diagnóstico...';
            default: return 'Digite o termo de busca...';
        }
    }

    return (
        <>
            <NavBar active="oficinaOnline" /> {/* Define item ativo na NavBar */}

            <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                <h1 className="text-3xl font-bold mb-6 text-center">Buscar Registros da Oficina</h1>

                {/* Formulário de Busca */}
                <form onSubmit={handleSearch} className="mb-8 p-6 bg-slate-800 rounded-lg shadow-lg flex flex-col md:flex-row gap-4 items-end">
                    {/* Select para escolher o tipo de busca */}
                    <div className="w-full md:w-auto">
                        <label htmlFor="tipoBusca" className="block text-sm font-medium mb-1 text-slate-300">Buscar por:</label>
                        <select
                            id="tipoBusca"
                            name="tipoBusca"
                            className="w-full p-2 rounded bg-slate-700 border border-slate-600 focus:outline-none focus:ring-2 focus:ring-sky-500"
                            value={tipoBusca}
                            onChange={(e) => { setTipoBusca(e.target.value as TipoBuscaOficina); setTermoBusca(''); setResultadosBusca([]); setBuscaRealizada(false); }}
                        >
                            <option value="descricao">Descrição Problema</option>
                            <option value="id">ID Registro</option>
                            <option value="diagnostico">Diagnóstico</option>
                        </select>
                    </div>

                    {/* Input único para o termo de busca */}
                    <div className="flex-1 min-w-0">
                        <label htmlFor="termoBusca" className="block text-sm font-medium mb-1 text-slate-300">Termo de Busca:</label>
                        <input
                            type={tipoBusca === 'id' ? 'number' : 'text'}
                            id="termoBusca"
                            className="w-full p-2 rounded bg-slate-700 border border-slate-600 focus:outline-none focus:ring-2 focus:ring-sky-500"
                            value={termoBusca}
                            onChange={(e) => setTermoBusca(e.target.value)}
                            placeholder={getPlaceholder()}
                            required
                        />
                    </div>

                    <button type="submit" className="px-5 py-2 bg-sky-600 hover:bg-sky-700 text-white font-semibold rounded-md shadow focus:outline-none focus:ring-2 focus:ring-sky-500 whitespace-nowrap" disabled={isLoading || isSearching}>
                        {isSearching ? 'Buscando...' : 'Buscar'}
                    </button>
                </form>

                {/* Exibição de Loading Inicial e Erro/Sucesso (delete) */}
                {isLoading && <p className="text-center text-sky-300 py-4">Carregando dados base...</p>}
                {error && ( <div className="relative mb-4 text-red-400 bg-red-900/50 p-4 pr-10 rounded border border-red-500" role="alert"><span className="block sm:inline">{error}</span><button type="button" className="absolute top-0 bottom-0 right-0 px-4 py-3 text-red-400 hover:text-red-200" onClick={() => setError(null)} aria-label="Fechar"><span className="text-2xl" aria-hidden="true">&times;</span></button></div> )}
                {/* Mensagem de sucesso do delete será via modal */}

                {/* Tabela de Resultados da Busca */}
                {!isLoading && buscaRealizada && (
                    <div className="overflow-x-auto bg-slate-900 rounded-lg shadow mt-6">
                        <h2 className="text-xl font-semibold p-4 bg-slate-800 rounded-t-lg">Resultados da Busca</h2>
                        <table className="min-w-full table-auto">
                            <thead className="bg-slate-800 border-b border-slate-700">
                            <tr>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">ID</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Data</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Descrição Problema</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Diagnóstico</th>
                                <th className="px-6 py-3 text-center text-xs font-medium text-slate-300 uppercase tracking-wider">Ações</th>
                            </tr>
                            </thead>
                            <tbody className="divide-y divide-slate-700">
                            {isSearching ? (
                                <tr><td colSpan={5} className="px-6 py-4 text-center text-slate-400">Buscando...</td></tr>
                            ) : resultadosBusca.length === 0 ? (
                                <tr><td colSpan={5} className="px-6 py-4 text-center text-slate-400">Nenhum registro encontrado.</td></tr>
                            ) : (
                                resultadosBusca.map((oficina) => (
                                    <tr key={oficina.id} className="hover:bg-slate-800/50">
                                        <td className="px-6 py-4 whitespace-nowrap">{oficina.id}</td>
                                        <td className="px-6 py-4 whitespace-nowrap">{oficina.dataOficina}</td>
                                        <td className="px-6 py-4 whitespace-normal max-w-xs truncate" title={oficina.descricaoProblema}>{oficina.descricaoProblema}</td>
                                        <td className="px-6 py-4 whitespace-normal max-w-xs truncate" title={oficina.diagnostico}>{oficina.diagnostico}</td>
                                        <td className="px-6 py-4 whitespace-nowrap text-center space-x-2">
                                            {/* Link para Edição */}
                                            {oficina.id ? (
                                                <Link href={`/oficinaOnline/alterar/${oficina.id}`}>
                                                    <button className="px-3 py-1 text-sm bg-yellow-500 hover:bg-yellow-600 text-black rounded" disabled={isDeleting}>Alterar</button>
                                                </Link>
                                            ) : ( <button className="px-3 py-1 text-sm bg-gray-500 text-black rounded cursor-not-allowed" disabled>Editar</button> )}
                                            {/* Botão Deletar */}
                                            <button onClick={() => handleDeleteClick(oficina)} className="px-3 py-1 text-sm bg-red-600 hover:bg-red-700 text-white rounded" disabled={isDeleting || !oficina.id}>
                                                Deletar
                                            </button>
                                        </td>
                                    </tr>
                                ))
                            )}
                            </tbody>
                        </table>
                    </div>
                )}
            </main>

            {/* Modal de Confirmação de Deleção */}
            {showDeleteModal && oficinaParaDeletar && (
                <div className="fixed inset-0 bg-black bg-opacity-75 z-40 flex items-center justify-center p-4" onClick={cancelDelete}>
                    <div className="bg-slate-800 p-6 rounded-lg shadow-xl max-w-md w-full z-50 border border-red-500" onClick={(e) => e.stopPropagation()}>
                        <h3 className="text-xl font-semibold text-red-400 mb-4">Confirmar Exclusão</h3>
                        <p className="text-white mb-3">Tem certeza que deseja excluir este registro?</p>
                        <div className='text-slate-300 text-sm mb-6 border-l-2 border-red-500 pl-3'>
                            <p><strong>ID:</strong> {oficinaParaDeletar.id}</p>
                            <p><strong>Data:</strong> {oficinaParaDeletar.dataOficina}</p>
                            <p><strong>Problema:</strong> {oficinaParaDeletar.descricaoProblema}</p>
                        </div>
                        <div className="flex justify-end gap-4">
                            <button type="button" className="px-4 py-2 bg-slate-600 hover:bg-slate-700 text-white font-semibold rounded-md" onClick={cancelDelete} disabled={isDeleting}>
                                Não, cancelar
                            </button>
                            <button type="button" className={`px-4 py-2 bg-red-600 hover:bg-red-700 text-white font-semibold rounded-md ${isDeleting ? 'opacity-50 cursor-not-allowed' : ''}`} onClick={confirmDelete} disabled={isDeleting}>
                                {isDeleting ? 'Excluindo...' : 'Sim, excluir'}
                            </button>
                        </div>
                    </div>
                </div>
            )}

            {/* Modal de Sucesso da Deleção */}
            {showDeleteSuccessModal && (
                <div className="fixed inset-0 bg-black bg-opacity-60 z-40 flex items-center justify-center p-4" onClick={closeSuccessModal}>
                    <div className="bg-slate-800 p-6 rounded-lg shadow-xl max-w-sm w-full z-50 border border-green-500" onClick={(e) => e.stopPropagation()}>
                        <h3 className="text-xl font-semibold text-green-400 mb-4 text-center">Sucesso!</h3>
                        <p className="text-white mb-6 text-center">Registro de oficina excluído.</p>
                        <div className="flex justify-center">
                            <button type="button" className="px-4 py-2 bg-green-600 hover:bg-green-700 text-white font-semibold rounded-md" onClick={closeSuccessModal}>
                                OK
                            </button>
                        </div>
                    </div>
                </div>
            )}
        </>
    );
}


# --- src\app\oficinaOnline\cadastrar\page.tsx ---

// app/oficinaOnline/cadastrar/page.tsx
"use client";

import { useState, FormEvent } from 'react';
import Link from 'next/link';
import NavBar from '@/components/nav-bar';
import { IMaskInput } from 'react-imask';

// Função auxiliar para limpar máscaras (mantida, pode ser útil no futuro)
const cleanMaskedValue = (value: string): string => {
    return value.replace(/\D/g, '');
};

export default function CadastrarOficinaPage() {

    // Pega a data atual no formato YYYY-MM-DD
    const today = new Date().toISOString().split('T')[0];
    const initialState = {
        dataOficina: today, // <<< Data inicial é hoje
        descricaoProblema: "", diagnostico: "",
        partesAfetadas: "", horasTrabalhadas: ""
    };

    // Estados do Formulário
    const [dataOficina, setDataOficina] = useState(initialState.dataOficina); // <<< Estado da data
    const [descricaoProblema, setDescricaoProblema] = useState(initialState.descricaoProblema);
    const [diagnostico, setDiagnostico] = useState(initialState.diagnostico);
    const [partesAfetadas, setPartesAfetadas] = useState(initialState.partesAfetadas);
    const [horasTrabalhadas, setHorasTrabalhadas] = useState(initialState.horasTrabalhadas);

    // Estados de Controle
    const [isSaving, setIsSaving] = useState(false);
    const [isIaLoading, setIsIaLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const [success, setSuccess] = useState<string | null>(null);
    const [diagnosticoIa, setDiagnosticoIa] = useState<string | null>(null);

    // Função para Limpar o Formulário
    const resetForm = () => {
        setDataOficina(initialState.dataOficina); // <<< Reseta para data atual do carregamento
        setDescricaoProblema(initialState.descricaoProblema);
        setDiagnostico(initialState.diagnostico);
        setPartesAfetadas(initialState.partesAfetadas);
        setHorasTrabalhadas(initialState.horasTrabalhadas);
        setError(null);
        setDiagnosticoIa(null);
    };

    // Função para BUSCAR diagnóstico na IA (mantida)
    const handleBuscaIa = async () => {
        if (!descricaoProblema || descricaoProblema.trim() === '') {
            setError("Por favor, descreva o problema antes de buscar na IA."); return; }
        setIsIaLoading(true); setError(null); setDiagnosticoIa(null); setSuccess(null);
        try {
            const apiUrl = `/rest/ia/diagnostico?descricao=${encodeURIComponent(descricaoProblema)}`;
            const response = await fetch(apiUrl);
            if (!response.ok) {
                const errorText = await response.text().catch(() => `Erro ${response.status}`);
                throw new Error(`Falha ao buscar diagnóstico IA: ${errorText || response.statusText}`);
            }
            const diagnosticoGerado = await response.text();
            setDiagnosticoIa(diagnosticoGerado);
            setDiagnostico(diagnosticoGerado);
        } catch (err: any) {
            setError(err.message || "Falha ao comunicar com o serviço de IA.");
            setDiagnosticoIa("Falha ao obter diagnóstico.");
        } finally { setIsIaLoading(false); }
    };

    // Função para SALVAR o registro completo (mantida)
    const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {
        event.preventDefault();
        setIsSaving(true); setError(null); setSuccess(null);

        const oficinaData = { // <<< O estado dataOficina já tem o valor correto
            dataOficina, descricaoProblema, diagnostico,
            partesAfetadas, horasTrabalhadas
        };

        console.log('Salvando registro no BD:', JSON.stringify(oficinaData, null, 2));
        const apiUrl = "http://localhost:8080/rest/oficina";

        try {
            const response = await fetch(apiUrl, {
                method: 'POST', headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(oficinaData), });
            if (!response.ok) {
                const errorData = await response.json().catch(() => ({ message: `Erro ${response.status}: ${response.statusText}.` }));
                throw new Error(errorData.message || `Erro ${response.status}`); }
            const result = await response.json();
            console.log("Save Success:", result);
            setSuccess("Registro de oficina salvo com sucesso!");
            resetForm();
            setTimeout(() => { setSuccess(null); }, 5000);
        } catch (err: any) { setError(err.message || "Falha ao salvar registro de oficina.");
        } finally { setIsSaving(false); }
    };

    // Formata a data para exibição (DD/MM/YYYY)
    const formattedDate = new Date(dataOficina + 'T00:00:00').toLocaleDateString('pt-BR');

    return (
        <>
            <NavBar active="oficinaOnline" />

            <main className="flex items-center justify-center min-h-screen bg-[#012A46] text-white px-4 py-10">
                <div className="bg-slate-900 p-6 md:p-8 m-4 rounded-lg shadow-xl w-full max-w-2xl">
                    <h2 className="text-2xl md:text-3xl font-bold mb-6 text-center">Novo Registro de Oficina / Diagnóstico</h2>
                    <form onSubmit={handleSubmit}>
                        {/* Mensagens de Erro/Sucesso */}
                        {error && ( <div className="relative mb-4 text-red-400 bg-red-900/50 p-4 pr-10 rounded border border-red-500" role="alert"><span className="block sm:inline">{error}</span><button type="button" className="absolute top-0 bottom-0 right-0 px-4 py-3 text-red-400 hover:text-red-200" onClick={() => setError(null)} aria-label="Fechar"><span className="text-2xl" aria-hidden="true">&times;</span></button></div> )}
                        {/* Mensagem de sucesso será exibida acima dos botões */}

                        {/* Campos do Formulário */}
                        {/* === CAMPO DE DATA ALTERADO === */}
                        <div className="mb-4">
                            <label htmlFor="dataOficinaDisplay" className="block mb-1">Data do Registro:</label>
                            <p
                                id="dataOficinaDisplay"
                                className="w-full p-2 rounded bg-slate-700 border border-slate-600 text-slate-300" // Estilo para parecer "travado"
                            >
                                {formattedDate} {/* Exibe a data formatada */}
                            </p>
                            {/* O valor real vem do estado 'dataOficina' e é enviado no handleSubmit */}
                        </div>
                        {/* ============================== */}

                        <div className="mb-4">
                            <label htmlFor="descricaoProblema" className="block mb-1">Descrição do Problema (Cliente):</label>
                            <textarea id="descricaoProblema" name="descricaoProblema" rows={4} required className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500" value={descricaoProblema} onChange={(e) => setDescricaoProblema(e.target.value)} maxLength={500} />
                        </div>
                        <div className="mb-6 text-center">
                            <button type="button" onClick={handleBuscaIa} className={`px-5 py-2 font-semibold text-white bg-indigo-600 rounded-md shadow hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 focus:ring-offset-slate-900 transition-opacity duration-300 ${isIaLoading ? 'opacity-50 cursor-not-allowed' : ''}`} disabled={isIaLoading || !descricaoProblema}>
                                {isIaLoading ? 'Buscando na IA...' : 'Buscar Diagnóstico na IA'}
                            </button>
                        </div>
                        {diagnosticoIa !== null && (
                            <div className="mb-4 p-4 bg-slate-800 border border-slate-700 rounded">
                                <label className="block mb-2 font-semibold text-sky-300">Resultado da IA:</label>
                                <pre className="text-sm whitespace-pre-wrap break-words">{diagnosticoIa}</pre>
                            </div>
                        )}

                        <div className="mb-4">
                            <label htmlFor="diagnostico" className="block mb-1">Diagnóstico Final (Editável):</label>
                            <textarea id="diagnostico" name="diagnostico" rows={4} required className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500" value={diagnostico} onChange={(e) => setDiagnostico(e.target.value)} maxLength={4000} />
                        </div>
                        <div className="mb-4">
                            <label htmlFor="partesAfetadas" className="block mb-1">Partes Afetadas (Sugestão/Manual):</label>
                            <input type="text" id="partesAfetadas" name="partesAfetadas" required className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500" value={partesAfetadas} onChange={(e) => setPartesAfetadas(e.target.value)} maxLength={500} />
                        </div>
                        <div className="mb-4">
                            <label htmlFor="horasTrabalhadas" className="block mb-1">Tempo para gasto para solução: (Texto):</label>
                            <input type="text" id="horasTrabalhadas" name="horasTrabalhadas" required className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500" value={horasTrabalhadas} onChange={(e) => setHorasTrabalhadas(e.target.value)} maxLength={5} placeholder="Ex: 2.5" />
                            <p className="text-xs text-slate-400 mt-1">Nota: Campo definido como texto no backend.</p>
                        </div>

                        {/* Mensagem de Sucesso Simples */}
                        {success && (
                            <p className="text-center text-green-400 mb-4">{success}</p>
                        )}

                        {/* Botão de Ação Único (Salvar) */}
                        <div className="flex items-center justify-center gap-4 mt-6">
                            <button type="submit" className={`px-6 py-3 font-semibold text-white bg-sky-600 rounded-md shadow hover:bg-sky-700 focus:outline-none focus:ring-2 focus:ring-sky-500 focus:ring-offset-2 focus:ring-offset-slate-900 transition-opacity duration-300 ${isSaving ? 'opacity-50 cursor-not-allowed' : ''}`} disabled={isSaving || isIaLoading}>
                                {isSaving ? 'Salvando...' : 'Salvar Registro'}
                            </button>
                            {/* Botão Voltar Removido */}
                        </div>
                    </form>
                </div>
            </main>

            {/* Estilos CSS Globais */}
            <style jsx global>{`
                .date-input-fix::-webkit-calendar-picker-indicator { filter: invert(0.8); }
                input[type="date"]:required:invalid::-webkit-datetime-edit { color: transparent; }
                input[type="date"]:focus::-webkit-datetime-edit { color: white !important; }
                input[type="date"]::-webkit-datetime-edit { color: white; }
            `}</style>
        </>
    );
}


# --- src\app\oficinaOnline\deletar\page.tsx ---

// app/oficinaOnline/page.tsx OU app/oficinaOnline/listar/page.tsx
"use client";

import { useState, useEffect } from 'react';
import Link from 'next/link';
import { useRouter } from 'next/navigation'; // Para navegação programática se necessário
import NavBar from '@/components/nav-bar'; // Importa sua NavBar

// --- Interfaces para Tipagem (Ajuste conforme sua API) ---
interface OficinaParaLista {
    id: number;
    dataOficina: string;
    descricaoProblema: string;
    diagnostico: string;
    horasTrabalhadas: string;
}
interface OficinaApiResponseDto {
    id: number; dataOficina: string; descricaoProblema: string;
    diagnostico: string; partesAfetadas: string; horasTrabalhadas: string;
}
// ---------------------------------------------------------

export default function ListarOficinaPage() {
    const [oficinas, setOficinas] = useState<OficinaParaLista[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);

    // --- Estados para o Modal de Deleção --- // <<< INÍCIO LÓGICA DELETE
    const [showDeleteConfirmModal, setShowDeleteConfirmModal] = useState(false);
    const [showDeleteSuccessModal, setShowDeleteSuccessModal] = useState(false);
    const [oficinaParaDeletar, setOficinaParaDeletar] = useState<OficinaParaLista | null>(null);
    const [isDeleting, setIsDeleting] = useState(false);
    // ----------------------------------------- // <<< FIM LÓGICA DELETE

    const router = useRouter();

    // --- Função para buscar e formatar os registros de oficina ---
    const fetchOficinas = async () => {
        setIsLoading(true); setError(null);
        // Limpa modais ao recarregar
        setShowDeleteConfirmModal(false); setShowDeleteSuccessModal(false); setOficinaParaDeletar(null);
        try {
            const response = await fetch("http://localhost:8080/rest/oficina/all");
            if (!response.ok) { throw new Error(`Erro HTTP ${response.status}: ${response.statusText}`); }
            const data: OficinaApiResponseDto[] = await response.json();
            const oficinasFormatadas: OficinaParaLista[] = data.map(dto => ({
                id: dto.id,
                dataOficina: dto.dataOficina ? new Date(dto.dataOficina + 'T00:00:00').toLocaleDateString('pt-BR') : 'N/A',
                descricaoProblema: dto.descricaoProblema || 'N/A',
                diagnostico: dto.diagnostico || 'Pendente',
                horasTrabalhadas: dto.horasTrabalhadas || 'N/A',
            }));
            setOficinas(oficinasFormatadas);
        } catch (err: any) { setError(err.message || "Falha ao carregar dados da oficina.");
        } finally { setIsLoading(false); }
    };

    useEffect(() => { fetchOficinas(); }, []);

    // --- Funções para o fluxo de deleção com modal --- // <<< INÍCIO LÓGICA DELETE
    const handleDeleteClick = (oficina: OficinaParaLista) => {
        setOficinaParaDeletar(oficina);
        setShowDeleteConfirmModal(true);
        setError(null);
    };

    const confirmDelete = async () => {
        if (!oficinaParaDeletar) return;
        setIsDeleting(true); setError(null);
        const { id } = oficinaParaDeletar;
        try {
            const response = await fetch(`http://localhost:8080/rest/oficina/${id}`, { method: 'DELETE' });
            if (!response.ok) {
                const errorText = await response.text().catch(() => `Erro ${response.status}`);
                throw new Error(`Falha ao deletar registro: ${errorText || response.statusText}`);
            }
            setShowDeleteConfirmModal(false);
            setShowDeleteSuccessModal(true); // Mostra modal de sucesso
            setOficinas(prev => prev.filter(o => o.id !== id)); // Remove da lista local
        } catch (err: any) {
            setError(err.message || "Falha ao excluir registro.");
            setShowDeleteConfirmModal(false);
        } finally {
            setIsDeleting(false);
            // Não limpa oficinaParaDeletar aqui para usar no modal de sucesso se precisar
        }
    };

    const cancelDelete = () => {
        setShowDeleteConfirmModal(false);
        setOficinaParaDeletar(null);
    };

    const closeSuccessModal = () => {
        setShowDeleteSuccessModal(false);
        setOficinaParaDeletar(null);
        // Poderia adicionar navegação aqui se quisesse: router.push('/algum-lugar');
    };
    // ---------------------------------------------------- // <<< FIM LÓGICA DELETE

    return (
        <>
            <NavBar active="oficinaOnline" />
            <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white">
                {/* Título e botão Cadastrar */}
                <div className="flex justify-between items-center mb-6">
                    <h1 className="text-3xl font-bold">Registros da Oficina Online</h1>
                    <Link href="/oficinaOnline/cadastrar">
                        <button className="px-4 py-2 bg-sky-600 hover:bg-sky-700 text-white font-semibold rounded-md shadow focus:outline-none focus:ring-2 focus:ring-sky-500">
                            Novo Diagnóstico
                        </button>
                    </Link>
                </div>

                {/* Mensagens */}
                {isLoading && <p className="text-center text-sky-300 py-4">Carregando...</p>}
                {error && ( <div className="relative mb-4 text-red-400 bg-red-900/50 p-4 pr-10 rounded border border-red-500" role="alert"><span className="block sm:inline">{error}</span><button type="button" className="absolute top-0 bottom-0 right-0 px-4 py-3 text-red-400 hover:text-red-200" onClick={() => setError(null)} aria-label="Fechar"><span className="text-2xl" aria-hidden="true">&times;</span></button></div> )}
                {/* A mensagem de sucesso agora é o modal */}

                {/* Tabela de Registros */}
                {!isLoading && (
                    <div className="overflow-x-auto bg-slate-900 rounded-lg shadow">
                        <table className="min-w-full table-auto">
                            <thead className="bg-slate-800 border-b border-slate-700">
                            <tr>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">ID</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Data</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Descrição Problema</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Diagnóstico</th>
                                <th className="px-6 py-3 text-center text-xs font-medium text-slate-300 uppercase tracking-wider">Ações</th>
                            </tr>
                            </thead>
                            <tbody className="divide-y divide-slate-700">
                            {oficinas.length === 0 && !isLoading ? (
                                <tr><td colSpan={5} className="px-6 py-4 text-center text-slate-400">Nenhum registro encontrado.</td></tr>
                            ) : (
                                oficinas.map((oficina) => (
                                    <tr key={oficina.id} className="hover:bg-slate-800/50">
                                        <td className="px-6 py-4 whitespace-nowrap">{oficina.id}</td>
                                        <td className="px-6 py-4 whitespace-nowrap">{oficina.dataOficina}</td>
                                        <td className="px-6 py-4 whitespace-normal max-w-xs truncate" title={oficina.descricaoProblema}>{oficina.descricaoProblema}</td>
                                        <td className="px-6 py-4 whitespace-normal max-w-xs truncate" title={oficina.diagnostico}>{oficina.diagnostico}</td>
                                        <td className="px-6 py-4 whitespace-nowrap text-center space-x-2">
                                            {/* Link para Edição */}
                                            {(oficina.id) ? ( <Link href={`/oficinaOnline/alterar/${oficina.id}`}><button className="px-3 py-1 text-sm bg-yellow-500 hover:bg-yellow-600 text-black rounded" disabled={isDeleting}>Editar</button></Link>
                                            ) : ( <button className="px-3 py-1 text-sm bg-gray-500 text-black rounded cursor-not-allowed" disabled>Editar</button> )}

                                            {/* Botão Deletar */} // <<< INÍCIO LÓGICA DELETE
                                            <button
                                            onClick={() => handleDeleteClick(oficina)} // Chama função para abrir modal
                                            className="px-3 py-1 text-sm bg-red-600 hover:bg-red-700 text-white rounded"
                                            disabled={isDeleting || !oficina.id}
                                            >
                                            Deletar
                                        </button>
                                        {/* <<< FIM LÓGICA DELETE */}
                                    </td>
                                </tr>
                                ))
                                )}
                            </tbody>
                        </table>
                    </div>
                    )}
            </main>

            {/* --- Modal de Confirmação de Deleção --- */} // <<< INÍCIO LÓGICA DELETE
            {showDeleteConfirmModal && oficinaParaDeletar && (
            <div className="fixed inset-0 bg-black bg-opacity-75 z-40 flex items-center justify-center p-4" onClick={cancelDelete}>
                <div className="bg-slate-800 p-6 rounded-lg shadow-xl max-w-md w-full z-50 border border-red-500" onClick={(e) => e.stopPropagation()}>
                    <h3 className="text-xl font-semibold text-red-400 mb-4">Confirmar Exclusão</h3>
                    <p className="text-white mb-3">Tem certeza que deseja excluir este registro?</p>
                    <div className='text-slate-300 text-sm mb-6 border-l-2 border-red-500 pl-3'>
                        <p><strong>ID:</strong> {oficinaParaDeletar.id}</p>
                        <p><strong>Data:</strong> {oficinaParaDeletar.dataOficina}</p>
                        <p><strong>Problema:</strong> {oficinaParaDeletar.descricaoProblema}</p>
                    </div>
                    <div className="flex justify-end gap-4">
                        <button type="button" className="px-4 py-2 bg-slate-600 hover:bg-slate-700 text-white font-semibold rounded-md" onClick={cancelDelete} disabled={isDeleting}>
                            Não, cancelar
                        </button>
                        <button type="button" className={`px-4 py-2 bg-red-600 hover:bg-red-700 text-white font-semibold rounded-md ${isDeleting ? 'opacity-50 cursor-not-allowed' : ''}`} onClick={confirmDelete} disabled={isDeleting}>
                            {isDeleting ? 'Excluindo...' : 'Sim, excluir'}
                        </button>
                    </div>
                </div>
            </div>
            )}

            {/* --- Modal de Sucesso da Deleção --- */}
            {showDeleteSuccessModal && (
            <div className="fixed inset-0 bg-black bg-opacity-60 z-40 flex items-center justify-center p-4" onClick={closeSuccessModal}>
                <div className="bg-slate-800 p-6 rounded-lg shadow-xl max-w-sm w-full z-50 border border-green-500" onClick={(e) => e.stopPropagation()}>
                    <h3 className="text-xl font-semibold text-green-400 mb-4 text-center">Sucesso!</h3>
                    <p className="text-white mb-6 text-center">Registro de oficina excluído.</p>
                    <div className="flex justify-center">
                        <button type="button" className="px-4 py-2 bg-green-600 hover:bg-green-700 text-white font-semibold rounded-md" onClick={closeSuccessModal}>
                            OK
                        </button>
                    </div>
                </div>
            </div>
            )}
            {/* <<< FIM LÓGICA DELETE */}
        </>
    );
}


# --- src\app\oficinaOnline\listar\page.tsx ---

// src/components/nav-bar.tsx (ou o caminho correto no seu projeto)
"use client"; // Necessário para useState

import Link from 'next/link';
import { useState } from 'react'; // Importa useState

// Interface atualizada
interface NabvBarProps {
    active: "inicio" | "clientes" | "cadastrar" | "oficinaOnline" | "agendamento" | "relatorio" | "pagamento"
}

export default function NavBar(props: NabvBarProps) {
    const { active } = props;
    const baseItemClass = "border-b-4 pb-1"; // Classe base da borda e padding
    const activeClass = `${baseItemClass} border-white`; // Borda branca para ativo/hover
    const inactiveClass = `${baseItemClass} border-transparent`; // Borda transparente para inativo

    // Estados para controlar dropdowns
    const [isClientesMenuOpen, setIsClientesMenuOpen] = useState(false);
    const [isOficinaMenuOpen, setIsOficinaMenuOpen] = useState(false);
    const [isAgendamentoMenuOpen, setIsAgendamentoMenuOpen] = useState(false);

    // Verifica se a seção ativa
    const isClientesActive = active === "clientes";
    const isOficinaActive = active === "oficinaOnline";
    const isAgendamentoActive = active === "agendamento";

    return (
        <nav className="flex justify-between items-center p-4 md:p-6 bg-[#075985] text-white">
            <Link href="/inicio">
                <h1 className="text-xl md:text-2xl font-bold cursor-pointer">Oficina On-line</h1>
            </Link>
            <ul className="flex flex-wrap gap-3 md:gap-4 text-sm md:text-base">

                {/* --- Item Início --- */}
                <li className={active === "inicio" ? activeClass : inactiveClass}>
                    <Link href="/inicio" className="hover:text-sky-200 transition-colors cursor-pointer">Início</Link>
                </li>

                {/* --- Item Clientes (Dropdown) --- */}
                <li
                    className={`relative`}
                    onMouseEnter={() => setIsClientesMenuOpen(true)}
                    onMouseLeave={() => setIsClientesMenuOpen(false)}
                >
                    <span className={`hover:text-sky-200 transition-colors cursor-default px-1 ${ (isClientesActive || isClientesMenuOpen) ? activeClass : inactiveClass }`}>
                        Clientes
                    </span>
                    {isClientesMenuOpen && (
                        <ul className="absolute left-0 mt-2 w-48 bg-slate-700 rounded-md shadow-lg py-1 z-50">
                            <li><Link href="/clientes/listar" className="block px-4 py-2 text-sm text-white hover:bg-sky-600 transition-colors cursor-pointer" onClick={() => setIsClientesMenuOpen(false)}>Listar Clientes</Link></li>
                            <li><Link href="/clientes/cadastrar" className="block px-4 py-2 text-sm text-white hover:bg-sky-600 transition-colors cursor-pointer" onClick={() => setIsClientesMenuOpen(false)}>Cadastrar Cliente</Link></li>
                            <li><Link href="/clientes/buscar" className="block px-4 py-2 text-sm text-white hover:bg-sky-600 transition-colors cursor-pointer" onClick={() => setIsClientesMenuOpen(false)}>Buscar Cliente</Link></li>
                        </ul>
                    )}
                </li>

                {/* --- Item Oficina Online (Dropdown) --- */}
                <li
                    className={`relative`}
                    onMouseEnter={() => setIsOficinaMenuOpen(true)}
                    onMouseLeave={() => setIsOficinaMenuOpen(false)}
                >
                    <span className={`hover:text-sky-200 transition-colors cursor-default px-1 ${ (isOficinaActive || isOficinaMenuOpen) ? activeClass : inactiveClass }`}>
                        Oficina On-line
                    </span>
                    {isOficinaMenuOpen && (
                        <ul className="absolute left-0 mt-2 w-48 bg-slate-700 rounded-md shadow-lg py-1 z-50">
                            {/* <<< CORREÇÃO AQUI >>> O href foi alterado de "/oficinaOnline" para "/oficinaOnline/listar" */}
                            <li><Link href="/oficinaOnline/listar" className="block px-4 py-2 text-sm text-white hover:bg-sky-600 transition-colors cursor-pointer" onClick={() => setIsOficinaMenuOpen(false)}>Listar Registros</Link></li>
                            <li><Link href="/oficinaOnline/cadastrar" className="block px-4 py-2 text-sm text-white hover:bg-sky-600 transition-colors cursor-pointer" onClick={() => setIsOficinaMenuOpen(false)}>Novo Diagnóstico</Link></li>
                            <li><Link href="/oficinaOnline/buscar" className="block px-4 py-2 text-sm text-white hover:bg-sky-600 transition-colors cursor-pointer" onClick={() => setIsOficinaMenuOpen(false)}>Buscar Registro</Link></li>
                        </ul>
                    )}
                </li>

                {/* --- Item Agendamento (Dropdown) --- */}
                <li
                    className={`relative`}
                    onMouseEnter={() => setIsAgendamentoMenuOpen(true)}
                    onMouseLeave={() => setIsAgendamentoMenuOpen(false)}
                >
                    <span className={`hover:text-sky-200 transition-colors cursor-default px-1 ${ (isAgendamentoActive || isAgendamentoMenuOpen) ? activeClass : inactiveClass }`}>
                        Agendamento
                    </span>
                    {isAgendamentoMenuOpen && (
                        <ul className="absolute left-0 mt-2 w-52 bg-slate-700 rounded-md shadow-lg py-1 z-50">
                            <li><Link href="/agendamento/listar" className="block px-4 py-2 text-sm text-white hover:bg-sky-600 transition-colors cursor-pointer" onClick={() => setIsAgendamentoMenuOpen(false)}>Listar Agendamentos</Link></li>
                            <li><Link href="/agendamento/cadastrar" className="block px-4 py-2 text-sm text-white hover:bg-sky-600 transition-colors cursor-pointer" onClick={() => setIsAgendamentoMenuOpen(false)}>Novo Agendamento</Link></li>
                            <li><Link href="/agendamento/buscar" className="block px-4 py-2 text-sm text-white hover:bg-sky-600 transition-colors cursor-pointer" onClick={() => setIsAgendamentoMenuOpen(false)}>Buscar Agendamento</Link></li>
                        </ul>
                    )}
                </li>

                {/* --- Outros Itens --- */}
                <li className={active === "relatorio" ? activeClass : inactiveClass}>
                    <Link href="/relatorio" className="hover:text-sky-200 transition-colors cursor-pointer">Relatório</Link>
                </li>
                <li className={active === "pagamento" ? activeClass : inactiveClass}>
                    <Link href="/pagamento" className="hover:text-sky-200 transition-colors cursor-pointer">Pagamento</Link>
                </li>
            </ul>
            <img className="size-10 md:size-12 rounded-full" src="https://avatars.githubusercontent.com/u/4350623?v=4" alt="Avatar do usuário"/>
        </nav>
    )
}

# --- src\app\pagamento\page.tsx ---

import NavBar from "@/components/nav-bar";

export default function PagamentoPage(){
    return(
        <>
            <NavBar active="pagamento"/>

            <main className="Flex justify-center">
                <div className="bg-slate-900 p-6 m-6 rounded min-w-1/3">
                    <h2>Pagamento</h2>
                </div>
            </main>
        </>

    )
}

# --- src\app\relatorio\page.tsx ---

import NavBar from "@/components/nav-bar";

export default function RelatorioPage(){
    return(
        <>
            <NavBar active="relatorio"/>

            <main className="Flex justify-center">
                <div className="bg-slate-900 p-6 m-6 rounded min-w-1/3">
                    <h2>Relatório</h2>
                </div>
            </main>
        </>

    )
}

# --- src\components\nav-bar.tsx ---

"use client"; // Necessário para useState

import Link from 'next/link';
import { useState } from 'react'; // Importa useState

// Interface atualizada
interface NabvBarProps {
    active: "inicio" | "clientes" | "cadastrar" | "oficinaOnline" | "agendamento" | "relatorio" | "pagamento"
}

export default function NavBar(props: NabvBarProps) {
    const { active } = props;
    const baseItemClass = "border-b-4 pb-1"; // Classe base da borda e padding
    const activeClass = `${baseItemClass} border-white`; // Borda branca para ativo/hover
    const inactiveClass = `${baseItemClass} border-transparent`; // Borda transparente para inativo

    // Estados para controlar dropdowns
    const [isClientesMenuOpen, setIsClientesMenuOpen] = useState(false);
    const [isOficinaMenuOpen, setIsOficinaMenuOpen] = useState(false);
    const [isAgendamentoMenuOpen, setIsAgendamentoMenuOpen] = useState(false);

    // Verifica se a seção ativa
    const isClientesActive = active === "clientes";
    const isOficinaActive = active === "oficinaOnline";
    const isAgendamentoActive = active === "agendamento";

    return (
        <nav className="flex justify-between items-center p-4 md:p-6 bg-[#075985] text-white">
            <Link href="/inicio">
                <h1 className="text-xl md:text-2xl font-bold cursor-pointer">Oficina On-line</h1>
            </Link>
            <ul className="flex flex-wrap gap-3 md:gap-4 text-sm md:text-base">

                {/* --- Item Início --- */}
                {/* Adiciona classe ativa ou inativa */}
                <li className={active === "inicio" ? activeClass : inactiveClass}>
                    <Link href="/inicio" className="hover:text-sky-200 transition-colors cursor-pointer">Início</Link>
                </li>

                {/* --- Item Clientes (Dropdown) --- */}
                <li
                    className={`relative`} // Classe ativa/inativa agora vai no span/link interno
                    onMouseEnter={() => setIsClientesMenuOpen(true)}
                    onMouseLeave={() => setIsClientesMenuOpen(false)}
                >
                    {/* Aplica classe ativa/inativa E muda para ativa no hover (isClientesMenuOpen) */}
                    <span className={`hover:text-sky-200 transition-colors cursor-default px-1 ${ (isClientesActive || isClientesMenuOpen) ? activeClass : inactiveClass }`}>
                        Clientes
                    </span>
                    {isClientesMenuOpen && (
                        <ul className="absolute left-0 mt-2 w-48 bg-slate-700 rounded-md shadow-lg py-1 z-50">
                            {/* Links internos não precisam do sublinhado */}
                            <li><Link href="/clientes/listar" className="block px-4 py-2 text-sm text-white hover:bg-sky-600 transition-colors cursor-pointer" onClick={() => setIsClientesMenuOpen(false)}>Listar Clientes</Link></li>
                            <li><Link href="/clientes/cadastrar" className="block px-4 py-2 text-sm text-white hover:bg-sky-600 transition-colors cursor-pointer" onClick={() => setIsClientesMenuOpen(false)}>Cadastrar Cliente</Link></li>
                            <li><Link href="/clientes/buscar" className="block px-4 py-2 text-sm text-white hover:bg-sky-600 transition-colors cursor-pointer" onClick={() => setIsClientesMenuOpen(false)}>Buscar Cliente</Link></li>
                        </ul>
                    )}
                </li>

                {/* --- Item Oficina Online (Dropdown) --- */}
                <li
                    className={`relative`}
                    onMouseEnter={() => setIsOficinaMenuOpen(true)}
                    onMouseLeave={() => setIsOficinaMenuOpen(false)}
                >
                    {/* Aplica classe ativa/inativa E muda para ativa no hover (isOficinaMenuOpen) */}
                    <span className={`hover:text-sky-200 transition-colors cursor-default px-1 ${ (isOficinaActive || isOficinaMenuOpen) ? activeClass : inactiveClass }`}>
                        Oficina On-line
                    </span>
                    {isOficinaMenuOpen && (
                        <ul className="absolute left-0 mt-2 w-48 bg-slate-700 rounded-md shadow-lg py-1 z-50">
                            {/* Links internos não precisam do sublinhado */}
                            <li><Link href="/oficinaOnline" className="block px-4 py-2 text-sm text-white hover:bg-sky-600 transition-colors cursor-pointer" onClick={() => setIsOficinaMenuOpen(false)}>Listar Registros</Link></li>
                            <li><Link href="/oficinaOnline/cadastrar" className="block px-4 py-2 text-sm text-white hover:bg-sky-600 transition-colors cursor-pointer" onClick={() => setIsOficinaMenuOpen(false)}>Novo Diagnóstico</Link></li>
                            <li><Link href="/oficinaOnline/buscar" className="block px-4 py-2 text-sm text-white hover:bg-sky-600 transition-colors cursor-pointer" onClick={() => setIsOficinaMenuOpen(false)}>Buscar Registro</Link></li>
                        </ul>
                    )}
                </li>

                {/* --- Item Agendamento (Dropdown) --- */}
                <li
                    className={`relative`}
                    onMouseEnter={() => setIsAgendamentoMenuOpen(true)}
                    onMouseLeave={() => setIsAgendamentoMenuOpen(false)}
                >
                    {/* Aplica classe ativa/inativa E muda para ativa no hover (isAgendamentoMenuOpen) */}
                    <span className={`hover:text-sky-200 transition-colors cursor-default px-1 ${ (isAgendamentoActive || isAgendamentoMenuOpen) ? activeClass : inactiveClass }`}>
                        Agendamento
                    </span>
                    {isAgendamentoMenuOpen && (
                        <ul className="absolute left-0 mt-2 w-52 bg-slate-700 rounded-md shadow-lg py-1 z-50">
                            {/* Links internos não precisam do sublinhado */}
                            <li><Link href="/agendamento/listar" className="block px-4 py-2 text-sm text-white hover:bg-sky-600 transition-colors cursor-pointer" onClick={() => setIsAgendamentoMenuOpen(false)}>Listar Agendamentos</Link></li>
                            <li><Link href="/agendamento/cadastrar" className="block px-4 py-2 text-sm text-white hover:bg-sky-600 transition-colors cursor-pointer" onClick={() => setIsAgendamentoMenuOpen(false)}>Novo Agendamento</Link></li>
                            <li><Link href="/agendamento/buscar" className="block px-4 py-2 text-sm text-white hover:bg-sky-600 transition-colors cursor-pointer" onClick={() => setIsAgendamentoMenuOpen(false)}>Buscar Agendamento</Link></li>
                        </ul>
                    )}
                </li>

                {/* --- Outros Itens --- */}
                {/* Adiciona classe ativa ou inativa */}
                <li className={active === "relatorio" ? activeClass : inactiveClass}>
                    <Link href="/relatorio" className="hover:text-sky-200 transition-colors cursor-pointer">Relatório</Link>
                </li>
                {/* Adiciona classe ativa ou inativa */}
                <li className={active === "pagamento" ? activeClass : inactiveClass}>
                    <Link href="/pagamento" className="hover:text-sky-200 transition-colors cursor-pointer">Pagamento</Link>
                </li>
            </ul>
            <img className="size-10 md:size-12 rounded-full" src="https://avatars.githubusercontent.com/u/4350623?v=4" alt="Avatar do usuário"/>
        </nav>
    )
}
