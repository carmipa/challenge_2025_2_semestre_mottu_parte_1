// Script: converte-codigo-next-em-txt (v7.0)
// Projeto: mottu-web
// Data de geração: 2025-09-10 14:50:04

// Estrutura de diretórios do projeto (simplificada):
mottu-web/
    .idea/
        inspectionProfiles/
    src/
        app/
            box/
                alterar/
                    [id]/
                buscar/
                cadastrar/
                deletar/
                    [id]/
                detalhes/
                    [id]/
                listar/
            clientes/
                alterar/
                    [id]/
                buscar/
                cadastrar/
                deletar/
                    [id]/
                detalhes/
                    [id]/
                listar/
            contato/
            dashboard/
            inicio/
            mapa-2d/
            mapa-do-site/
            patio/
                alterar/
                    [id]/
                buscar/
                cadastrar/
                deletar/
                    [id]/
                detalhes/
                    [id]/
                listar/
            radar/
                armazenar/
                buscar/
                localizar/
                    [placa]/
                mobile-upload/
                    [sessionId]/
            vagas/
                buscar/
                mapa/
            veiculo/
                alterar/
                    [id]/
                buscar/
                cadastrar/
                deletar/
                    [id]/
                detalhes/
                    [id]/
                listar/
            zona/
                alterar/
                    [id]/
                buscar/
                cadastrar/
                deletar/
                    [id]/
                detalhes/
                    [id]/
                listar/
        components/
            forms/
            map/
        types/
        utils/
            api/
            map/

// Índice de Pastas e Arquivos:
//   PASTA: [Arquivos de Configuração]
//     - package.json
//     - tsconfig.json
//   PASTA: src\app
//     - layout.tsx
//     - page.tsx
//   PASTA: src\app\box
//     - layout.tsx
//   PASTA: src\app\box\alterar\[id]
//     - page.tsx
//   PASTA: src\app\box\buscar
//     - page.tsx
//   PASTA: src\app\box\cadastrar
//     - page.tsx
//   PASTA: src\app\box\deletar\[id]
//     - page.tsx
//   PASTA: src\app\box\detalhes\[id]
//     - page.tsx
//   PASTA: src\app\box\listar
//     - page.tsx
//   PASTA: src\app\clientes\alterar\[id]
//     - page.tsx
//   PASTA: src\app\clientes\buscar
//     - page.tsx
//   PASTA: src\app\clientes\cadastrar
//     - page.tsx
//   PASTA: src\app\clientes\deletar\[id]
//     - page.tsx
//   PASTA: src\app\clientes\detalhes\[id]
//     - page.tsx
//   PASTA: src\app\clientes\listar
//     - page.tsx
//   PASTA: src\app\contato
//     - layout.tsx
//     - page.tsx
//   PASTA: src\app\dashboard
//     - page.tsx
//   PASTA: src\app\inicio
//     - page.tsx
//   PASTA: src\app\mapa-2d
//     - page.tsx
//   PASTA: src\app\mapa-do-site
//     - page.tsx
//   PASTA: src\app\patio
//     - layout.tsx
//   PASTA: src\app\patio\alterar\[id]
//     - page.tsx
//   PASTA: src\app\patio\buscar
//     - page.tsx
//   PASTA: src\app\patio\cadastrar
//     - page.tsx
//   PASTA: src\app\patio\deletar\[id]
//     - page.tsx
//   PASTA: src\app\patio\detalhes\[id]
//     - page.tsx
//   PASTA: src\app\patio\listar
//     - page.tsx
//   PASTA: src\app\radar
//     - page.tsx
//   PASTA: src\app\radar\armazenar
//     - page.tsx
//   PASTA: src\app\radar\buscar
//     - page.tsx
//   PASTA: src\app\radar\localizar\[placa]
//     - page.tsx
//   PASTA: src\app\radar\mobile-upload\[sessionId]
//     - page.tsx
//   PASTA: src\app\vagas\buscar
//     - page.tsx
//   PASTA: src\app\vagas\mapa
//     - page.tsx
//   PASTA: src\app\veiculo
//     - layout.tsx
//   PASTA: src\app\veiculo\alterar\[id]
//     - page.tsx
//   PASTA: src\app\veiculo\buscar
//     - page.tsx
//   PASTA: src\app\veiculo\cadastrar
//     - page.tsx
//   PASTA: src\app\veiculo\deletar\[id]
//     - page.tsx
//   PASTA: src\app\veiculo\detalhes\[id]
//     - page.tsx
//   PASTA: src\app\veiculo\listar
//     - page.tsx
//   PASTA: src\app\zona
//     - layout.tsx
//   PASTA: src\app\zona\alterar\[id]
//     - page.tsx
//   PASTA: src\app\zona\buscar
//     - page.tsx
//   PASTA: src\app\zona\cadastrar
//     - page.tsx
//   PASTA: src\app\zona\deletar\[id]
//     - page.tsx
//   PASTA: src\app\zona\detalhes\[id]
//     - page.tsx
//   PASTA: src\app\zona\listar
//     - page.tsx
//   PASTA: src\components
//     - CrudScaffold.tsx
//     - LeafletMap.tsx
//     - OcrScanner.tsx
//     - PatioMottu2D.tsx
//     - nav-bar.tsx
//   PASTA: src\components\forms
//     - TabbedForm.tsx
//   PASTA: src\components\map
//     - UsuarioMarkers.tsx
//   PASTA: src\utils
//     - api.ts
//   PASTA: src\utils\api
//     - dashboard.ts
//   PASTA: src\utils\map
//     - geometry.ts

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PASTA: [Arquivos de Configuração]
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// ARQUIVO: package.json   |   TIPO: Definições do Projeto
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

{
  "name": "mottu-oficina-frontend",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "stop": "taskkill /F /IM node.exe /T"
  },
  "dependencies": {
    "@headlessui/react": "^2.2.2",
    "@types/leaflet": "^1.9.20",
    "axios": "^1.11.0",
    "chart.js": "^4.4.9",
    "leaflet": "^1.9.4",
    "lucide-react": "^0.503.0",
    "next": "^15.4.0-canary.17",
    "qrcode.react": "^4.2.0",
    "react": "^19.1.1",
    "react-chartjs-2": "^5.3.0",
    "react-dom": "^19.1.1",
    "react-icons": "^5.5.0",
    "react-imask": "^7.6.1",
    "react-leaflet": "^5.0.0",
    "react-webcam": "^7.2.0",
    "recharts": "^3.1.2",
    "tesseract.js": "^6.0.1"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@tailwindcss/postcss": "^4",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.2.4",
    "tailwindcss": "^4",
    "typescript": "^5"
  }
}


//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// ARQUIVO: tsconfig.json   |   TIPO: Configuração do TypeScript
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PASTA: src\app
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// ARQUIVO: src\app\layout.tsx   |   TIPO: Componente React (.tsx)
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// src/app/layout.tsx
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";

const geistSans = Geist({
    variable: "--font-geist-sans",
    subsets: ["latin"],
});
const geistMono = Geist_Mono({
    variable: "--font-geist-mono",
    subsets: ["latin"],
});

export const metadata: Metadata = {
    title: "Gestão de veículos",
    description: "Gestão de veículos, pátios, boxes e zonas",
};

export default function RootLayout({ children }: { children: React.ReactNode }) {
    return (
        <html lang="pt-BR">
        <body className={`${geistSans.variable} ${geistMono.variable} antialiased min-h-screen`}>
        {children}
        </body>
        </html>
    );
}


//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// ARQUIVO: src\app\page.tsx   |   TIPO: Componente React (.tsx)
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// src/app/page.tsx
"use client";

import Link from 'next/link';
import NavBar from '@/components/nav-bar';
import Image from "next/image";

export default function HomePage() {
    return (
        <>
            <NavBar active="inicio" />

            <main
                className="flex items-center justify-center min-h-screen text-white p-4"
                style={{
                    backgroundColor: '#000000',
                }}
            >
                <section
                    className="max-w-3xl w-full p-8 md:p-10 rounded-2xl shadow-lg text-center border border-[var(--color-mottu-dark)]"
                    style={{
                        backgroundColor: 'var(--color-mottu-dark)',
                        color: 'var(--color-mottu-text)',
                    }}
                >
                    <div className="mb-6">
                        <h1 className="text-4xl md:text-5xl font-extrabold text-[var(--color-mottu-light)] tracking-tight drop-shadow-md">
                            Gestão de veículos
                        </h1>
                        <p className="mt-2 text-lg text-[var(--color-mottu-text)]">Sua plataforma de gestão de veículos e pátios</p>
                    </div>

                    <p className="mb-8 text-lg md:text-xl leading-relaxed text-[var(--color-mottu-text)]">
                        Simplifique a gestão da sua frota e otimize o controle de pátios e boxes. Com a Mottu Oficina, você tem o poder de organizar, rastrear e manter seus veículos com eficiência e inteligência.
                    </p>

                    <div className="flex flex-col sm:flex-row justify-center gap-4">
                        <Link href="/clientes/listar">
                            <button className="w-full sm:w-auto px-8 py-3 font-semibold text-[var(--color-mottu-text)] bg-[var(--color-mottu-default)] rounded-full shadow-lg hover:bg-[var(--color-mottu-light)] focus:outline-none focus:ring-2 focus:ring-[var(--color-mottu-light)] focus:ring-offset-2 focus:ring-offset-black transition-all duration-300 ease-in-out">
                                Começar Agora
                            </button>
                        </Link>
                        <Link href="/contato">
                            <button className="w-full sm:w-auto px-8 py-3 font-semibold text-[var(--color-mottu-text)] bg-transparent border-2 border-[var(--color-mottu-default)] rounded-full shadow-lg hover:bg-[var(--color-mottu-light)] hover:text-white focus:outline-none focus:ring-2 focus:ring-[var(--color-mottu-light)] focus:ring-offset-2 focus:ring-offset-black transition-all duration-300 ease-in-out">
                                Fale Conosco
                            </button>
                        </Link>
                    </div>
                </section>
            </main>

            {/* ========== RODAPÉ COM A CORREÇÃO "unoptimized" ========== */}
            <footer className="fixed bottom-0 left-0 w-full bg-[var(--color-mottu-dark)] text-white p-4 border-t border-slate-700 shadow-lg">
                <div className="container mx-auto text-center text-xs space-y-3">
                    <div>
                        <p className="font-bold">Challenge-2025-FIAP-TEMMU-METAMIND SOLUTIONS</p>
                        <p className="text-slate-300">CHALLENGE - SPRINT 3 - FIAP 2025</p>
                    </div>
                    <div className="flex justify-center items-center gap-2 flex-wrap">
                        <Image src="https://img.shields.io/badge/Java-007396?style=for-the-badge&logo=openjdk&logoColor=white" alt="Java" width={60} height={28} unoptimized={true} />
                        <Image src="https://img.shields.io/badge/Spring-6DB33F?style=for-the-badge&logo=spring&logoColor=white" alt="Spring" width={70} height={28} unoptimized={true} />
                        <Image src="https://img.shields.io/badge/Gradle-02303A?style=for-the-badge&logo=gradle&logoColor=white" alt="Gradle" width={70} height={28} unoptimized={true} />
                        <Image src="https://img.shields.io/badge/Oracle-F80000?style=for-the-badge&logo=oracle&logoColor=white" alt="Oracle DB" width={70} height={28} unoptimized={true} />
                        <Image src="https://img.shields.io/badge/Next.js-000000?style=for-the-badge&logo=nextdotjs&logoColor=white" alt="Next.js" width={75} height={28} unoptimized={true} />
                        <Image src="https://img.shields.io/badge/React-20232A?style=for-the-badge&logo=react&logoColor=61DAFB" alt="React" width={65} height={28} unoptimized={true} />
                        <Image src="https://img.shields.io/badge/Tailwind_CSS-38B2AC?style=for-the-badge&logo=tailwind-css&logoColor=white" alt="Tailwind CSS" width={110} height={28} unoptimized={true} />
                        <Image src="https://img.shields.io/badge/TypeScript-007ACC?style=for-the-badge&logo=typescript&logoColor=white" alt="TypeScript" width={95} height={28} unoptimized={true} />
                    </div>
                </div>
            </footer>
        </>
    );
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PASTA: src\app\box
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// ARQUIVO: src\app\box\layout.tsx   |   TIPO: Componente React (.tsx)
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

'use client';
import React from 'react';
export default function BoxLayout({ children }: { children: React.ReactNode; }) {
    return <section>{children}</section>;
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PASTA: src\app\box\alterar\[id]
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// ARQUIVO: src\app\box\alterar\[id]\page.tsx   |   TIPO: Componente React (.tsx)
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// src/app/box/alterar/[id]/page.tsx
"use client";
import { useState, useEffect, FormEvent } from 'react';
import { useParams, useRouter } from 'next/navigation';
import Link from 'next/link';
import NavBar from '@/components/nav-bar';
import { MdEdit, MdSave, MdArrowBack, MdErrorOutline, MdCheckCircle } from 'react-icons/md';
import { Tag, Calendar, Text, Info, Loader2, AlertCircle } from 'lucide-react';
import { BoxRequestDto, BoxResponseDto } from '@/types/box';
import { BoxService } from '@/utils/api';

export default function AlterarBoxPage() {
    const router = useRouter();
    const params = useParams();
    const id = typeof params.id === 'string' ? parseInt(params.id, 10) : null;

    const [formData, setFormData] = useState<BoxRequestDto>({
        nome: '', status: '', dataEntrada: '', dataSaida: '', observacao: ''
    });

    const [isLoading, setIsLoading] = useState(false);
    const [isFetching, setIsFetching] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const [success, setSuccess] = useState<string | null>(null);

    useEffect(() => {
        if (!id) {
            setError("ID do box não fornecido na URL.");
            setIsFetching(false);
            return;
        }
        const fetchBoxData = async () => {
            setIsFetching(true);
            setError(null);
            try {
                const data: BoxResponseDto = await BoxService.getById(id);
                setFormData({
                    nome: data.nome,
                    status: data.status,
                    dataEntrada: data.dataEntrada,
                    dataSaida: data.dataSaida,
                    observacao: data.observacao || '',
                });
            } catch (err: any) {
                setError(err.response?.data?.message || err.message || "Falha ao carregar dados do box.");
            } finally {
                setIsFetching(false);
            }
        };
        fetchBoxData();
    }, [id]);

    const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
        const { name, value } = e.target;
        setFormData((prevData) => ({ ...prevData, [name]: value }));
    };

    const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {
        event.preventDefault();
        if (id === null) { setError("ID do box inválido para atualização."); return; }
        setIsLoading(true);
        setError(null);
        setSuccess(null);

        try {
            const updatedBox: BoxResponseDto = await BoxService.update(id, formData);
            setSuccess(`Box "${updatedBox.nome}" (ID: ${updatedBox.idBox}) atualizado com sucesso!`);
            setTimeout(() => {
                setSuccess(null);
                router.push('/box/listar');
            }, 2000);
        } catch (err: any) {
            setError(err.response?.data?.message || err.message || 'Falha ao atualizar box.');
        } finally {
            setIsLoading(false);
        }
    };

    // ... (código de loading e erro inicial permanece o mesmo)

    return (
        <>
            <NavBar active="box" />
            <main className="container mx-auto px-4 py-12 bg-black min-h-screen text-white">
                <div className="bg-[var(--color-mottu-default)] p-6 md:p-8 rounded-lg shadow-xl w-full max-w-lg mx-auto">
                    <h1 className="flex items-center justify-center gap-2 text-2xl md:text-3xl font-bold mb-8 text-center">
                        <MdEdit className="text-3xl text-white" /> Alterar Box (ID: {id})
                    </h1>

                    <form onSubmit={handleSubmit} className="space-y-5">
                        <div className="group">
                            <label htmlFor="nome" className="flex items-center gap-1 block mb-1 text-sm font-medium text-white">
                                <Tag size={16} /> Nome: <span className="text-red-400">*</span>
                            </label>
                            <input type="text" id="nome" name="nome" value={formData.nome} onChange={handleChange} required maxLength={50} placeholder="Ex: Box A-01" className="w-full p-2 h-10 rounded bg-white text-slate-900 peer required:invalid:border-red-500" />
                            <p className="mt-1 text-xs text-slate-300 invisible peer-invalid:visible">Campo obrigatório.</p>
                        </div>
                        <div>
                            <label htmlFor="status" className="flex items-center gap-1 block mb-1 text-sm font-medium text-white">
                                <Info size={16} /> Status: <span className="text-red-400">*</span>
                            </label>
                            <select id="status" name="status" value={formData.status} onChange={handleChange} required className="w-full p-2 h-10 rounded bg-white text-slate-900">
                                <option value="L">Livre</option>
                                <option value="O">Ocupado</option>
                            </select>
                        </div>
                        <div className="group">
                            <label htmlFor="dataEntrada" className="flex items-center gap-1 block mb-1 text-sm font-medium text-white">
                                <Calendar size={16} /> Data Entrada: <span className="text-red-400">*</span>
                            </label>
                            <input type="date" id="dataEntrada" name="dataEntrada" value={formData.dataEntrada} onChange={handleChange} required className="w-full p-2 h-10 rounded bg-white text-slate-900 date-input-fix peer" />
                            <p className="mt-1 text-xs text-slate-300 invisible peer-invalid:visible">Campo obrigatório.</p>
                        </div>
                        <div className="group">
                            <label htmlFor="dataSaida" className="flex items-center gap-1 block mb-1 text-sm font-medium text-white">
                                <Calendar size={16} /> Data Saída: <span className="text-red-400">*</span>
                            </label>
                            <input type="date" id="dataSaida" name="dataSaida" value={formData.dataSaida} onChange={handleChange} required className="w-full p-2 h-10 rounded bg-white text-slate-900 date-input-fix peer" />
                            <p className="mt-1 text-xs text-slate-300 invisible peer-invalid:visible">Campo obrigatório.</p>
                        </div>
                        <div>
                            <label htmlFor="observacao" className="flex items-center gap-1 block mb-1 text-sm font-medium text-white">
                                <Text size={16} /> Observação:
                            </label>
                            <textarea id="observacao" name="observacao" rows={3} value={formData.observacao} onChange={handleChange} maxLength={100} placeholder="Alguma observação sobre o box..." className="w-full p-2 rounded bg-white text-slate-900" />
                        </div>

                        {/* Bloco de Mensagens Movido para cá */}
                        <div className="mt-6 space-y-3">
                            {error && (
                                <div className="relative text-red-200 bg-red-800/80 p-4 pr-10 rounded border border-red-600" role="alert">
                                    <div className="flex items-center gap-2"> <MdErrorOutline className="text-xl" /> <span>{error}</span> </div>
                                    <button type="button" className="absolute top-0 bottom-0 right-0 px-4 py-3 hover:text-red-100" onClick={() => setError(null)} aria-label="Fechar"><span className="text-xl">&times;</span></button>
                                </div>
                            )}
                            {success && (
                                <div className="flex items-center justify-center gap-2 text-green-900 p-3 rounded bg-green-200 border border-green-400">
                                    <MdCheckCircle className="text-xl" /> <span>{success}</span>
                                </div>
                            )}
                        </div>

                        <div className="flex flex-col sm:flex-row items-center justify-center gap-4 pt-4">
                            <button type="submit" className="flex items-center justify-center gap-2 px-6 py-3 font-semibold text-white bg-[var(--color-mottu-dark)] rounded-md shadow hover:bg-opacity-80 transition-opacity duration-300 disabled:opacity-50" disabled={isLoading || isFetching}>
                                <MdSave size={20} /> {isLoading ? 'Salvando...' : 'Salvar Alterações'}
                            </button>
                            <Link href="/box/listar" className="flex items-center justify-center gap-2 px-6 py-3 font-semibold text-[var(--color-mottu-dark)] bg-white rounded-md shadow hover:bg-gray-100">
                                <MdArrowBack size={20} /> Voltar para Lista
                            </Link>
                        </div>
                    </form>
                </div>
            </main>
            <style jsx global>{`
                .date-input-fix::-webkit-calendar-picker-indicator { filter: invert(0.8); cursor: pointer; }
                input[type="date"]:required:invalid::-webkit-datetime-edit { color: transparent; }
                input[type="date"]:focus::-webkit-datetime-edit { color: #1e293b !important; }
                input[type="date"]::-webkit-datetime-edit { color: #1e293b; }
            `}</style>
        </>
    );
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PASTA: src\app\box\buscar
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// ARQUIVO: src\app\box\buscar\page.tsx   |   TIPO: Componente React (.tsx)
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// src/app/box/buscar/page.tsx
"use client";

import { useState, FormEvent, ChangeEvent } from 'react';
import Link from 'next/link';
import NavBar from '@/components/nav-bar';
import { MdSearch, MdClear, MdEdit, MdDelete, MdVisibility, MdErrorOutline } from 'react-icons/md';
import { Box as BoxIcon, Search as SearchIconLucide } from 'lucide-react';
import { BoxResponseDto, BoxFilter } from '@/types/box';
import { SpringPage } from '@/types/common';
import { BoxService } from '@/utils/api';

const initialFilterState: BoxFilter = {
    nome: '',
    status: undefined,
    dataEntradaInicio: '',
    dataEntradaFim: '',
    dataSaidaInicio: '',
    dataSaidaFim: '',
    observacao: '',
};

export default function BuscarBoxesPage() {
    const [boxes, setBoxes] = useState<BoxResponseDto[]>([]);
    const [pageInfo, setPageInfo] = useState<SpringPage<BoxResponseDto> | null>(null);
    const [currentPage, setCurrentPage] = useState(0);
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const [hasSearched, setHasSearched] = useState(false);
    const [filter, setFilter] = useState<BoxFilter>(initialFilterState);

    const ITEMS_PER_PAGE = 9;
    const SORT_ORDER = 'idBox,asc';

    const fetchData = async (pageToFetch = 0, currentFilters = filter) => {
        setIsLoading(true);
        setError(null);
        setHasSearched(true);

        if (pageToFetch === 0) {
            setBoxes([]);
            setPageInfo(null);
        }

        try {
            const data = await BoxService.listarPaginadoFiltrado(currentFilters, pageToFetch, ITEMS_PER_PAGE, SORT_ORDER);
            setBoxes(data.content);
            setPageInfo(data);
            setCurrentPage(data.number);
        } catch (err: any) {
            setError(err.response?.data?.message || err.message || 'Erro ao buscar boxes.');
            setBoxes([]);
            setPageInfo(null);
        } finally {
            setIsLoading(false);
        }
    };

    const handleFilterChange = (e: ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
        setFilter(prev => ({ ...prev, [e.target.name]: e.target.value === "" ? undefined : e.target.value }));
    };

    const handleSearch = (e: FormEvent) => {
        e.preventDefault();
        setCurrentPage(0);
        fetchData(0, filter);
    };

    const handleClearFilters = () => {
        setFilter(initialFilterState);
        setBoxes([]);
        setPageInfo(null);
        setCurrentPage(0);
        setHasSearched(false);
        setError(null);
    };

    const handlePageChange = (newPage: number) => {
        fetchData(newPage, filter);
    };

    return (
        <>
            <NavBar active="box" />
            <main className="min-h-screen bg-black text-white p-4 md:p-8">
                <div className="container mx-auto bg-[var(--color-mottu-default)] p-6 md:p-8 rounded-lg shadow-xl">
                    <h1 className="flex items-center justify-center gap-2 text-2xl md:text-3xl font-bold mb-6 text-center text-white">
                        <SearchIconLucide size={30} /> Buscar Boxes
                    </h1>

                    <form onSubmit={handleSearch} className="mb-8 p-4 bg-black/20 rounded-lg">
                        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4 items-end">
                            <input type="text" name="nome" value={filter.nome || ''} onChange={handleFilterChange} placeholder="Nome do Box..." className="w-full p-2 h-10 rounded bg-white text-slate-900"/>
                            <select name="status" value={filter.status || ''} onChange={handleFilterChange} className="w-full p-2 h-10 rounded bg-white text-slate-900">
                                <option value="">Todos os Status</option>
                                <option value="L">Livre</option>
                                <option value="O">Ocupado</option>
                            </select>
                            <input type="text" name="observacao" value={filter.observacao || ''} onChange={handleFilterChange} placeholder="Observação..." className="w-full p-2 h-10 rounded bg-white text-slate-900"/>
                            <div>
                                <label className="text-xs text-slate-300">Data Entrada (Início):</label>
                                <input type="date" name="dataEntradaInicio" value={filter.dataEntradaInicio || ''} onChange={handleFilterChange} className="w-full p-2 h-10 rounded bg-white text-slate-900 date-input-fix"/>
                            </div>
                            <div>
                                <label className="text-xs text-slate-300">Data Entrada (Fim):</label>
                                <input type="date" name="dataEntradaFim" value={filter.dataEntradaFim || ''} onChange={handleFilterChange} className="w-full p-2 h-10 rounded bg-white text-slate-900 date-input-fix"/>
                            </div>
                            <div className="flex gap-2 sm:col-span-full md:col-span-1 justify-center">
                                <button type="submit" className="flex-1 flex items-center justify-center gap-2 h-10 px-4 font-semibold text-white bg-[var(--color-mottu-dark)] rounded-md hover:bg-opacity-80">
                                    <MdSearch /> Buscar
                                </button>
                                <button type="button" onClick={handleClearFilters} className="flex-1 flex items-center justify-center gap-2 h-10 px-4 font-medium text-slate-700 bg-gray-200 rounded-md hover:bg-gray-300">
                                    <MdClear /> Limpar
                                </button>
                            </div>
                        </div>
                    </form>

                    {isLoading && <p className="text-center text-slate-100 py-10">Buscando...</p>}
                    {error && <div className="text-center text-red-400 p-4 bg-red-900/50 rounded-md">{error}</div>}

                    {!isLoading && hasSearched && boxes.length === 0 && !error && (
                        <div className="text-center py-10"><p className="text-slate-300">Nenhum box encontrado.</p></div>
                    )}

                    {!isLoading && boxes.length > 0 && (
                        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
                            {boxes.map((box) => (
                                <div key={box.idBox} className="bg-white text-slate-800 rounded-lg shadow-lg p-5 flex flex-col justify-between transition-all hover:shadow-2xl hover:scale-105">
                                    <div>
                                        <div className="flex items-center mb-3">
                                            <span className="text-xs font-semibold bg-slate-200 text-slate-700 px-2 py-0.5 rounded-full mr-2">ID: {box.idBox}</span>
                                            <h2 className="text-xl font-bold text-[var(--color-mottu-dark)] truncate">{box.nome}</h2>
                                        </div>
                                        <p className={`text-sm font-bold ${box.status === 'L' ? 'text-green-600' : 'text-red-600'}`}>
                                            Status: {box.status === 'L' ? 'Livre' : 'Ocupado'}
                                        </p>
                                    </div>
                                    <div className="flex justify-end items-center gap-2 border-t border-slate-200 pt-3 mt-4">
                                        <Link href={`/box/detalhes/${box.idBox}`} className="p-2 rounded-full text-blue-600 hover:bg-blue-100" title="Ver Detalhes"><MdVisibility size={22}/></Link>
                                        <Link href={`/box/alterar/${box.idBox}`} className="p-2 rounded-full text-yellow-500 hover:bg-yellow-100" title="Editar Box"><MdEdit size={20}/></Link>
                                        <Link href={`/box/deletar/${box.idBox}`} className="p-2 rounded-full text-red-500 hover:bg-red-100" title="Excluir Box"><MdDelete size={20}/></Link>
                                    </div>
                                </div>
                            ))}
                        </div>
                    )}
                </div>
            </main>
            <style jsx global>{`
                .date-input-fix::-webkit-calendar-picker-indicator { cursor: pointer; }
                input[type="date"] { color-scheme: dark; }
            `}</style>
        </>
    );
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PASTA: src\app\box\cadastrar
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// ARQUIVO: src\app\box\cadastrar\page.tsx   |   TIPO: Componente React (.tsx)
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// src/app/box/cadastrar/page.tsx
"use client";
import { useState, FormEvent } from 'react';
import { useRouter } from 'next/navigation';
import Link from 'next/link';
import NavBar from '@/components/nav-bar';
import { MdAddCircleOutline, MdSave, MdArrowBack, MdErrorOutline, MdCheckCircle } from 'react-icons/md';
import { Tag, Calendar, Text, Info } from 'lucide-react';
import { BoxRequestDto, BoxResponseDto } from '@/types/box';
import { BoxService } from '@/utils/api';

export default function CadastrarBoxPage() {
    const router = useRouter();
    const today = new Date().toISOString().split('T')[0];

    const initialState: BoxRequestDto = {
        nome: '',
        status: 'L',
        dataEntrada: today,
        dataSaida: today,
        observacao: '',
    };

    const [formData, setFormData] = useState<BoxRequestDto>(initialState);
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const [success, setSuccess] = useState<string | null>(null);

    const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
        const { name, value } = e.target;
        setFormData((prevData) => ({
            ...prevData,
            [name]: value,
        }));
    };

    const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {
        event.preventDefault();
        setIsLoading(true);
        setError(null);
        setSuccess(null);

        try {
            const createdBox: BoxResponseDto = await BoxService.create(formData);
            setSuccess(`Box "${createdBox.nome}" (ID: ${createdBox.idBox}) cadastrado com sucesso!`);
            setFormData(initialState);
            setTimeout(() => setSuccess(null), 5000);
        } catch (err: any) {
            setError(err.response?.data?.message || err.message || 'Falha ao cadastrar box.');
        } finally {
            setIsLoading(false);
        }
    };

    return (
        <>
            <NavBar active="box" />
            <main className="container mx-auto px-4 py-12 bg-black min-h-screen text-white">
                <div className="bg-[var(--color-mottu-default)] p-6 md:p-8 rounded-lg shadow-xl w-full max-w-lg mx-auto">
                    <h1 className="flex items-center justify-center gap-2 text-2xl md:text-3xl font-bold mb-8 text-center text-white">
                        <MdAddCircleOutline className="text-3xl" /> Novo Box
                    </h1>

                    <form onSubmit={handleSubmit} className="space-y-5">
                        <div className="group">
                            <label htmlFor="nome" className="flex items-center gap-1 block mb-1 text-sm font-medium text-white">
                                <Tag size={16} /> Nome: <span className="text-red-400">*</span>
                            </label>
                            <input
                                type="text"
                                id="nome"
                                name="nome"
                                value={formData.nome}
                                onChange={handleChange}
                                required
                                maxLength={50}
                                placeholder="Ex: Box A-01"
                                className="w-full p-2 h-10 rounded bg-white text-slate-900 peer required:invalid:border-red-500"
                            />
                            <p className="mt-1 text-xs text-slate-300 invisible peer-invalid:visible">Campo obrigatório.</p>
                        </div>

                        <div>
                            <label htmlFor="status" className="flex items-center gap-1 block mb-1 text-sm font-medium text-white">
                                <Info size={16} /> Status: <span className="text-red-400">*</span>
                            </label>
                            <select
                                id="status"
                                name="status"
                                value={formData.status}
                                onChange={handleChange}
                                required
                                className="w-full p-2 h-10 rounded bg-white text-slate-900"
                            >
                                <option value="L">Livre</option>
                                <option value="O">Ocupado</option>
                            </select>
                        </div>

                        <div className="group">
                            <label htmlFor="dataEntrada" className="flex items-center gap-1 block mb-1 text-sm font-medium text-white">
                                <Calendar size={16} /> Data Entrada: <span className="text-red-400">*</span>
                            </label>
                            <input
                                type="date"
                                id="dataEntrada"
                                name="dataEntrada"
                                value={formData.dataEntrada}
                                onChange={handleChange}
                                required
                                className="w-full p-2 h-10 rounded bg-white text-slate-900 date-input-fix peer"
                            />
                            <p className="mt-1 text-xs text-slate-300 invisible peer-invalid:visible">Campo obrigatório.</p>
                        </div>

                        <div className="group">
                            <label htmlFor="dataSaida" className="flex items-center gap-1 block mb-1 text-sm font-medium text-white">
                                <Calendar size={16} /> Data Saída: <span className="text-red-400">*</span>
                            </label>
                            <input
                                type="date"
                                id="dataSaida"
                                name="dataSaida"
                                value={formData.dataSaida}
                                onChange={handleChange}
                                required
                                className="w-full p-2 h-10 rounded bg-white text-slate-900 date-input-fix peer"
                            />
                            <p className="mt-1 text-xs text-slate-300 invisible peer-invalid:visible">Campo obrigatório.</p>
                        </div>

                        <div>
                            <label htmlFor="observacao" className="flex items-center gap-1 block mb-1 text-sm font-medium text-white">
                                <Text size={16} /> Observação:
                            </label>
                            <textarea
                                id="observacao"
                                name="observacao"
                                rows={3}
                                value={formData.observacao}
                                onChange={handleChange}
                                maxLength={100}
                                placeholder="Alguma observação sobre o box..."
                                className="w-full p-2 rounded bg-white text-slate-900"
                            />
                        </div>

                        {/* Bloco de Mensagens Movido para cá */}
                        <div className="mt-6 space-y-3">
                            {error && (
                                <div className="relative text-red-200 bg-red-800/80 p-4 pr-10 rounded border border-red-600" role="alert">
                                    <div className="flex items-center gap-2"> <MdErrorOutline className="text-xl" /> <span>{error}</span> </div>
                                    <button type="button" className="absolute top-0 bottom-0 right-0 px-4 py-3 hover:text-red-100" onClick={() => setError(null)} aria-label="Fechar"><span className="text-xl">&times;</span></button>
                                </div>
                            )}
                            {success && (
                                <div className="flex items-center justify-center gap-2 text-green-900 p-3 rounded bg-green-200 border border-green-400">
                                    <MdCheckCircle className="text-xl" /> <span>{success}</span>
                                </div>
                            )}
                        </div>

                        <div className="flex flex-col sm:flex-row items-center justify-center gap-4 pt-4">
                            <button
                                type="submit"
                                className="flex items-center justify-center gap-2 px-6 py-3 font-semibold text-white bg-[var(--color-mottu-dark)] rounded-md shadow hover:bg-opacity-80 transition-colors duration-200 disabled:opacity-50"
                                disabled={isLoading}
                            >
                                <MdSave size={20} /> {isLoading ? 'Salvando...' : 'Salvar Box'}
                            </button>
                            <Link href="/box/listar" className="flex items-center justify-center gap-2 px-6 py-3 font-semibold text-[var(--color-mottu-dark)] bg-white rounded-md shadow hover:bg-gray-100">
                                <MdArrowBack size={20} /> Voltar para Lista
                            </Link>
                        </div>
                    </form>
                </div>
            </main>
            <style jsx global>{`
                .date-input-fix::-webkit-calendar-picker-indicator { cursor: pointer; }
                input[type="date"]:required:invalid::-webkit-datetime-edit { color: transparent; }
                input[type="date"]:focus::-webkit-datetime-edit { color: #1e293b !important; }
                input[type="date"]::-webkit-datetime-edit { color: #1e293b; }
            `}</style>
        </>
    );
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PASTA: src\app\box\deletar\[id]
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// ARQUIVO: src\app\box\deletar\[id]\page.tsx   |   TIPO: Componente React (.tsx)
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// src/app/box/deletar/[id]/page.tsx
"use client";

import { useState, useEffect } from 'react';
import { useParams, useRouter } from 'next/navigation';
import Link from 'next/link';
import NavBar from '@/components/nav-bar';
import { MdDeleteForever, MdCancel, MdErrorOutline, MdWarningAmber, MdInfoOutline } from 'react-icons/md';
import { Trash2, AlertCircle, Loader2 } from 'lucide-react';

// Interfaces dos DTOs
import { BoxResponseDto } from '@/types/box';
import { BoxService } from '@/utils/api';

export default function DeletarBoxPage() {
    const router = useRouter();
    const params = useParams();
    const idParam = params?.id;
    const id = typeof idParam === 'string' ? parseInt(idParam, 10) : null;

    const [boxInfo, setBoxInfo] = useState<BoxResponseDto | null>(null);
    const [isLoadingInfo, setIsLoadingInfo] = useState(true); // Para carregar os dados do box a ser deletado
    const [isDeleting, setIsDeleting] = useState(false); // Para o estado de deleção (excluindo...)
    const [error, setError] = useState<string | null>(null);

    // Função para formatar a data para exibição
    const formatDate = (dateString: string | null | undefined): string => {
        if (!dateString) return '-';
        try {
            return new Date(dateString + 'T00:00:00Z').toLocaleDateString('pt-BR', { timeZone: 'UTC' });
        } catch (e) {
            console.error("Erro ao formatar data:", dateString, e);
            return 'Inválida';
        }
    };

    // Efeito para buscar os dados do box para confirmação
    useEffect(() => {
        if (!id) {
            setError("ID do box não fornecido na URL.");
            setIsLoadingInfo(false);
            return;
        }
        const fetchBoxData = async () => {
            setIsLoadingInfo(true);
            setError(null); // Limpa erros anteriores
            try {
                const data: BoxResponseDto = await BoxService.getById(id);
                setBoxInfo(data);
            } catch (err: any) {
                // Se for 404, indica que o recurso não foi encontrado (talvez já deletado)
                if (err.response && err.response.status === 404) {
                    setError(`Box com ID ${id} não encontrado(a) ou já foi excluído(a).`);
                } else {
                    setError(err.response?.data?.message || err.message || "Falha ao carregar dados do box para exclusão.");
                }
                console.error("Erro detalhado no fetch de deleção:", err);
                setBoxInfo(null); // Garante que o info esteja vazio em caso de erro
            } finally {
                setIsLoadingInfo(false);
            }
        };
        fetchBoxData();
    }, [id]);

    // Handler para confirmar a deleção
    const handleConfirmDelete = async () => {
        if (id === null || !boxInfo) { // Verifica se o ID é válido e se os dados do box foram carregados
            setError("Não é possível excluir: ID inválido ou dados do box não carregados.");
            return;
        }
        setIsDeleting(true); // Ativa o estado de deleção
        setError(null); // Limpa erros anteriores

        try {
            await BoxService.delete(id);
            console.log(`Box ID ${id} excluído com sucesso.`);
            // Redireciona para a página de listagem após o sucesso
            router.push('/box/listar?deleted=true'); // Adiciona query param para possível mensagem de sucesso na lista
        } catch (err: any) {
            // Captura e exibe erros durante a deleção
            setError(err.response?.data?.message || err.message || "Falha ao excluir box.");
            console.error("Erro detalhado na deleção:", err);
        } finally {
            setIsDeleting(false); // Desativa o estado de deleção
        }
    };

    // Handler para cancelar a deleção (volta para a lista)
    const handleCancel = () => {
        router.push('/box/listar');
    };

    // Renderização condicional para o estado de carregamento inicial dos dados do box
    if (isLoadingInfo) {
        return (
            <>
                <NavBar active="boxes-deletar" />
                <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white flex justify-center items-center">
                    <p className="text-center text-sky-300 py-10 text-xl flex items-center gap-2">
                        <Loader2 className="h-6 w-6 animate-spin" /> Carregando dados para confirmação...
                    </p>
                </main>
            </>
        );
    }

    // Renderização condicional para erro no carregamento inicial ou box não encontrado
    if (error && !boxInfo) {
        return (
            <>
                <NavBar active="boxes-deletar" />
                <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white flex justify-center items-center">
                    <div className="bg-slate-900 p-6 md:p-8 m-4 rounded-lg shadow-xl w-full max-w-lg mx-auto text-center">
                        <AlertCircle className="text-5xl text-red-400 mx-auto mb-4" />
                        <h2 className="flex items-center justify-center gap-2 text-2xl md:text-3xl font-bold mb-6 text-center text-red-400">
                            <MdErrorOutline className="text-3xl" /> Erro ao Carregar
                        </h2>
                        <p className="text-center text-red-400 bg-red-900/50 p-3 rounded border border-red-500 mb-6">{error}</p>
                        <div className="text-center">
                            <button onClick={handleCancel} className="flex items-center justify-center gap-2 px-6 py-3 font-semibold text-white bg-slate-600 rounded-md shadow hover:bg-slate-700">
                                <MdArrowBack size={20} /> Voltar para Lista
                            </button>
                        </div>
                    </div>
                </main>
            </>
        );
    }

    // Renderização da página de confirmação de deleção
    return (
        <>
            <NavBar active="boxes-deletar" />
            <main className="flex items-center justify-center min-h-screen bg-[#012A46] text-white px-4 py-10">
                <div className="bg-slate-900 p-6 md:p-8 m-4 rounded-lg shadow-xl w-full max-w-lg border border-red-500">
                    <h2 className="flex items-center justify-center gap-2 text-2xl md:text-3xl font-bold mb-4 text-center text-red-400">
                        <Trash2 size={28} className="text-red-400" /> Confirmar Exclusão
                    </h2>
                    <p className="text-center mb-6 text-slate-300">Tem certeza que deseja excluir o seguinte box? Esta ação não pode ser desfeita.</p>

                    {boxInfo && (
                        <div className="text-slate-300 text-sm mb-8 border-l-2 border-red-500 pl-4 bg-slate-800 p-4 rounded">
                            <p><strong>ID do Box:</strong> {boxInfo.idBox}</p>
                            <p><strong>Nome:</strong> {boxInfo.nome}</p>
                            <p><strong>Status:</strong> {boxInfo.status === 'L' ? 'Livre' : 'Ocupado'}</p>
                            <p><strong>Data Entrada:</strong> {formatDate(boxInfo.dataEntrada)}</p>
                            <p><strong>Data Saída:</strong> {formatDate(boxInfo.dataSaida)}</p>
                            <p><strong>Observação:</strong> {boxInfo.observacao || '-'}</p>
                        </div>
                    )}

                    {error && ( // Exibe erro se ocorrer durante a tentativa de exclusão
                        <p className="text-center text-red-400 bg-red-900/50 p-3 rounded border border-red-500 mb-4">{error}</p>
                    )}

                    <div className="flex flex-col sm:flex-row items-center justify-center gap-4 mt-6">
                        <button
                            onClick={handleConfirmDelete}
                            className={`flex items-center justify-center gap-2 px-6 py-3 font-semibold text-white bg-red-600 rounded-md shadow hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 focus:ring-offset-slate-900 transition-opacity duration-300 ${isDeleting ? 'opacity-50 cursor-not-allowed' : ''}`}
                            disabled={isDeleting}
                        >
                            {isDeleting ? 'Excluindo...' : (<><MdDeleteForever size={20} /> Sim, Excluir</>)}
                        </button>
                        <button
                            onClick={handleCancel}
                            className="flex items-center justify-center gap-2 px-6 py-3 font-semibold text-white bg-slate-600 rounded-md shadow hover:bg-slate-700 focus:outline-none focus:ring-2 focus:ring-slate-500 focus:ring-offset-2 focus:ring-offset-slate-900"
                            disabled={isDeleting}
                        >
                            <MdCancel size={20} /> Não, Cancelar
                        </button>
                    </div>
                </div>
            </main>
        </>
    );
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PASTA: src\app\box\detalhes\[id]
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// ARQUIVO: src\app\box\detalhes\[id]\page.tsx   |   TIPO: Componente React (.tsx)
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// src/app/box/detalhes/[id]/page.tsx
"use client";

import { useState, useEffect } from 'react';
import { useParams } from 'next/navigation';
import Link from 'next/link';
import NavBar from '@/components/nav-bar';
import { BoxService } from '@/utils/api';
import { BoxResponseDto } from '@/types/box';
import { Loader2, AlertCircle, Box as BoxIcon, Calendar, Info, Edit, ArrowLeft, Text } from 'lucide-react';

export default function DetalhesBoxPage() {
    const params = useParams();
    const id = typeof params.id === 'string' ? parseInt(params.id, 10) : null;

    const [box, setBox] = useState<BoxResponseDto | null>(null);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);

    const formatDate = (dateString: string | null | undefined): string => {
        if (!dateString) return 'N/A';
        try {
            return new Date(dateString + 'T00:00:00Z').toLocaleDateString('pt-BR', { timeZone: 'UTC' });
        } catch {
            return 'Data inválida';
        }
    };

    useEffect(() => {
        if (!id) {
            setError("ID do box inválido.");
            setIsLoading(false);
            return;
        }
        const fetchBox = async () => {
            setIsLoading(true);
            try {
                const data = await BoxService.getById(id);
                setBox(data);
            } catch (err: any) {
                setError(err.response?.data?.message || "Box não encontrado ou erro ao carregar dados.");
            } finally {
                setIsLoading(false);
            }
        };
        fetchBox();
    }, [id]);

    if (isLoading) return (
        <>
            <NavBar active="box" />
            <main className="flex justify-center items-center min-h-screen bg-black"><Loader2 className="h-12 w-12 animate-spin text-[var(--color-mottu-light)]" /></main>
        </>
    );

    if (error) return (
        <>
            <NavBar active="box" />
            <main className="flex justify-center items-center min-h-screen bg-black p-4">
                <div className="text-center bg-red-900/50 p-8 rounded-lg">
                    <AlertCircle className="mx-auto h-12 w-12 text-red-400" />
                    <p className="mt-4 text-red-400">{error}</p>
                    <Link href="/box/listar" className="mt-6 inline-flex items-center gap-2 px-6 py-2 bg-slate-600 text-white rounded-md"><ArrowLeft size={18}/> Voltar para Lista</Link>
                </div>
            </main>
        </>
    );

    if (!box) return null;

    return (
        <>
            <NavBar active="box" />
            <main className="min-h-screen bg-black text-white p-4 md:p-8">
                <div className="container max-w-4xl mx-auto bg-[var(--color-mottu-default)] p-6 md:p-8 rounded-lg shadow-xl">
                    <div className="flex flex-col sm:flex-row justify-between items-start mb-6">
                        <div>
                            <h1 className="text-2xl md:text-3xl font-bold text-white">{box.nome}</h1>
                            <p className="text-slate-300">Detalhes do Box (ID: {box.idBox})</p>
                        </div>
                        <div className="flex gap-2 mt-4 sm:mt-0">
                            <Link href="/box/listar" className="flex items-center gap-2 px-4 py-2 font-medium text-[var(--color-mottu-dark)] bg-white rounded-md shadow hover:bg-gray-100">
                                <ArrowLeft size={18} /> Voltar
                            </Link>
                            <Link href={`/box/alterar/${box.idBox}`} className="flex items-center gap-2 px-4 py-2 font-semibold text-white bg-[var(--color-mottu-dark)] rounded-md shadow hover:bg-opacity-80">
                                <Edit size={18} /> Editar
                            </Link>
                        </div>
                    </div>

                    <div className="bg-black/20 p-4 rounded-lg">
                        <h2 className="text-xl font-semibold mb-3 text-slate-100 flex items-center"><BoxIcon className="mr-2"/>Dados do Box</h2>
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-x-6 gap-y-2 text-sm">
                            <p><strong>Nome:</strong> {box.nome}</p>
                            <p><strong>Status:</strong> <span className={box.status === 'L' ? 'text-green-400' : 'text-red-400'}>{box.status === 'L' ? 'Livre' : 'Ocupado'}</span></p>
                            <p><strong>Data de Entrada:</strong> {formatDate(box.dataEntrada)}</p>
                            <p><strong>Data de Saída:</strong> {formatDate(box.dataSaida)}</p>
                            <p className="md:col-span-2"><strong>Observação:</strong> {box.observacao || '-'}</p>
                        </div>
                    </div>
                </div>
            </main>
        </>
    );
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PASTA: src\app\box\listar
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// ARQUIVO: src\app\box\listar\page.tsx   |   TIPO: Componente React (.tsx)
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// src/app/box/listar/page.tsx
"use client";
import { useState, useEffect, FormEvent, ChangeEvent } from 'react';
import Link from 'next/link';
import NavBar from '@/components/nav-bar';
import { BoxService } from '@/utils/api';
import { BoxResponseDto, BoxFilter } from '@/types/box';
import { SpringPage } from '@/types/common';
import { MdSearch, MdClear, MdAdd, MdChevronLeft, MdChevronRight, MdEdit, MdDelete, MdVisibility, MdErrorOutline } from 'react-icons/md';
import { Box as BoxIcon } from 'lucide-react';

const initialFilterState: BoxFilter = { nome: "", status: undefined };

export default function ListarBoxesPage() {
    const [boxes, setBoxes] = useState<BoxResponseDto[]>([]);
    const [pageInfo, setPageInfo] = useState<SpringPage<BoxResponseDto> | null>(null);
    const [currentPage, setCurrentPage] = useState(0);
    const [filtros, setFiltros] = useState<BoxFilter>(initialFilterState);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);

    const ITEMS_PER_PAGE = 9;

    const fetchData = async (page = 0, currentFilters = filtros) => {
        setIsLoading(true);
        setError(null);
        try {
            const data = await BoxService.listarPaginadoFiltrado(currentFilters, page, ITEMS_PER_PAGE);
            setBoxes(data.content);
            setPageInfo(data);
            setCurrentPage(data.number);
        } catch (err: any) {
            setError(err.response?.data?.message || 'Erro ao buscar boxes.');
        } finally {
            setIsLoading(false);
        }
    };

    useEffect(() => {
        fetchData();
    }, []);

    const handleFilterChange = (e: ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
        setFiltros({ ...filtros, [e.target.name]: e.target.value });
    };

    const handleFilterSubmit = (e: FormEvent) => {
        e.preventDefault();
        fetchData(0, filtros);
    };

    const handleClearFilters = () => {
        setFiltros(initialFilterState);
        fetchData(0, initialFilterState);
    };

    const handlePageChange = (newPage: number) => {
        fetchData(newPage, filtros);
    };

    return (
        <>
            <NavBar active="box" />
            <main className="min-h-screen bg-black text-white p-4 md:p-8">
                <div className="container mx-auto bg-[var(--color-mottu-default)] p-6 md:p-8 rounded-lg shadow-xl">
                    <div className="flex flex-col sm:flex-row justify-between items-center mb-8">
                        <h1 className="text-2xl md:text-3xl font-bold text-white flex items-center">
                            <BoxIcon size={32} className="mr-3" />
                            Boxes Cadastrados
                        </h1>
                        <Link href="/box/cadastrar" className="mt-4 sm:mt-0 flex items-center gap-2 px-4 py-2.5 font-semibold text-[var(--color-mottu-dark)] bg-white rounded-md shadow hover:bg-gray-100">
                            <MdAdd size={20} /> Novo Box
                        </Link>
                    </div>
                    {error && <div className="mb-4 text-center text-red-700 p-3 rounded-md bg-red-100"><MdErrorOutline className="inline mr-2" />{error}</div>}
                    <form onSubmit={handleFilterSubmit} className="mb-8 p-4 bg-black/20 rounded-lg">
                        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4 items-end">
                            <input type="text" name="nome" value={filtros.nome} onChange={handleFilterChange} placeholder="Filtrar por nome..." className="w-full p-2 h-10 rounded bg-white text-slate-900"/>
                            <select name="status" value={filtros.status || ''} onChange={handleFilterChange} className="w-full p-2 h-10 rounded bg-white text-slate-900">
                                <option value="">Todos os Status</option>
                                <option value="L">Livre</option>
                                <option value="O">Ocupado</option>
                            </select>
                            <div className="flex gap-2">
                                <button type="submit" className="flex-1 flex items-center justify-center gap-2 h-10 px-4 font-semibold text-white bg-[var(--color-mottu-dark)] rounded-md hover:bg-opacity-80">
                                    <MdSearch /> Buscar
                                </button>
                                <button type="button" onClick={handleClearFilters} className="flex-1 flex items-center justify-center gap-2 h-10 px-4 font-medium text-slate-700 bg-gray-200 rounded-md hover:bg-gray-300">
                                    <MdClear /> Limpar
                                </button>
                            </div>
                        </div>
                    </form>
                    {isLoading ? <p className="text-center text-slate-100 py-10">Carregando...</p> : boxes.length > 0 ? (
                        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
                            {boxes.map((box) => (
                                <div key={box.idBox} className="bg-white text-slate-800 rounded-lg shadow-lg p-5 flex flex-col justify-between transition-all hover:shadow-2xl hover:scale-105">
                                    <div>
                                        <div className="flex items-center mb-3">
                                            <span className="text-xs font-semibold bg-slate-200 text-slate-700 px-2 py-0.5 rounded-full mr-2">ID: {box.idBox}</span>
                                            <h2 className="text-xl font-bold text-[var(--color-mottu-dark)] truncate">{box.nome}</h2>
                                        </div>
                                        <p className={`text-sm font-bold ${box.status === 'L' ? 'text-green-600' : 'text-red-600'}`}>
                                            Status: {box.status === 'L' ? 'Livre' : 'Ocupado'}
                                        </p>
                                    </div>
                                    <div className="flex justify-end items-center gap-2 border-t border-slate-200 pt-3 mt-4">
                                        <Link href={`/box/detalhes/${box.idBox}`} className="p-2 rounded-full text-blue-600 hover:bg-blue-100" title="Ver Detalhes"><MdVisibility size={22}/></Link>
                                        <Link href={`/box/alterar/${box.idBox}`} className="p-2 rounded-full text-yellow-500 hover:bg-yellow-100" title="Editar Box"><MdEdit size={20}/></Link>
                                        <Link href={`/box/deletar/${box.idBox}`} className="p-2 rounded-full text-red-500 hover:bg-red-100" title="Excluir Box"><MdDelete size={20}/></Link>
                                    </div>
                                </div>
                            ))}
                        </div>
                    ) : <p className="text-center text-slate-300 py-10">Nenhum box encontrado.</p>}
                    {!isLoading && pageInfo && pageInfo.totalPages > 1 && (
                        <div className="mt-8 flex justify-between items-center text-sm text-slate-100">
                            <span>Página {pageInfo.number + 1} de {pageInfo.totalPages}</span>
                            <div className="flex gap-2">
                                <button onClick={() => handlePageChange(currentPage - 1)} disabled={pageInfo.first} className="px-3 py-1.5 rounded-md bg-slate-700 hover:bg-slate-600 disabled:opacity-50"><MdChevronLeft/></button>
                                <button onClick={() => handlePageChange(currentPage + 1)} disabled={pageInfo.last} className="px-3 py-1.5 rounded-md bg-slate-700 hover:bg-slate-600 disabled:opacity-50"><MdChevronRight/></button>
                            </div>
                        </div>
                    )}
                </div>
            </main>
        </>
    );
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PASTA: src\app\clientes\alterar\[id]
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// ARQUIVO: src\app\clientes\alterar\[id]\page.tsx   |   TIPO: Componente React (.tsx)
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// src/app/clientes/alterar/[id]/page.tsx
"use client";
import { useState, useEffect, FormEvent } from 'react';
import { useParams, useRouter } from 'next/navigation';
import Link from 'next/link';
import NavBar from '@/components/nav-bar';
import { IMaskInput } from 'react-imask';
import { MdEdit, MdSave, MdArrowBack, MdErrorOutline, MdCheckCircle, MdInfo, MdBadge, MdHome, MdPhone } from 'react-icons/md';
import { User, Mail, MapPin, Calendar, Briefcase, Loader2, AlertCircle, Text as LucideText } from 'lucide-react';
import { ClienteRequestDto, ClienteResponseDto } from '@/types/cliente';
import { ClienteService } from '@/utils/api';

const cleanMaskedValue = (value: string): string => value.replace(/\D/g, '');

export default function AlterarClientePage() {
    const params = useParams();
    const router = useRouter();
    const id = typeof params.id === 'string' ? parseInt(params.id, 10) : null;

    const [formData, setFormData] = useState<ClienteRequestDto>({
        sexo: 'M', nome: '', sobrenome: '', dataNascimento: '', cpf: '',
        profissao: '', estadoCivil: 'Solteiro',
        enderecoRequestDto: { cep: '', numero: 0, complemento: '', observacao: '' },
        contatoRequestDto: { email: '', ddd: 0, ddi: 0, telefone1: '', celular: '' },
    });

    const [tipoDocumentoDisplay, setTipoDocumentoDisplay] = useState("CPF");
    const [logradouroApi, setLogradouroApi] = useState('');
    const [bairroApi, setBairroApi] = useState('');
    const [cidadeApi, setCidadeApi] = useState('');
    const [estadoApi, setEstadoApi] = useState('');
    const [paisApi, setPaisApi] = useState('Brasil');
    const [isLoading, setIsLoading] = useState(false);
    const [isFetching, setIsFetching] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const [success, setSuccess] = useState<string | null>(null);

    useEffect(() => {
        if (!id) {
            setError("ID do cliente não fornecido na URL.");
            setIsFetching(false); return;
        }
        const fetchData = async () => {
            setIsFetching(true); setError(null);
            try {
                const data: ClienteResponseDto = await ClienteService.getById(id);
                setFormData({
                    sexo: data.sexo || 'M', nome: data.nome || '', sobrenome: data.sobrenome || '',
                    dataNascimento: data.dataNascimento ? data.dataNascimento.split('T')[0] : '',
                    cpf: data.cpf || '', profissao: data.profissao || '',
                    estadoCivil: data.estadoCivil as ClienteRequestDto['estadoCivil'] || 'Solteiro',
                    enderecoRequestDto: {
                        idEndereco: data.enderecoResponseDto?.idEndereco, cep: data.enderecoResponseDto?.cep || '',
                        numero: data.enderecoResponseDto?.numero || 0, complemento: data.enderecoResponseDto?.complemento || '',
                        observacao: data.enderecoResponseDto?.observacao || '',
                    },
                    contatoRequestDto: {
                        idContato: data.contatoResponseDto?.idContato, email: data.contatoResponseDto?.email || '',
                        ddd: data.contatoResponseDto?.ddd || 0, ddi: data.contatoResponseDto?.ddi || 0,
                        telefone1: data.contatoResponseDto?.telefone1 || '', celular: data.contatoResponseDto?.celular || '',
                    },
                });

                setTipoDocumentoDisplay(data.cpf?.length === 11 ? "CPF" : "CNPJ");

                setLogradouroApi(data.enderecoResponseDto?.logradouro || ''); setBairroApi(data.enderecoResponseDto?.bairro || '');
                setCidadeApi(data.enderecoResponseDto?.cidade || ''); setEstadoApi(data.enderecoResponseDto?.estado || '');
                setPaisApi(data.enderecoResponseDto?.pais || 'Brasil');
            } catch (err: any) {
                setError(err.response?.data?.message || err.message || "Falha ao carregar dados para edição.");
            } finally {
                setIsFetching(false);
            }
        };
        fetchData();
    }, [id]);

    const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
        const { name, value } = e.target;
        if (name.includes('.')) {
            const [parent, child] = name.split('.');
            setFormData(prev => ({ ...prev, [parent as keyof ClienteRequestDto]: { ...((prev[parent as keyof ClienteRequestDto] as object) || {}), [child]: value } }));
        } else {
            setFormData(prev => ({ ...prev, [name as keyof ClienteRequestDto]: value }));
        }
    };

    const fetchCepDetails = async (cepValue: string) => {
        const cleanCep = cepValue.replace(/\D/g, '');
        if (cleanCep.length === 8) {
            setError(null);
            try {
                const response = await fetch(`https://viacep.com.br/ws/${cleanCep}/json/`);
                if (!response.ok) throw new Error(`Erro ao buscar CEP: ${response.statusText}`);
                const data = await response.json();
                if (data.erro) throw new Error("CEP não encontrado ou inválido.");
                setLogradouroApi(data.logradouro || '');
                setBairroApi(data.bairro || '');
                setCidadeApi(data.localidade || '');
                setEstadoApi(data.uf || '');
                setPaisApi('Brasil');
            } catch (err: any) {
                setError(`Erro ViaCEP: ${err.message}`);
            }
        }
    };

    const handleCepChange = (value: string) => {
        setFormData(prev => ({ ...prev, enderecoRequestDto: { ...prev.enderecoRequestDto, cep: value } }));
        fetchCepDetails(value);
    };

    const handleSubmit = async (e: FormEvent<HTMLFormElement>) => {
        e.preventDefault();
        if (id === null) { setError("ID do cliente inválido para salvar."); return; }

        setIsLoading(true); setError(null); setSuccess(null);

        const clienteDataToSend: ClienteRequestDto = {
            ...formData,
            cpf: cleanMaskedValue(formData.cpf),
            contatoRequestDto: {
                ...formData.contatoRequestDto,
                celular: cleanMaskedValue(formData.contatoRequestDto.celular),
                ddd: parseInt(formData.contatoRequestDto.ddd.toString(), 10) || 0,
                ddi: parseInt(formData.contatoRequestDto.ddi.toString(), 10) || 0,
            },
            enderecoRequestDto: {
                ...formData.enderecoRequestDto,
                cep: cleanMaskedValue(formData.enderecoRequestDto.cep),
                numero: parseInt(formData.enderecoRequestDto.numero.toString(), 10) || 0,
            }
        };

        try {
            const updatedCliente: ClienteResponseDto = await ClienteService.update(id, clienteDataToSend);
            setSuccess(`✅ Cliente "${updatedCliente.nome} ${updatedCliente.sobrenome}" atualizado com sucesso!`);
            setTimeout(() => { setSuccess(null); router.push('/clientes/listar'); }, 3000);
        } catch (err: any) {
            setError(`❌ ${err.response?.data?.message || err.message || 'Falha ao salvar alterações.'}`);
        } finally {
            setIsLoading(false);
        }
    };

    const cpfMask = "000.000.000-00";
    const cnpjMask = "00.000.000/0000-00";

    if (isFetching) return (
        <>
            <NavBar active="clientes" />
            <main className="flex justify-center items-center min-h-screen bg-black"><Loader2 className="h-12 w-12 animate-spin text-[var(--color-mottu-light)]" /></main>
        </>
    );

    return (
        <>
            <NavBar active="clientes" />
            <main className="flex items-center justify-center min-h-screen bg-black text-white px-4 py-10">
                <div className="bg-[var(--color-mottu-default)] p-6 md:p-8 m-4 rounded-lg shadow-xl w-full max-w-4xl">
                    <h2 className="text-2xl md:text-3xl font-bold mb-6 text-center flex items-center justify-center text-white">
                        <MdEdit className="inline-block mr-2 text-3xl" /> Alterar Cliente (ID: {id})
                    </h2>

                    {/* --- BLOCO DE MENSAGENS REMOVIDO DAQUI --- */}

                    <form onSubmit={handleSubmit}>
                        <fieldset className="mb-6 border border-[var(--color-mottu-light)]/40 p-4 rounded">
                            <legend className="text-xl font-semibold mb-2 px-2 text-white">Dados Pessoais</legend>
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                <div className="group"><label htmlFor="nome" className="block mb-1 flex items-center gap-1 text-white"><User size={16} /> Nome: <span className="text-red-300">*</span></label><input id="nome" type="text" name="nome" value={formData.nome} onChange={handleChange} required maxLength={100} className="peer w-full p-2 rounded bg-white text-slate-900 border border-gray-300 focus:ring-sky-500 h-10 required:invalid:border-red-500" /></div>
                                <div className="group"><label htmlFor="sobrenome" className="block mb-1 flex items-center gap-1 text-white"><User size={16} /> Sobrenome: <span className="text-red-300">*</span></label><input id="sobrenome" type="text" name="sobrenome" value={formData.sobrenome} onChange={handleChange} required maxLength={100} className="peer w-full p-2 rounded bg-white text-slate-900 border border-gray-300 focus:ring-sky-500 h-10 required:invalid:border-red-500" /></div>
                                <div><label htmlFor="sexo" className="block mb-1 flex items-center gap-1 text-white"><MdInfo size={16} /> Sexo:</label><select id="sexo" name="sexo" value={formData.sexo} onChange={handleChange} required className="w-full p-2 rounded bg-white text-slate-900 border border-gray-300 focus:ring-sky-500 h-10"><option value="M">Masculino</option><option value="F">Feminino</option></select></div>
                                <div className="group"><label htmlFor="dataNascimento" className="block mb-1 flex items-center gap-1 text-white"><Calendar size={16} /> Nascimento: <span className="text-red-300">*</span></label><input type="date" id="dataNascimento" name="dataNascimento" value={formData.dataNascimento} onChange={handleChange} required className="peer w-full p-2 rounded bg-white text-slate-900 border border-gray-300 focus:ring-sky-500 date-input-fix h-10" /></div>
                                <div><label htmlFor="tipoDocumentoDisplay" className="block mb-1 flex items-center gap-1 text-white"><MdBadge size={16} /> Documento:</label><select id="tipoDocumentoDisplay" name="tipoDocumentoDisplay" value={tipoDocumentoDisplay} onChange={e => { setTipoDocumentoDisplay(e.target.value); setFormData(prev => ({ ...prev, cpf: '' })); }} required className="w-full p-2 rounded bg-white text-slate-900 border border-gray-300 focus:ring-sky-500 h-10"><option value="CPF">CPF</option><option value="CNPJ">CNPJ</option></select></div>
                                <div className="group"><label htmlFor="cpf" className="block mb-1 flex items-center gap-1 text-white"><MdBadge size={16} /> Número:</label><IMaskInput id="cpf" name="cpf" mask={tipoDocumentoDisplay === 'CPF' ? cpfMask : cnpjMask} unmask={false} value={formData.cpf} onAccept={(value: string) => setFormData(prev => ({ ...prev, cpf: value }))} required placeholder={tipoDocumentoDisplay === 'CPF' ? '000.000.000-00' : '00.000.000/0000-00'} className="peer w-full p-2 rounded bg-white text-slate-900 border border-gray-300 focus:ring-sky-500 h-10 required:invalid:border-red-500" /></div>
                                <div className="group"><label htmlFor="profissao" className="block mb-1 flex items-center gap-1 text-white"><Briefcase size={16} /> Profissão: <span className="text-red-300">*</span></label><input type="text" id="profissao" name="profissao" value={formData.profissao} onChange={handleChange} required maxLength={50} className="peer w-full p-2 rounded bg-white text-slate-900 border border-gray-300 focus:ring-sky-500 h-10 required:invalid:border-red-500" /></div>
                                <div><label htmlFor="estadoCivil" className="block mb-1 flex items-center gap-1 text-white"><MdInfo size={16} /> Estado Civil:</label><select id="estadoCivil" name="estadoCivil" value={formData.estadoCivil} onChange={handleChange} required className="w-full p-2 rounded bg-white text-slate-900 border border-gray-300 focus:ring-sky-500 h-10"><option value="Solteiro">Solteiro</option><option value="Casado">Casado</option><option value="Divorciado">Divorciado</option><option value="Viúvo">Viúvo</option><option value="Separado">Separado</option><option value="União Estável">União Estável</option></select></div>
                            </div>
                        </fieldset>

                        <fieldset className="mb-6 border border-[var(--color-mottu-light)]/40 p-4 rounded">
                            <legend className="text-xl font-semibold mb-2 px-2 text-white">Endereço e Contato</legend>
                            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                                <div className="group lg:col-span-1"><label htmlFor="cep" className="block mb-1 flex items-center gap-1 text-white"><MapPin size={16} /> CEP: <span className="text-red-300">*</span></label><IMaskInput id="cep" name="enderecoRequestDto.cep" mask="00000-000" unmask={false} value={formData.enderecoRequestDto.cep} onAccept={handleCepChange} required placeholder="00000-000" className="peer w-full p-2 rounded bg-white text-slate-900 border border-gray-300 focus:ring-sky-500 h-10 required:invalid:border-red-500" /></div>
                                <div className="group lg:col-span-1"><label htmlFor="numero" className="block mb-1 flex items-center gap-1 text-white"><MdHome size={16} /> Número: <span className="text-red-300">*</span></label><input type="number" id="numero" name="enderecoRequestDto.numero" value={formData.enderecoRequestDto.numero === 0 ? '' : formData.enderecoRequestDto.numero} onChange={handleChange} required min={1} max={9999999} placeholder="123" className="peer w-full p-2 rounded bg-white text-slate-900 border border-gray-300 focus:ring-sky-500 h-10 required:invalid:border-red-500" /></div>
                                <div className="lg:col-span-1"><label htmlFor="complemento" className="block mb-1 flex items-center gap-1 text-white"><MdHome size={16} /> Complemento:</label><input type="text" id="complemento" name="enderecoRequestDto.complemento" value={formData.enderecoRequestDto.complemento || ''} onChange={handleChange} maxLength={60} placeholder="Apto, bloco, etc. (Opcional)" className="w-full p-2 rounded bg-white text-slate-900 border border-gray-300 focus:ring-sky-500 h-10" /></div>
                                <div className="md:col-span-2 lg:col-span-3 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mt-2 border-t border-slate-700/50 pt-4">
                                    <div className="lg:col-span-2"><label className="block mb-1 text-white text-sm">Logradouro:</label><input type="text" value={logradouroApi} readOnly className="w-full p-2 rounded bg-gray-100 text-gray-700 border border-gray-300 cursor-not-allowed h-10" /></div>
                                    <div className="lg:col-span-1"><label className="block mb-1 text-white text-sm">Bairro:</label><input type="text" value={bairroApi} readOnly className="w-full p-2 rounded bg-gray-100 text-gray-700 border border-gray-300 cursor-not-allowed h-10" /></div>
                                    <div className="lg:col-span-1"><label className="block mb-1 text-white text-sm">Cidade:</label><input type="text" value={cidadeApi} readOnly className="w-full p-2 rounded bg-gray-100 text-gray-700 border border-gray-300 cursor-not-allowed h-10" /></div>
                                    <div className="lg:col-span-1"><label className="block mb-1 text-white text-sm">Estado (UF):</label><input type="text" value={estadoApi} readOnly className="w-full p-2 rounded bg-gray-100 text-gray-700 border border-gray-300 cursor-not-allowed h-10" /></div>
                                </div>
                                <div className="md:col-span-2 lg:col-span-3 grid grid-cols-1 md:grid-cols-2 gap-4 mt-4 border-t border-slate-700/50 pt-4">
                                    <div className="group"><label htmlFor="celular" className="block mb-1 flex items-center gap-1 text-white"><MdPhone size={16} /> Celular: <span className="text-red-300">*</span></label><IMaskInput id="celular" name="contatoRequestDto.celular" mask="(00) 00000-0000" unmask={false} value={formData.contatoRequestDto.celular} onAccept={(value: string) => setFormData(prev => ({ ...prev, contatoRequestDto: { ...prev.contatoRequestDto, celular: value } }))} required className="peer w-full p-2 rounded bg-white text-slate-900 border border-gray-300 focus:ring-sky-500 h-10 required:invalid:border-red-500" /></div>
                                    <div className="group"><label htmlFor="email" className="block mb-1 flex items-center gap-1 text-white"><Mail size={16} /> E-mail: <span className="text-red-300">*</span></label><input type="email" id="email" name="contatoRequestDto.email" value={formData.contatoRequestDto.email} onChange={handleChange} required className="peer w-full p-2 rounded bg-white text-slate-900 border border-gray-300 focus:ring-sky-500 h-10 required:invalid:border-red-500" /></div>
                                </div>
                            </div>
                        </fieldset>

                        {/* --- CORREÇÃO: Bloco de mensagens movido para cá, para aparecer perto dos botões --- */}
                        <div className="h-12 my-4"> {/* Container para mensagens para evitar que o layout "pule" */}
                            {error && (
                                <div className="relative text-red-200 bg-red-700/80 p-4 rounded border border-red-500" role="alert">
                                    <span className="block sm:inline">{error}</span>
                                    <button type="button" className="absolute top-0 bottom-0 right-0 px-4 py-3 text-red-200 hover:text-red-100" onClick={() => setError(null)} aria-label="Fechar"><span className="text-2xl">&times;</span></button>
                                </div>
                            )}
                            {success && (
                                <div className="flex items-center justify-center gap-2 text-[var(--color-mottu-dark)] p-3 rounded bg-white/90 border border-[var(--color-mottu-dark)]">
                                    <MdCheckCircle className="text-xl" /> <span>{success}</span>
                                </div>
                            )}
                        </div>

                        <div className="flex flex-col sm:flex-row items-center justify-center gap-4 pt-4">
                            <button type="submit" className="flex items-center justify-center gap-2 px-6 py-3 font-semibold text-white bg-[var(--color-mottu-dark)] rounded-md shadow hover:bg-opacity-80 transition-colors duration-200 disabled:opacity-50" disabled={isLoading || isFetching || !!success}><MdSave size={20} /> {isLoading ? 'Salvando...' : 'Salvar Alterações'}</button>
                            <Link href="/clientes/listar" className="flex items-center justify-center gap-2 px-6 py-3 font-semibold text-[var(--color-mottu-dark)] bg-white rounded-md shadow hover:bg-gray-100"><MdArrowBack size={20} /> Voltar para Lista</Link>
                        </div>
                    </form>
                </div>
            </main>
            <style jsx global>{`
                .date-input-fix::-webkit-calendar-picker-indicator { cursor: pointer; }
                input[type="date"]:required:invalid::-webkit-datetime-edit { color: transparent; }
                input[type="date"]:focus::-webkit-datetime-edit { color: #1e293b !important; }
                input[type="date"]::-webkit-datetime-edit { color: #1e293b; }
            `}</style>
        </>
    );
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PASTA: src\app\clientes\buscar
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// ARQUIVO: src\app\clientes\buscar\page.tsx   |   TIPO: Componente React (.tsx)
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// src/app/clientes/buscar/page.tsx
"use client";
import { useState, FormEvent, ChangeEvent } from 'react';
import Link from 'next/link';
import NavBar from '@/components/nav-bar';
import { MdSearch, MdClear, MdEdit, MdDelete, MdVisibility, MdErrorOutline, MdCheckCircle } from 'react-icons/md';
import { Search as SearchIconLucide } from 'lucide-react';
import { IMaskInput } from 'react-imask';
import { ClienteResponseDto, ClienteFilter } from '@/types/cliente';
import { SpringPage } from '@/types/common';
import { ClienteService } from '@/utils/api';

const initialFilterState: ClienteFilter = {
    nome: '', sobrenome: '', cpf: '', sexo: undefined, profissao: '', estadoCivil: undefined,
    dataCadastroInicio: '', dataCadastroFim: '', dataNascimentoInicio: '', dataNascimentoFim: '',
    enderecoCidade: '', enderecoEstado: '', contatoEmail: '', contatoCelular: '',
    veiculoPlaca: '', veiculoModelo: '',
};

export default function BuscarClientesPage() {
    const [clientes, setClientes] = useState<ClienteResponseDto[]>([]);
    const [pageInfo, setPageInfo] = useState<SpringPage<ClienteResponseDto> | null>(null);
    const [currentPage, setCurrentPage] = useState(0);
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const [successMessage, setSuccessMessage] = useState<string | null>(null);
    const [hasSearched, setHasSearched] = useState(false);
    const [filter, setFilter] = useState<ClienteFilter>(initialFilterState);

    const ITEMS_PER_PAGE = 9;
    const SORT_ORDER = 'idCliente,asc';

    const fetchData = async (pageToFetch = 0, currentFilters = filter) => {
        setIsLoading(true);
        setError(null);
        setHasSearched(true);

        if (pageToFetch === 0) {
            setClientes([]);
            setPageInfo(null);
        }

        const cleanedCpf = currentFilters.cpf ? currentFilters.cpf.replace(/\D/g, '') : undefined;
        const cleanedCelular = currentFilters.contatoCelular ? currentFilters.contatoCelular.replace(/\D/g, '') : undefined;

        const filtersToSubmit = {
            ...currentFilters,
            cpf: cleanedCpf,
            contatoCelular: cleanedCelular,
        };

        try {
            const data = await ClienteService.listarPaginadoFiltrado(filtersToSubmit, pageToFetch, ITEMS_PER_PAGE, SORT_ORDER);
            setClientes(data.content);
            setPageInfo(data);
            setCurrentPage(data.number);
        } catch (err: any) {
            setError(err.response?.data?.message || err.message || 'Erro ao buscar clientes.');
            setClientes([]);
            setPageInfo(null);
        } finally {
            setIsLoading(false);
        }
    };

    const handleFilterChange = (e: ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
        setFilter(prev => ({ ...prev, [e.target.name]: e.target.value === "" ? undefined : e.target.value }));
    };

    const handleMaskedFilterChange = (name: keyof ClienteFilter, value: string) => {
        setFilter(prev => ({ ...prev, [name]: value }));
    };

    const handleSearch = (e: FormEvent) => {
        e.preventDefault();
        setCurrentPage(0);
        fetchData(0, filter);
    };

    const handleClearFilters = () => {
        setFilter(initialFilterState);
        setClientes([]);
        setPageInfo(null);
        setCurrentPage(0);
        setHasSearched(false);
        setError(null);
    };

    const handlePageChange = (newPage: number) => {
        fetchData(newPage, filter);
    };

    return (
        <>
            <NavBar active="clientes" />
            <main className="min-h-screen bg-black text-white p-4 md:p-8">
                <div className="container mx-auto bg-[var(--color-mottu-default)] p-6 md:p-8 rounded-lg shadow-xl">
                    <h1 className="flex items-center justify-center gap-2 text-2xl md:text-3xl font-bold mb-6 text-center text-white">
                        <SearchIconLucide size={30} /> Buscar Clientes
                    </h1>

                    <form onSubmit={handleSearch} className="mb-8 p-4 bg-black/20 rounded-lg">
                        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4 items-end">
                            {/* Linha 1 */}
                            <input type="text" name="nome" value={filter.nome || ''} onChange={handleFilterChange} className="w-full p-2 h-10 rounded bg-white text-slate-900" placeholder="Nome" />
                            <input type="text" name="sobrenome" value={filter.sobrenome || ''} onChange={handleFilterChange} className="w-full p-2 h-10 rounded bg-white text-slate-900" placeholder="Sobrenome" />
                            <IMaskInput mask="000.000.000-00" name="cpf" value={filter.cpf || ''} onAccept={(value) => handleMaskedFilterChange('cpf', value)} className="w-full p-2 h-10 rounded bg-white text-slate-900" placeholder="CPF" />
                            <input type="email" name="contatoEmail" value={filter.contatoEmail || ''} onChange={handleFilterChange} className="w-full p-2 h-10 rounded bg-white text-slate-900" placeholder="Email do contato" />

                            {/* Linha 2 */}
                            <input type="text" name="enderecoCidade" value={filter.enderecoCidade || ''} onChange={handleFilterChange} className="w-full p-2 h-10 rounded bg-white text-slate-900" placeholder="Cidade" />
                            <input type="text" name="enderecoEstado" value={filter.enderecoEstado || ''} onChange={handleFilterChange} className="w-full p-2 h-10 rounded bg-white text-slate-900" placeholder="Estado (UF)" maxLength={2}/>
                            <input type="text" name="veiculoPlaca" value={filter.veiculoPlaca || ''} onChange={handleFilterChange} className="w-full p-2 h-10 rounded bg-white text-slate-900" placeholder="Placa do Veículo" />
                            <input type="text" name="veiculoModelo" value={filter.veiculoModelo || ''} onChange={handleFilterChange} className="w-full p-2 h-10 rounded bg-white text-slate-900" placeholder="Modelo do Veículo" />

                            <div className="lg:col-span-4 flex flex-col sm:flex-row justify-center items-center gap-3 pt-4">
                                <button type="submit" className="w-full sm:w-auto flex items-center justify-center gap-2 px-6 py-2.5 font-semibold text-white bg-[var(--color-mottu-dark)] rounded-md shadow hover:bg-opacity-80 h-10">
                                    <MdSearch size={20} /> Buscar Clientes
                                </button>
                                <button type="button" onClick={handleClearFilters} className="w-full sm:w-auto flex items-center justify-center gap-2 px-6 py-2.5 font-medium text-slate-700 bg-gray-200 rounded-md shadow hover:bg-gray-300 h-10">
                                    <MdClear size={20} /> Limpar Filtros
                                </button>
                            </div>
                        </div>
                    </form>

                    {isLoading && <p className="text-center text-slate-100 py-10">Buscando...</p>}
                    {error && <div className="text-center text-red-400 p-4 bg-red-900/50 rounded-md">{error}</div>}

                    {!isLoading && hasSearched && clientes.length === 0 && !error && (
                        <div className="text-center py-10"><p className="text-slate-300">Nenhum cliente encontrado.</p></div>
                    )}

                    {!isLoading && clientes.length > 0 && (
                        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
                            {clientes.map((cliente) => (
                                <div key={cliente.idCliente} className="bg-white text-slate-800 rounded-lg shadow-lg p-5 flex flex-col justify-between transition-all hover:shadow-2xl hover:scale-105">
                                    <div>
                                        <div className="flex items-center mb-3">
                                            <span className="text-xs font-semibold bg-slate-200 text-slate-700 px-2 py-0.5 rounded-full mr-2">ID: {cliente.idCliente}</span>
                                            <h2 className="text-xl font-bold text-[var(--color-mottu-dark)] truncate">{cliente.nome} {cliente.sobrenome}</h2>
                                        </div>
                                        <p className="text-sm text-slate-600 truncate">CPF: {cliente.cpf}</p>
                                        <p className="text-sm text-slate-600 truncate">Email: {cliente.contatoResponseDto?.email || '-'}</p>
                                    </div>
                                    <div className="flex justify-end items-center gap-2 border-t border-slate-200 pt-3 mt-4">
                                        <Link href={`/clientes/detalhes/${cliente.idCliente}`} className="p-2 rounded-full text-blue-600 hover:bg-blue-100" title="Ver Detalhes"><MdVisibility size={22}/></Link>
                                        <Link href={`/clientes/alterar/${cliente.idCliente}`} className="p-2 rounded-full text-yellow-500 hover:bg-yellow-100" title="Editar Cliente"><MdEdit size={20}/></Link>
                                        <Link href={`/clientes/deletar/${cliente.idCliente}`} className="p-2 rounded-full text-red-500 hover:bg-red-100" title="Excluir Cliente"><MdDelete size={20}/></Link>
                                    </div>
                                </div>
                            ))}
                        </div>
                    )}
                </div>
            </main>
        </>
    );
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PASTA: src\app\clientes\cadastrar
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// ARQUIVO: src\app\clientes\cadastrar\page.tsx   |   TIPO: Componente React (.tsx)
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// src/app/clientes/cadastrar/page.tsx
"use client";
import { useState, FormEvent } from 'react';
import Link from 'next/link';
import NavBar from '@/components/nav-bar';
import { IMaskInput } from 'react-imask';
import { MdPersonAddAlt1, MdSave, MdArrowBack, MdErrorOutline, MdCheckCircle, MdInfo, MdBadge, MdPhone, MdHome } from 'react-icons/md';
import { User, Mail, MapPin, Calendar, Briefcase, Text as LucideText } from 'lucide-react';
import { ClienteRequestDto } from '@/types/cliente';
import { ClienteService } from '@/utils/api';

const cleanMaskedValue = (value: string): string => value.replace(/\D/g, '');

export default function CadastrarClientePage() {
    const initialState: ClienteRequestDto = {
        nome: "", sobrenome: "", sexo: "M", dataNascimento: "", cpf: "",
        profissao: "", estadoCivil: "Solteiro",
        enderecoRequestDto: { cep: "", numero: 0, complemento: "", observacao: "" },
        contatoRequestDto: {
            email: "", ddd: 0, ddi: 55, telefone1: "",
            telefone2: "", telefone3: "", celular: "",
            outro: "", observacao: "",
        },
    };

    const [formData, setFormData] = useState<ClienteRequestDto>(initialState);
    const [tipoDocumentoDisplay, setTipoDocumentoDisplay] = useState("CPF");
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const [success, setSuccess] = useState<string | null>(null);
    const [logradouroViaCep, setLogradouroViaCep] = useState('');
    const [bairroViaCep, setBairroViaCep] = useState('');
    const [cidadeViaCep, setCidadeViaCep] = useState('');
    const [estadoViaCep, setEstadoViaCep] = useState('');
    const [paisViaCep, setPaisViaCep] = useState('Brasil');

    const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
        const { name, value } = e.target;
        if (name.includes('.')) {
            const [parent, child] = name.split('.');
            setFormData(prev => ({
                ...prev,
                [parent as keyof ClienteRequestDto]: {
                    ...(prev[parent as keyof ClienteRequestDto] as object || {}),
                    [child]: value
                }
            }));
        } else {
            setFormData(prev => ({ ...prev, [name as keyof ClienteRequestDto]: value }));
        }
    };

    const resetForm = () => {
        setFormData({ ...initialState });
        setTipoDocumentoDisplay("CPF");
        setError(null);
        setLogradouroViaCep(''); setBairroViaCep(''); setCidadeViaCep(''); setEstadoViaCep(''); setPaisViaCep('Brasil');
    };

    const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {
        event.preventDefault();
        setIsLoading(true);
        setError(null);
        setSuccess(null);

        const clienteDataToSend: ClienteRequestDto = {
            ...formData,
            cpf: cleanMaskedValue(formData.cpf),
            contatoRequestDto: {
                ...formData.contatoRequestDto,
                celular: cleanMaskedValue(formData.contatoRequestDto.celular),
                ddd: parseInt(formData.contatoRequestDto.ddd.toString(), 10) || 0,
                ddi: parseInt(formData.contatoRequestDto.ddi.toString(), 10) || 0,
            },
            enderecoRequestDto: {
                ...formData.enderecoRequestDto,
                cep: cleanMaskedValue(formData.enderecoRequestDto.cep),
                numero: parseInt(formData.enderecoRequestDto.numero.toString(), 10) || 0,
            }
        };

        try {
            const response = await ClienteService.create(clienteDataToSend);
            setSuccess(`✅ Cliente "${response.nome} ${response.sobrenome}" (ID: ${response.idCliente}) cadastrado com sucesso!`);
            resetForm();
            setTimeout(() => setSuccess(null), 3000);
        } catch (err: any) {
            setError(`❌ ${err.response?.data?.message || err.message || 'Falha ao cadastrar cliente.'}`);
        } finally {
            setIsLoading(false);
        }
    };

    const fetchCepDetails = async (cepValue: string) => {
        const cleanCep = cepValue.replace(/\D/g, '');
        if (cleanCep.length === 8) {
            setError(null);
            try {
                const response = await fetch(`https://viacep.com.br/ws/${cleanCep}/json/`);
                if (!response.ok) throw new Error(`Erro ao buscar CEP: ${response.statusText}`);
                const data = await response.json();
                if (data.erro) throw new Error("CEP não encontrado ou inválido.");
                setLogradouroViaCep(data.logradouro || '');
                setBairroViaCep(data.bairro || '');
                setCidadeViaCep(data.localidade || '');
                setEstadoViaCep(data.uf || '');
                setPaisViaCep('Brasil');
            } catch (err: any) {
                setError(`Erro ViaCEP: ${err.message}`);
                setLogradouroViaCep(''); setBairroViaCep(''); setCidadeViaCep(''); setEstadoViaCep(''); setPaisViaCep('Brasil');
            }
        }
    };

    const handleCepChange = (value: string) => {
        setFormData(prev => ({ ...prev, enderecoRequestDto: { ...prev.enderecoRequestDto, cep: value } }));
        fetchCepDetails(value);
    };

    const cpfMask = "000.000.000-00";
    const cnpjMask = "00.000.000/0000-00";

    return (
        <>
            <NavBar active="clientes-cadastrar" />
            <main className="flex items-center justify-center min-h-screen bg-black text-white px-4 py-10">
                <div className="bg-[var(--color-mottu-default)] p-6 md:p-8 m-4 rounded-lg shadow-xl w-full max-w-4xl">
                    <h2 className="text-2xl md:text-3xl font-bold mb-6 text-center flex items-center justify-center text-white">
                        <MdPersonAddAlt1 className="inline-block mr-2 text-3xl" />
                        Cadastrar Cliente
                    </h2>

                    {/* --- BLOCO DE MENSAGENS REMOVIDO DAQUI --- */}

                    <form onSubmit={handleSubmit}>
                        <fieldset className="mb-6 border border-[var(--color-mottu-light)]/40 p-4 rounded">
                            <legend className="text-xl font-semibold mb-2 px-2 text-white">Dados Pessoais</legend>
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                <div className="group"><label htmlFor="nome" className="block mb-1 flex items-center gap-1 text-white"><User size={16} /> Nome: <span className="text-red-300">*</span></label><input id="nome" type="text" name="nome" value={formData.nome} onChange={handleChange} required maxLength={100} placeholder="Ex: João" className="peer w-full p-2 rounded bg-white text-slate-900 border border-gray-300 focus:ring-sky-500 h-10 placeholder:text-gray-400 required:invalid:border-red-500" /><p className="mt-1 text-xs text-slate-300 invisible peer-invalid:visible">Campo obrigatório.</p></div>
                                <div className="group"><label htmlFor="sobrenome" className="block mb-1 flex items-center gap-1 text-white"><User size={16} /> Sobrenome: <span className="text-red-300">*</span></label><input id="sobrenome" type="text" name="sobrenome" value={formData.sobrenome} onChange={handleChange} required maxLength={100} placeholder="Ex: da Silva" className="peer w-full p-2 rounded bg-white text-slate-900 border border-gray-300 focus:ring-sky-500 h-10 placeholder:text-gray-400 required:invalid:border-red-500" /><p className="mt-1 text-xs text-slate-300 invisible peer-invalid:visible">Campo obrigatório.</p></div>
                                <div><label htmlFor="sexo" className="block mb-1 flex items-center gap-1 text-white"><MdInfo size={16} /> Sexo:</label><select id="sexo" name="sexo" value={formData.sexo} onChange={handleChange} required className="w-full p-2 rounded bg-white text-slate-900 border border-gray-300 focus:ring-sky-500 h-10"><option value="M">Masculino</option><option value="H">Feminino</option></select></div>
                                <div className="group"><label htmlFor="dataNascimento" className="block mb-1 flex items-center gap-1 text-white"><Calendar size={16} /> Nascimento: <span className="text-red-300">*</span></label><input type="date" id="dataNascimento" name="dataNascimento" value={formData.dataNascimento} onChange={handleChange} required className="peer w-full p-2 rounded bg-white text-slate-900 border border-gray-300 focus:ring-sky-500 date-input-fix h-10" /><p className="mt-1 text-xs text-slate-300 invisible peer-invalid:visible">Campo obrigatório.</p></div>
                                <div><label htmlFor="tipoDocumentoDisplay" className="block mb-1 flex items-center gap-1 text-white"><MdBadge size={16} /> Documento:</label><select id="tipoDocumentoDisplay" name="tipoDocumentoDisplay" value={tipoDocumentoDisplay} onChange={e => { setTipoDocumentoDisplay(e.target.value); setFormData(prev => ({ ...prev, cpf: '' })); }} required className="w-full p-2 rounded bg-white text-slate-900 border border-gray-300 focus:ring-sky-500 h-10"><option value="CPF">CPF</option><option value="CNPJ">CNPJ</option></select></div>
                                <div className="group"><label htmlFor="cpf" className="block mb-1 flex items-center gap-1 text-white"><MdBadge size={16} /> Número:</label><IMaskInput id="cpf" name="cpf" mask={tipoDocumentoDisplay === 'CPF' ? cpfMask : cnpjMask} unmask={false} value={formData.cpf} onAccept={(value: string) => setFormData(prev => ({ ...prev, cpf: value }))} required placeholder={tipoDocumentoDisplay === 'CPF' ? '000.000.000-00' : '00.000.000/0000-00'} className="peer w-full p-2 rounded bg-white text-slate-900 border border-gray-300 focus:ring-sky-500 h-10 placeholder:text-gray-400 required:invalid:border-red-500" /><p className="mt-1 text-xs text-slate-300 invisible peer-invalid:visible">Campo obrigatório.</p></div>
                                <div className="group"><label htmlFor="profissao" className="block mb-1 flex items-center gap-1 text-white"><Briefcase size={16} /> Profissão: <span className="text-red-300">*</span></label><input type="text" id="profissao" name="profissao" value={formData.profissao} onChange={handleChange} required maxLength={50} placeholder="Ex: Desenvolvedor(a)" className="peer w-full p-2 rounded bg-white text-slate-900 border border-gray-300 focus:ring-sky-500 h-10 placeholder:text-gray-400 required:invalid:border-red-500" /><p className="mt-1 text-xs text-slate-300 invisible peer-invalid:visible">Campo obrigatório.</p></div>
                                <div><label htmlFor="estadoCivil" className="block mb-1 flex items-center gap-1 text-white"><MdInfo size={16} /> Estado Civil:</label><select id="estadoCivil" name="estadoCivil" value={formData.estadoCivil} onChange={handleChange} required className="w-full p-2 rounded bg-white text-slate-900 border border-gray-300 focus:ring-sky-500 h-10"><option value="Solteiro">Solteiro</option><option value="Casado">Casado</option><option value="Divorciado">Divorciado</option><option value="Viúvo">Viúvo</option><option value="Separado">Separado</option><option value="União Estável">União Estável</option></select></div>
                            </div>
                        </fieldset>

                        <fieldset className="mb-6 border border-[var(--color-mottu-light)]/40 p-4 rounded">
                            <legend className="text-xl font-semibold mb-2 px-2 text-white">Contatos</legend>
                            <div className="grid grid-cols-1 md:grid-cols-6 gap-4">
                                <div className="group md:col-span-4"><label htmlFor="email" className="block mb-1 flex items-center gap-1 text-white"><Mail size={16} /> E-mail: <span className="text-red-300">*</span></label><input type="email" id="email" name="contatoRequestDto.email" value={formData.contatoRequestDto.email} onChange={handleChange} required placeholder="exemplo@dominio.com" className="peer w-full p-2 rounded bg-white text-slate-900 border border-gray-300 focus:ring-sky-500 h-10 placeholder:text-gray-400 required:invalid:border-red-500" /></div>
                                <div className="group md:col-span-2"><label htmlFor="celular" className="block mb-1 flex items-center gap-1 text-white"><MdPhone size={16} /> Celular: <span className="text-red-300">*</span></label><IMaskInput id="celular" name="contatoRequestDto.celular" mask="(00) 00000-0000" unmask={false} value={formData.contatoRequestDto.celular} onAccept={(value: string) => setFormData(prev => ({ ...prev, contatoRequestDto: { ...prev.contatoRequestDto, celular: value } }))} required placeholder="(11) 98765-4321" className="peer w-full p-2 rounded bg-white text-slate-900 border border-gray-300 focus:ring-sky-500 h-10 placeholder:text-gray-400 required:invalid:border-red-500" /></div>
                                <div className="group md:col-span-1"><label htmlFor="ddi" className="block mb-1 flex items-center gap-1 text-white"><MdPhone size={16} /> DDI: <span className="text-red-300">*</span></label><input type="number" id="ddi" name="contatoRequestDto.ddi" value={formData.contatoRequestDto.ddi === 0 ? '' : formData.contatoRequestDto.ddi} onChange={e => setFormData(prev => ({ ...prev, contatoRequestDto: { ...prev.contatoRequestDto, ddi: parseInt(e.target.value, 10) || 0 } }))} required min={1} max={999} placeholder="55" className="peer w-full p-2 rounded bg-white text-slate-900 border border-gray-300 focus:ring-sky-500 h-10 required:invalid:border-red-500" /></div>
                                <div className="group md:col-span-1"><label htmlFor="ddd" className="block mb-1 flex items-center gap-1 text-white"><MdPhone size={16} /> DDD: <span className="text-red-300">*</span></label><input type="number" id="ddd" name="contatoRequestDto.ddd" value={formData.contatoRequestDto.ddd === 0 ? '' : formData.contatoRequestDto.ddd} onChange={e => setFormData(prev => ({ ...prev, contatoRequestDto: { ...prev.contatoRequestDto, ddd: parseInt(e.target.value, 10) || 0 } }))} required min={11} max={99} placeholder="11" className="peer w-full p-2 rounded bg-white text-slate-900 border border-gray-300 focus:ring-sky-500 h-10 required:invalid:border-red-500" /></div>
                                <div className="group md:col-span-2"><label htmlFor="telefone1" className="block mb-1 flex items-center gap-1 text-white"><MdPhone size={16} /> Telefone Fixo: <span className="text-red-300">*</span></label><input type="text" id="telefone1" name="contatoRequestDto.telefone1" value={formData.contatoRequestDto.telefone1} onChange={handleChange} required placeholder="5555-4444" className="peer w-full p-2 rounded bg-white text-slate-900 border border-gray-300 focus:ring-sky-500 h-10 required:invalid:border-red-500" /></div>
                                <div className="md:col-span-2"><label htmlFor="telefone2" className="block mb-1 flex items-center gap-1 text-white"><MdPhone size={16} /> Telefone 2:</label><input type="text" id="telefone2" name="contatoRequestDto.telefone2" value={formData.contatoRequestDto.telefone2 || ''} onChange={handleChange} maxLength={20} placeholder="Opcional" className="w-full p-2 rounded bg-white text-slate-900 border border-gray-300 focus:ring-sky-500 h-10 placeholder:text-gray-400" /></div>
                                <div className="md:col-span-2"><label htmlFor="telefone3" className="block mb-1 flex items-center gap-1 text-white"><MdPhone size={16} /> Telefone 3:</label><input type="text" id="telefone3" name="contatoRequestDto.telefone3" value={formData.contatoRequestDto.telefone3 || ''} onChange={handleChange} maxLength={20} placeholder="Opcional" className="w-full p-2 rounded bg-white text-slate-900 border border-gray-300 focus:ring-sky-500 h-10 placeholder:text-gray-400" /></div>
                                <div className="md:col-span-6"><label htmlFor="outro" className="block mb-1 flex items-center gap-1 text-white"><MdInfo size={16} /> Outro Contato:</label><textarea id="outro" name="contatoRequestDto.outro" rows={2} value={formData.contatoRequestDto.outro || ''} onChange={handleChange} maxLength={100} placeholder="Rede social, recado, etc. (Opcional)" className="w-full p-2 rounded bg-white text-slate-900 border border-gray-300 focus:ring-sky-500 placeholder:text-gray-400" /></div>
                                <div className="md:col-span-6"><label htmlFor="observacaoContato" className="block mb-1 flex items-center gap-1 text-white"><LucideText size={16} /> Observação (Contato):</label><textarea id="observacaoContato" name="contatoRequestDto.observacao" rows={2} value={formData.contatoRequestDto.observacao || ''} onChange={handleChange} maxLength={200} placeholder="Observações sobre o contato (Opcional)" className="w-full p-2 rounded bg-white text-slate-900 border border-gray-300 focus:ring-sky-500 placeholder:text-gray-400" /></div>
                            </div>
                        </fieldset>

                        <fieldset className="mb-6 border border-[var(--color-mottu-light)]/40 p-4 rounded">
                            <legend className="text-xl font-semibold mb-2 px-2 text-white">Endereço</legend>
                            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                                <div className="group"><label htmlFor="cep" className="block mb-1 flex items-center gap-1 text-white"><MapPin size={16} /> CEP: <span className="text-red-300">*</span></label><IMaskInput id="cep" name="enderecoRequestDto.cep" mask="00000-000" unmask={false} value={formData.enderecoRequestDto.cep} onAccept={handleCepChange} required placeholder="00000-000" className="peer w-full p-2 rounded bg-white text-slate-900 border border-gray-300 focus:ring-sky-500 h-10 placeholder:text-gray-400 required:invalid:border-red-500" /><p className="mt-1 text-xs text-slate-300 invisible peer-invalid:visible">Campo obrigatório.</p></div>
                                <div className="group"><label htmlFor="numero" className="block mb-1 flex items-center gap-1 text-white"><MdHome size={16} /> Número: <span className="text-red-300">*</span></label><input type="number" id="numero" name="enderecoRequestDto.numero" value={formData.enderecoRequestDto.numero === 0 ? '' : formData.enderecoRequestDto.numero} onChange={e => setFormData(prev => ({ ...prev, enderecoRequestDto: { ...prev.enderecoRequestDto, numero: parseInt(e.target.value, 10) || 0 } }))} required min={1} max={9999999} placeholder="123" className="peer w-full p-2 rounded bg-white text-slate-900 border border-gray-300 focus:ring-sky-500 h-10 placeholder:text-gray-400 required:invalid:border-red-500" /><p className="mt-1 text-xs text-slate-300 invisible peer-invalid:visible">Campo obrigatório.</p></div>
                                <div><label htmlFor="complemento" className="block mb-1 flex items-center gap-1 text-white"><MdHome size={16} /> Complemento:</label><input type="text" id="complemento" name="enderecoRequestDto.complemento" value={formData.enderecoRequestDto.complemento || ''} onChange={handleChange} maxLength={60} placeholder="Apto, bloco, etc. (Opcional)" className="w-full p-2 rounded bg-white text-slate-900 border border-gray-300 focus:ring-sky-500 h-10 placeholder:text-gray-400" /></div>
                                <div className="md:col-span-2"><label className="block mb-1 text-white">Logradouro:</label><input type="text" value={logradouroViaCep} readOnly className="w-full p-2 rounded bg-gray-100 text-gray-700 border border-gray-300 cursor-not-allowed h-10" /></div>
                                <div><label className="block mb-1 text-white">Bairro:</label><input type="text" value={bairroViaCep} readOnly className="w-full p-2 rounded bg-gray-100 text-gray-700 border border-gray-300 cursor-not-allowed h-10" /></div>
                                <div><label className="block mb-1 text-white">Cidade:</label><input type="text" value={cidadeViaCep} readOnly className="w-full p-2 rounded bg-gray-100 text-gray-700 border border-gray-300 cursor-not-allowed h-10" /></div>
                                <div><label className="block mb-1 text-white">Estado (UF):</label><input type="text" value={estadoViaCep} readOnly className="w-full p-2 rounded bg-gray-100 text-gray-700 border border-gray-300 cursor-not-allowed h-10" /></div>
                                <div><label className="block mb-1 text-white">País:</label><input type="text" value={paisViaCep} readOnly className="w-full p-2 rounded bg-gray-100 text-gray-700 border border-gray-300 cursor-not-allowed h-10" /></div>
                                <div className="md:col-span-3"><label htmlFor="observacaoEndereco" className="block mb-1 flex items-center gap-1 text-white"><LucideText size={16} /> Observação (Endereço):</label><textarea id="observacaoEndereco" name="enderecoRequestDto.observacao" rows={2} value={formData.enderecoRequestDto.observacao || ''} onChange={handleChange} maxLength={200} placeholder="Ponto de referência (Opcional)" className="w-full p-2 rounded bg-white text-slate-900 border border-gray-300 focus:ring-sky-500 placeholder:text-gray-400" /></div>
                            </div>
                        </fieldset>

                        {/* --- CORREÇÃO: Bloco de mensagens movido para cá, para aparecer perto dos botões --- */}
                        <div className="h-12 my-4"> {/* Container para mensagens para evitar que o layout "pule" */}
                            {error && (
                                <div className="relative text-red-200 bg-red-700/80 p-4 rounded border border-red-500" role="alert">
                                    <span className="block sm:inline">{error}</span>
                                    <button type="button" className="absolute top-0 bottom-0 right-0 px-4 py-3 text-red-200 hover:text-red-100" onClick={() => setError(null)} aria-label="Fechar"><span className="text-2xl">&times;</span></button>
                                </div>
                            )}
                            {success && (
                                <div className="flex items-center justify-center gap-2 text-[var(--color-mottu-dark)] p-3 rounded bg-white/90 border border-[var(--color-mottu-dark)]"><MdCheckCircle className="text-xl" /> <span>{success}</span></div>
                            )}
                        </div>

                        <div className="flex flex-col sm:flex-row items-center justify-center gap-4 pt-4">
                            <button type="submit" className={`flex items-center justify-center gap-2 px-6 py-3 font-semibold text-white bg-[var(--color-mottu-dark)] rounded-md shadow hover:bg-opacity-80 transition-colors duration-200 disabled:opacity-50`} disabled={isLoading || !!success}><MdSave size={20} /> {isLoading ? 'Salvando...' : 'Salvar Cliente'}</button>
                            <Link href="/clientes/listar" className="flex items-center justify-center gap-2 px-6 py-3 font-semibold text-[var(--color-mottu-dark)] bg-white rounded-md shadow border border-[var(--color-mottu-default)] hover:bg-gray-50 hover:text-[var(--color-mottu-dark)] hover:border-[var(--color-mottu-dark)] focus:outline-none focus:ring-2 focus:ring-[var(--color-mottu-dark)] focus:ring-offset-2 focus:ring-offset-[var(--color-mottu-default)] transition-colors duration-200"><MdArrowBack size={20} /> Voltar para Lista</Link>
                        </div>
                    </form>
                </div>
            </main>
            <style jsx global>{`
                .date-input-fix::-webkit-calendar-picker-indicator { cursor: pointer; }
                input[type="date"]:required:invalid::-webkit-datetime-edit { color: transparent; }
                input[type="date"]:focus::-webkit-datetime-edit { color: #1e293b !important; }
                input[type="date"]::-webkit-datetime-edit { color: #1e293b; }
            `}</style>
        </>
    );
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PASTA: src\app\clientes\deletar\[id]
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// ARQUIVO: src\app\clientes\deletar\[id]\page.tsx   |   TIPO: Componente React (.tsx)
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// src/app/clientes/deletar/[id]/page.tsx
"use client";
import { useState, useEffect } from 'react';
import { useParams, useRouter } from 'next/navigation';
import Link from 'next/link';
import NavBar from '@/components/nav-bar';
import { ClienteService } from '@/utils/api';
import { ClienteResponseDto } from '@/types/cliente';
import { Loader2, AlertCircle, Trash2, ArrowLeft } from 'lucide-react';

export default function DeletarClientePage() {
    const params = useParams();
    const router = useRouter();
    const id = typeof params.id === 'string' ? parseInt(params.id, 10) : null;

    const [cliente, setCliente] = useState<ClienteResponseDto | null>(null);
    const [isDeleting, setIsDeleting] = useState(false);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);

    useEffect(() => {
        if (!id) {
            setError("ID do cliente inválido.");
            setIsLoading(false);
            return;
        }
        const fetchCliente = async () => {
            setIsLoading(true);
            try {
                const data = await ClienteService.getById(id);
                setCliente(data);
            } catch (err: any) {
                setError(err.response?.data?.message || "Cliente não encontrado ou erro ao carregar dados.");
            } finally {
                setIsLoading(false);
            }
        };
        fetchCliente();
    }, [id]);

    const handleConfirmDelete = async () => {
        if (!id) return;
        setIsDeleting(true);
        setError(null);
        try {
            await ClienteService.delete(id);
            // Idealmente, usar um state management ou query param para mostrar a msg de sucesso na página de listagem
            router.push('/clientes/listar');
        } catch (err: any) {
            setError(err.response?.data?.message || "Erro ao excluir cliente.");
            setIsDeleting(false);
        }
    };

    if (isLoading) return (
        <>
            <NavBar active="clientes" />
            <main className="flex justify-center items-center min-h-screen bg-black"><Loader2 className="h-12 w-12 animate-spin text-[var(--color-mottu-light)]" /></main>
        </>
    );

    if (error && !cliente) return (
        <>
            <NavBar active="clientes" />
            <main className="flex justify-center items-center min-h-screen bg-black p-4">
                <div className="text-center bg-red-900/50 p-8 rounded-lg">
                    <AlertCircle className="mx-auto h-12 w-12 text-red-400" />
                    <p className="mt-4 text-red-400">{error}</p>
                    <Link href="/clientes/listar" className="mt-6 inline-flex items-center gap-2 px-6 py-2 bg-slate-600 text-white rounded-md"><ArrowLeft size={18}/> Voltar para Lista</Link>
                </div>
            </main>
        </>
    );

    if (!cliente) return null;

    return (
        <>
            <NavBar active="clientes" />
            <main className="min-h-screen bg-black text-white p-4 md:p-8 flex items-center justify-center">
                <div className="container max-w-lg mx-auto bg-slate-900 border border-red-500/50 p-6 md:p-8 rounded-lg shadow-xl text-center">
                    <Trash2 className="mx-auto h-12 w-12 text-red-400 mb-4" />
                    <h1 className="text-2xl font-bold text-white mb-2">Confirmar Exclusão</h1>
                    <p className="text-slate-300 mb-6">
                        Tem certeza que deseja excluir permanentemente o cliente <strong className="text-white">{cliente.nome} {cliente.sobrenome}</strong> (CPF: {cliente.cpf})?
                    </p>

                    {error && <div className="mb-4 text-red-400 p-3 rounded-md bg-red-900/50">{error}</div>}

                    <div className="flex justify-center gap-4">
                        <Link href="/clientes/listar" className="px-6 py-2 font-semibold text-slate-800 bg-gray-300 rounded-md hover:bg-gray-400">
                            Cancelar
                        </Link>
                        <button onClick={handleConfirmDelete} disabled={isDeleting} className="px-6 py-2 font-semibold text-white bg-red-600 rounded-md hover:bg-red-700 disabled:opacity-50 flex items-center gap-2">
                            {isDeleting ? <><Loader2 className="animate-spin h-5 w-5"/> Excluindo...</> : <>Excluir</>}
                        </button>
                    </div>
                </div>
            </main>
        </>
    );
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PASTA: src\app\clientes\detalhes\[id]
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// ARQUIVO: src\app\clientes\detalhes\[id]\page.tsx   |   TIPO: Componente React (.tsx)
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// src/app/clientes/detalhes/[id]/page.tsx
"use client";
import { useState, useEffect } from 'react';
import { useParams, useRouter } from 'next/navigation';
import Link from 'next/link';
import NavBar from '@/components/nav-bar';
import { ClienteService } from '@/utils/api';
import { ClienteResponseDto } from '@/types/cliente';
import { Loader2, AlertCircle, User, Mail, MapPin, Briefcase, Phone, Home, Edit, ArrowLeft } from 'lucide-react';

export default function DetalhesClientePage() {
    const params = useParams();
    const router = useRouter();
    const id = typeof params.id === 'string' ? parseInt(params.id, 10) : null;

    const [cliente, setCliente] = useState<ClienteResponseDto | null>(null);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);

    useEffect(() => {
        if (!id) {
            setError("ID do cliente inválido.");
            setIsLoading(false);
            return;
        }
        const fetchCliente = async () => {
            setIsLoading(true);
            try {
                const data = await ClienteService.getById(id);
                setCliente(data);
            } catch (err: any) {
                setError(err.response?.data?.message || "Cliente não encontrado ou erro ao carregar dados.");
            } finally {
                setIsLoading(false);
            }
        };
        fetchCliente();
    }, [id]);

    if (isLoading) return (
        <>
            <NavBar active="clientes" />
            <main className="flex justify-center items-center min-h-screen bg-black"><Loader2 className="h-12 w-12 animate-spin text-[var(--color-mottu-light)]" /></main>
        </>
    );

    if (error) return (
        <>
            <NavBar active="clientes" />
            <main className="flex justify-center items-center min-h-screen bg-black p-4">
                <div className="text-center bg-red-900/50 p-8 rounded-lg">
                    <AlertCircle className="mx-auto h-12 w-12 text-red-400" />
                    <p className="mt-4 text-red-400">{error}</p>
                    <Link href="/clientes/listar" className="mt-6 inline-flex items-center gap-2 px-6 py-2 bg-slate-600 text-white rounded-md"><ArrowLeft size={18}/> Voltar para Lista</Link>
                </div>
            </main>
        </>
    );

    if (!cliente) return null;

    return (
        <>
            <NavBar active="clientes" />
            <main className="min-h-screen bg-black text-white p-4 md:p-8">
                <div className="container max-w-4xl mx-auto bg-[var(--color-mottu-default)] p-6 md:p-8 rounded-lg shadow-xl">
                    <div className="flex flex-col sm:flex-row justify-between items-start mb-6">
                        <div>
                            <h1 className="text-2xl md:text-3xl font-bold text-white">{cliente.nome} {cliente.sobrenome}</h1>
                            <p className="text-slate-300">Detalhes do Cliente (ID: {cliente.idCliente})</p>
                        </div>
                        <div className="flex gap-2 mt-4 sm:mt-0">
                            <Link href="/clientes/listar" className="flex items-center gap-2 px-4 py-2 font-medium text-[var(--color-mottu-dark)] bg-white rounded-md shadow hover:bg-gray-100">
                                <ArrowLeft size={18} /> Voltar
                            </Link>
                            <Link href={`/clientes/alterar/${cliente.idCliente}`} className="flex items-center gap-2 px-4 py-2 font-semibold text-white bg-[var(--color-mottu-dark)] rounded-md shadow hover:bg-opacity-80">
                                <Edit size={18} /> Editar
                            </Link>
                        </div>
                    </div>

                    <div className="space-y-6">
                        {/* Dados Pessoais */}
                        <div className="bg-black/20 p-4 rounded-lg">
                            <h2 className="text-xl font-semibold mb-3 text-slate-100 flex items-center"><User className="mr-2"/>Dados Pessoais</h2>
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-x-6 gap-y-2 text-sm">
                                <p><strong>CPF:</strong> {cliente.cpf}</p>
                                <p><strong>Data de Nasc.:</strong> {new Date(cliente.dataNascimento).toLocaleDateString('pt-BR')}</p>
                                <p><strong>Sexo:</strong> {cliente.sexo === 'M' ? 'Masculino' : 'Feminino'}</p>
                                <p><strong>Estado Civil:</strong> {cliente.estadoCivil}</p>
                                <p><strong>Profissão:</strong> {cliente.profissao}</p>
                                <p><strong>Data Cadastro:</strong> {new Date(cliente.dataCadastro).toLocaleDateString('pt-BR')}</p>
                            </div>
                        </div>

                        {/* Dados de Contato */}
                        <div className="bg-black/20 p-4 rounded-lg">
                            <h2 className="text-xl font-semibold mb-3 text-slate-100 flex items-center"><Phone className="mr-2"/>Contato</h2>
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-x-6 gap-y-2 text-sm">
                                <p><strong>Email:</strong> {cliente.contatoResponseDto.email}</p>
                                <p><strong>Celular:</strong> {cliente.contatoResponseDto.celular}</p>
                                <p><strong>Telefone:</strong> ({cliente.contatoResponseDto.ddd}) {cliente.contatoResponseDto.telefone1}</p>
                                <p><strong>DDI:</strong> +{cliente.contatoResponseDto.ddi}</p>
                            </div>
                        </div>

                        {/* Endereço */}
                        <div className="bg-black/20 p-4 rounded-lg">
                            <h2 className="text-xl font-semibold mb-3 text-slate-100 flex items-center"><MapPin className="mr-2"/>Endereço</h2>
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-x-6 gap-y-2 text-sm">
                                <p><strong>CEP:</strong> {cliente.enderecoResponseDto.cep}</p>
                                <p><strong>Logradouro:</strong> {cliente.enderecoResponseDto.logradouro}, {cliente.enderecoResponseDto.numero}</p>
                                <p><strong>Bairro:</strong> {cliente.enderecoResponseDto.bairro}</p>
                                <p><strong>Cidade/UF:</strong> {cliente.enderecoResponseDto.cidade} / {cliente.enderecoResponseDto.estado}</p>
                                {cliente.enderecoResponseDto.complemento && <p><strong>Complemento:</strong> {cliente.enderecoResponseDto.complemento}</p>}
                            </div>
                        </div>
                    </div>
                </div>
            </main>
        </>
    );
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PASTA: src\app\clientes\listar
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// ARQUIVO: src\app\clientes\listar\page.tsx   |   TIPO: Componente React (.tsx)
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// src/app/clientes/listar/page.tsx
"use client";
import { useState, useEffect, FormEvent, ChangeEvent } from 'react';
import Link from 'next/link';
import NavBar from '@/components/nav-bar';
import { ClienteService } from '@/utils/api';
import { ClienteResponseDto, ClienteFilter } from '@/types/cliente';
import { SpringPage } from '@/types/common';
import { MdSearch, MdClear, MdAdd, MdChevronLeft, MdChevronRight, MdEdit, MdDelete, MdVisibility, MdErrorOutline, MdCheckCircle } from 'react-icons/md';
import { UserCircle } from 'lucide-react';
// ADICIONADO: IMaskInput para o filtro de CPF
import { IMaskInput } from 'react-imask';

// CORREÇÃO: Usar undefined para filtros não aplicados é mais limpo.
const initialFilterState: ClienteFilter = { nome: undefined, cpf: undefined };
const initialPageInfo: SpringPage<any> | null = null;
const cleanMaskedValue = (value: string): string => value.replace(/\D/g, '');

export default function ListarClientesPage() {
    const [clientes, setClientes] = useState<ClienteResponseDto[]>([]);
    const [pageInfo, setPageInfo] = useState<SpringPage<ClienteResponseDto> | null>(initialPageInfo);
    const [currentPage, setCurrentPage] = useState(0);
    const [filtros, setFiltros] = useState<ClienteFilter>(initialFilterState);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const [successMessage, setSuccessMessage] = useState<string | null>(null);

    const ITEMS_PER_PAGE = 9;
    const SORT_ORDER = 'idCliente,asc';

    const fetchData = async (pageToFetch = 0, currentFilters = filtros) => {
        setIsLoading(true);
        setError(null);

        // CORREÇÃO: Limpa a máscara do CPF antes de enviar para a API.
        const filtersToSubmit = {
            ...currentFilters,
            cpf: currentFilters.cpf ? cleanMaskedValue(currentFilters.cpf) : undefined,
        };

        try {
            const data = await ClienteService.listarPaginadoFiltrado(filtersToSubmit, pageToFetch, ITEMS_PER_PAGE, SORT_ORDER);
            setClientes(data.content);
            setPageInfo(data);
            setCurrentPage(data.number);
        } catch (err: any) {
            setError(err.response?.data?.message || 'Erro ao buscar clientes.');
            setClientes([]);
            setPageInfo(null);
        } finally {
            setIsLoading(false);
        }
    };

    useEffect(() => {
        fetchData(0, initialFilterState);
    }, []);

    // CORREÇÃO: Define o valor como 'undefined' se o campo estiver vazio.
    const handleFilterChange = (e: ChangeEvent<HTMLInputElement>) => {
        const { name, value } = e.target;
        setFiltros(prev => ({ ...prev, [name]: value === "" ? undefined : value }));
    };

    const handleFilterSubmit = (e: FormEvent<HTMLFormElement>) => {
        e.preventDefault();
        setCurrentPage(0);
        fetchData(0, filtros);
    };

    const handleClearFilters = () => {
        setFiltros(initialFilterState);
        setCurrentPage(0);
        fetchData(0, initialFilterState);
    };

    const handlePageChange = (newPage: number) => {
        fetchData(newPage, filtros);
    };

    // ADICIONADO: Lógica segura para exclusão de cliente.
    const handleDeleteCliente = async (clienteId: number, nomeCliente: string) => {
        if (window.confirm(`Tem certeza que deseja excluir o cliente "${nomeCliente}" (ID: ${clienteId})?`)) {
            try {
                await ClienteService.delete(clienteId);
                setSuccessMessage(`Cliente "${nomeCliente}" excluído com sucesso!`);

                // Lógica para voltar uma página se o último item da página atual for excluído
                const pageToFetchAfterDelete = (pageInfo?.first && clientes.length === 1 && currentPage > 0)
                    ? currentPage - 1
                    : currentPage;

                fetchData(pageToFetchAfterDelete, filtros);
                setTimeout(() => setSuccessMessage(null), 4000);
            } catch (err: any) {
                setError(err.response?.data?.message || `Erro ao excluir cliente "${nomeCliente}".`);
            }
        }
    };

    return (
        <>
            <NavBar active="clientes" />
            <main className="min-h-screen bg-black text-white p-4 md:p-8">
                <div className="container mx-auto bg-[var(--color-mottu-default)] p-6 md:p-8 rounded-lg shadow-xl">
                    <div className="flex flex-col sm:flex-row justify-between items-center mb-8">
                        <h1 className="text-2xl md:text-3xl font-bold text-white flex items-center">
                            <UserCircle size={32} className="mr-3" />
                            Clientes Cadastrados
                        </h1>
                        <Link href="/clientes/cadastrar" className="mt-4 sm:mt-0 flex items-center gap-2 px-4 py-2.5 font-semibold text-[var(--color-mottu-dark)] bg-white rounded-md shadow hover:bg-gray-100 transition-colors duration-200">
                            <MdAdd size={20} /> Novo Cliente
                        </Link>
                    </div>

                    {successMessage && <div className="mb-4 text-center text-green-700 p-3 rounded-md bg-green-100"><MdCheckCircle className="inline mr-2" />{successMessage}</div>}
                    {error && <div className="mb-4 text-center text-red-700 p-3 rounded-md bg-red-100"><MdErrorOutline className="inline mr-2" />{error}</div>}

                    <form onSubmit={handleFilterSubmit} className="mb-8 p-4 bg-black/20 rounded-lg">
                        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4 items-end">
                            <input type="text" name="nome" value={filtros.nome || ''} onChange={handleFilterChange} placeholder="Filtrar por nome..." className="w-full p-2 h-10 rounded bg-white text-slate-900"/>
                            {/* CORREÇÃO: Usando IMaskInput para o filtro de CPF */}
                            <IMaskInput
                                mask="000.000.000-00"
                                name="cpf"
                                value={filtros.cpf || ''}
                                onAccept={(value) => setFiltros(prev => ({ ...prev, cpf: value as string }))}
                                placeholder="Filtrar por CPF..."
                                className="w-full p-2 h-10 rounded bg-white text-slate-900"
                            />
                            <div className="flex gap-2">
                                <button type="submit" className="flex-1 flex items-center justify-center gap-2 h-10 px-4 font-semibold text-white bg-[var(--color-mottu-dark)] rounded-md hover:bg-opacity-80">
                                    <MdSearch /> Buscar
                                </button>
                                <button type="button" onClick={handleClearFilters} className="flex-1 flex items-center justify-center gap-2 h-10 px-4 font-medium text-slate-700 bg-gray-200 rounded-md hover:bg-gray-300">
                                    <MdClear /> Limpar
                                </button>
                            </div>
                        </div>
                    </form>

                    {isLoading ? <p className="text-center text-slate-100 py-10">Carregando...</p> : clientes.length > 0 ? (
                        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
                            {clientes.map((cliente) => (
                                <div key={cliente.idCliente} className="bg-white text-slate-800 rounded-lg shadow-lg p-5 flex flex-col justify-between transition-all hover:shadow-2xl hover:scale-105">
                                    <div>
                                        <div className="flex items-center mb-3">
                                            <span className="text-xs font-semibold bg-slate-200 text-slate-700 px-2 py-0.5 rounded-full mr-2">ID: {cliente.idCliente}</span>
                                            <h2 className="text-xl font-bold text-[var(--color-mottu-dark)] truncate">{cliente.nome} {cliente.sobrenome}</h2>
                                        </div>
                                        <p className="text-sm text-slate-600">CPF: {cliente.cpf}</p>
                                        <p className="text-sm text-slate-600 truncate">Email: {cliente.contatoResponseDto?.email || '-'}</p>
                                    </div>
                                    <div className="flex justify-end items-center gap-2 border-t border-slate-200 pt-3 mt-4">
                                        <Link href={`/clientes/detalhes/${cliente.idCliente}`} className="p-2 rounded-full text-blue-600 hover:bg-blue-100" title="Ver Detalhes"><MdVisibility size={22}/></Link>
                                        <Link href={`/clientes/alterar/${cliente.idCliente}`} className="p-2 rounded-full text-yellow-500 hover:bg-yellow-100" title="Editar Cliente"><MdEdit size={20}/></Link>
                                        {/* CORREÇÃO: Botão para exclusão segura */}
                                        <button onClick={() => handleDeleteCliente(cliente.idCliente, `${cliente.nome} ${cliente.sobrenome}`)} className="p-2 rounded-full text-red-500 hover:bg-red-100" title="Excluir Cliente">
                                            <MdDelete size={20}/>
                                        </button>
                                    </div>
                                </div>
                            ))}
                        </div>
                    ) : (
                        <div className="text-center py-10"><p className="text-slate-300">Nenhum cliente encontrado.</p></div>
                    )}

                    {!isLoading && pageInfo && pageInfo.totalPages > 1 && (
                        <div className="mt-8 flex justify-between items-center text-sm text-slate-100">
                            <span>Página {pageInfo.number + 1} de {pageInfo.totalPages}</span>
                            <div className="flex gap-2">
                                <button onClick={() => handlePageChange(currentPage - 1)} disabled={pageInfo.first} className="px-3 py-1.5 rounded-md bg-slate-700 hover:bg-slate-600 disabled:opacity-50"><MdChevronLeft/></button>
                                <button onClick={() => handlePageChange(currentPage + 1)} disabled={pageInfo.last} className="px-3 py-1.5 rounded-md bg-slate-700 hover:bg-slate-600 disabled:opacity-50"><MdChevronRight/></button>
                            </div>
                        </div>
                    )}
                </div>
            </main>
        </>
    );
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PASTA: src\app\contato
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// ARQUIVO: src\app\contato\layout.tsx   |   TIPO: Componente React (.tsx)
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// src/app/contato/layout.tsx
import React from "react";
import "leaflet/dist/leaflet.css";
import NavBar from "@/components/nav-bar";

export default function ContatoLayout({ children }: { children: React.ReactNode }) {
    return (
        <>
            <NavBar active="contato" />
            <main className="min-h-screen bg-black text-white p-4 md:p-8">
                <div className="container mx-auto bg-[var(--color-mottu-default)] p-6 md:p-8 rounded-lg shadow-xl">
                    {children}
                </div>
            </main>
        </>
    );
}


//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// ARQUIVO: src\app\contato\page.tsx   |   TIPO: Componente React (.tsx)
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// src/app/contato/page.tsx
"use client";
import React, { FormEvent, useState } from "react";
import dynamic from "next/dynamic";
import Image from "next/image";
// --- Ícones adicionados para as novas seções ---
import { FaGithub, FaWhatsapp, FaCodeBranch, FaBook } from "react-icons/fa";
import { MdPerson, MdAlternateEmail, MdWork, MdPhoneEnabled, MdMessage, MdSend } from "react-icons/md";

// Mapa dinâmico (SSR safe)
const LeafletMap = dynamic(() => import("@/components/LeafletMap"), {
    ssr: false,
    loading: () => (
        <div className="h-[350px] w-full rounded-lg bg-gray-700 flex items-center justify-center text-white">
            <p>Carregando mapa…</p>
        </div>
    ),
});

interface TeamMember {
    name: string;
    rm: string;
    turma: string;
    email: string;
    githubUser: string;
    githubLink: string;
    phone: string;
    photoUrl: string;
}

const teamMembers: TeamMember[] = [
    {
        name: "Paulo André Carminati",
        rm: "557881",
        turma: "2-TDSPZ",
        email: "rm557881@fiap.com.br",
        githubUser: "carmipa",
        githubLink: "https://github.com/carmipa",
        phone: "(11) 97669-2633",
        photoUrl: "/fotos-equipe/paulo.jpg",
    },
    {
        name: "Arthur Bispo de Lima",
        rm: "557568",
        turma: "2-TDSPV",
        email: "rm557568@fiap.com.br",
        githubUser: "ArthurBispo00",
        githubLink: "https://github.com/ArthurBispo00",
        phone: "(11) 99145-6219",
        photoUrl: "/fotos-equipe/arthur.jpg",
    },
    {
        name: "João Paulo Moreira",
        rm: "557808",
        turma: "2-TDSPV",
        email: "rm557808@fiap.com.br",
        githubUser: "joao1015",
        githubLink: "https://github.com/joao1015",
        phone: "(11) 98391-1385",
        photoUrl: "/fotos-equipe/joao.jpg",
    },
];

export default function ContactsPage() {
    const [nome, setNome] = useState("");
    const [email, setEmail] = useState("");
    const [mensagem, setMensagem] = useState("");
    const [enviado, setEnviado] = useState<null | "ok" | "erro">(null);

    const handleSubmit = (e: FormEvent) => {
        e.preventDefault();
        try {
            setEnviado("ok");
            setNome("");
            setEmail("");
            setMensagem("");
        } catch {
            setEnviado("erro");
        }
    };

    return (
        <section className="space-y-10">
            <header className="mb-6">
                <h1 className="text-2xl md:text-3xl font-bold flex items-center gap-2 text-white">
                    <span className="text-white">💬</span>
                    Fale Conosco
                </h1>
                <p className="text-sm text-white/80">
                    Entre em contato pelo formulário, WhatsApp ou GitHub. Nosso mapa
                    abaixo mostra a localização da equipe.
                </p>
            </header>

            {/* Cards da equipe */}
            <div className="grid gap-6 sm:grid-cols-2 lg:grid-cols-3">
                {teamMembers.map((m) => (
                    <div key={m.rm} className="rounded-xl bg-white text-slate-800 shadow-lg p-5 border border-white/10">
                        <div className="flex items-center gap-4">
                            <div className="relative h-20 w-20 rounded-full ring-4 ring-[var(--color-mottu-default)]/40 overflow-hidden">
                                <Image
                                    src={m.photoUrl}
                                    alt={m.name}
                                    fill
                                    sizes="80px"
                                    className="object-cover"
                                />
                            </div>
                            <div>
                                <h3 className="font-semibold leading-tight text-[var(--color-mottu-dark)]">{m.name}</h3>
                                <p className="text-xs text-slate-600">
                                    RM: {m.rm} | Turma: {m.turma}
                                </p>
                            </div>
                        </div>

                        <ul className="mt-4 space-y-2 text-sm text-slate-700">
                            <li className="flex items-center gap-2">
                                <MdAlternateEmail className="text-lg" />
                                <span>{m.email}</span>
                            </li>
                            <li className="flex items-center gap-2">
                                <MdWork className="text-lg" />
                                <a
                                    href={m.githubLink}
                                    target="_blank"
                                    rel="noreferrer"
                                    className="underline underline-offset-2 hover:text-[var(--color-mottu-dark)]"
                                >
                                    @{m.githubUser}
                                </a>
                            </li>
                            <li className="flex items-center gap-2">
                                <MdPhoneEnabled className="text-lg" />
                                <span>{m.phone}</span>
                            </li>
                        </ul>

                        <div className="mt-4 flex items-center gap-2">
                            <a
                                title="GitHub"
                                href={m.githubLink}
                                target="_blank"
                                rel="noreferrer"
                                className="inline-flex items-center gap-2 rounded-lg bg-slate-800 text-white px-3 py-2 text-sm font-semibold hover:bg-slate-700"
                            >
                                <FaGithub />
                                GitHub
                            </a>
                            <a
                                title="WhatsApp"
                                href={`https://wa.me/55${m.phone.replace(/\D/g, "")}`}
                                target="_blank"
                                rel="noreferrer"
                                className="inline-flex items-center gap-2 rounded-lg bg-green-500 text-white px-3 py-2 text-sm font-semibold hover:bg-green-600"
                            >
                                <FaWhatsapp />
                                WhatsApp
                            </a>
                        </div>
                    </div>
                ))}
            </div>

            {/* Form + Mapa */}
            <div className="grid gap-6 lg:grid-cols-2">
                <div className="rounded-xl bg-black/20 p-5 border border-white/10">
                    <h2 className="text-xl font-semibold mb-4 text-white">Envie uma Mensagem</h2>
                    <form onSubmit={handleSubmit} className="space-y-4">
                        <label className="block text-white">
                            <span className="mb-1 flex items-center gap-2 text-sm">
                              <MdPerson /> Seu Nome
                            </span>
                            <input
                                value={nome}
                                onChange={(e) => setNome(e.target.value)}
                                required
                                className="w-full p-2 h-10 rounded bg-white text-slate-900 border border-gray-300 focus:ring-sky-500"
                                placeholder="Digite seu nome"
                            />
                        </label>

                        <label className="block text-white">
                            <span className="mb-1 flex items-center gap-2 text-sm">
                              <MdAlternateEmail /> Seu E-mail
                            </span>
                            <input
                                type="email"
                                value={email}
                                onChange={(e) => setEmail(e.target.value)}
                                required
                                className="w-full p-2 h-10 rounded bg-white text-slate-900 border border-gray-300 focus:ring-sky-500"
                                placeholder="seu@email.com"
                            />
                        </label>

                        <label className="block text-white">
                            <span className="mb-1 flex items-center gap-2 text-sm">
                              <MdMessage /> Mensagem
                            </span>
                            <textarea
                                value={mensagem}
                                onChange={(e) => setMensagem(e.target.value)}
                                required
                                rows={4}
                                className="w-full p-2 rounded bg-white text-slate-900 border border-gray-300 focus:ring-sky-500"
                                placeholder="Escreva sua mensagem…"
                            />
                        </label>

                        <button
                            type="submit"
                            className="inline-flex items-center gap-2 rounded-lg bg-white text-[var(--color-mottu-dark)] px-4 py-2 font-semibold hover:bg-gray-200"
                        >
                            <MdSend />
                            Enviar
                        </button>

                        {enviado === "ok" && (
                            <p className="text-green-300 text-sm">Mensagem enviada!</p>
                        )}
                        {enviado === "erro" && (
                            <p className="text-red-300 text-sm">
                                Ocorreu um erro. Tente novamente.
                            </p>
                        )}
                    </form>
                </div>

                <div className="rounded-xl bg-black/20 p-5 border border-white/10">
                    <h2 className="text-xl font-semibold mb-4 text-white">Nossa Localização</h2>
                    <div className="h-[385px] rounded-lg overflow-hidden">
                        <LeafletMap
                            position={[-23.564, -46.652]} // exemplo: região da FIAP Paulista
                            zoom={15}
                            markerText="Equipe Mottu Oficina"
                            className="h-full w-full"
                        />
                    </div>
                </div>
            </div>

            {/* --- NOVA SEÇÃO: Repositórios do Projeto --- */}
            <div className="rounded-xl bg-black/20 p-6 border border-white/10 text-center">
                <h2 className="text-2xl font-bold mb-4 text-white flex items-center justify-center gap-3">
                    <FaGithub /> Repositórios do Projeto
                </h2>
                <div className="space-y-3 max-w-2xl mx-auto">
                    <p className="flex items-center gap-2 text-left">
                        <FaCodeBranch className="text-sky-300" />
                        <span className="font-semibold">Repositório Principal:</span>
                        <a href="https://github.com/carmipa/challenge_2025_2_semestre_mottu_parte_1" target="_blank" rel="noreferrer" className="text-sky-300 hover:underline truncate">
                            https://github.com/carmipa/challenge_2025_2_semestre_mottu_parte_1
                        </a>
                    </p>
                    <p className="flex items-center gap-2 text-left">
                        <FaBook className="text-sky-300" />
                        <span className="font-semibold">Repositório da Matéria:</span>
                        <a href="https://github.com/carmipa/challenge_2025_2_semestre_mottu_parte_1/tree/main/Java_Advanced" target="_blank" rel="noreferrer" className="text-sky-300 hover:underline truncate">
                            .../Java_Advanced
                        </a>
                    </p>
                </div>
            </div>

            {/* --- NOVA SEÇÃO: Tecnologias Utilizadas (Shields) --- */}
            <div className="rounded-xl bg-black/20 p-6 border border-white/10">
                <div className="container mx-auto text-center text-xs space-y-3">
                    <div>
                        <p className="font-bold">Tecnologias Utilizadas no Projeto</p>
                        <p className="text-slate-300">CHALLENGE - SPRINT 3 - FIAP 2025</p>
                    </div>
                    <div className="flex justify-center items-center gap-2 flex-wrap">
                        <Image src="https://img.shields.io/badge/Java-007396?style=for-the-badge&logo=openjdk&logoColor=white" alt="Java" width={60} height={28} unoptimized={true} />
                        <Image src="https://img.shields.io/badge/Spring-6DB33F?style=for-the-badge&logo=spring&logoColor=white" alt="Spring" width={70} height={28} unoptimized={true} />
                        <Image src="https://img.shields.io/badge/Gradle-02303A?style=for-the-badge&logo=gradle&logoColor=white" alt="Gradle" width={70} height={28} unoptimized={true} />
                        <Image src="https://img.shields.io/badge/Oracle-F80000?style=for-the-badge&logo=oracle&logoColor=white" alt="Oracle DB" width={70} height={28} unoptimized={true} />
                        <Image src="https://img.shields.io/badge/Next.js-000000?style=for-the-badge&logo=nextdotjs&logoColor=white" alt="Next.js" width={75} height={28} unoptimized={true} />
                        <Image src="https://img.shields.io/badge/React-20232A?style=for-the-badge&logo=react&logoColor=61DAFB" alt="React" width={65} height={28} unoptimized={true} />
                        <Image src="https://img.shields.io/badge/Tailwind_CSS-38B2AC?style=for-the-badge&logo=tailwind-css&logoColor=white" alt="Tailwind CSS" width={110} height={28} unoptimized={true} />
                        <Image src="https://img.shields.io/badge/TypeScript-007ACC?style=for-the-badge&logo=typescript&logoColor=white" alt="TypeScript" width={95} height={28} unoptimized={true} />
                    </div>
                </div>
            </div>

        </section>
    );
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PASTA: src\app\dashboard
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// ARQUIVO: src\app\dashboard\page.tsx   |   TIPO: Componente React (.tsx)
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

"use client";

import { useEffect, useMemo, useState } from "react";
import NavBar from "@/components/nav-bar";
import { VeiculoService, PatioService, BoxService } from "@/utils/api";
import { DashboardApi } from "@/utils/api/dashboard";
import { VeiculoLocalizacaoResponseDto } from "@/types/veiculo";
import { Loader2, ParkingSquare, Car, MapPinned, AlertTriangle } from "lucide-react";
import Link from "next/link";
import {
    ResponsiveContainer,
    PieChart, Pie, Cell, Legend, Tooltip,
    LineChart, Line, CartesianGrid, XAxis, YAxis, Brush,
} from "recharts";

type Stats = { totalPatios: number; totalBoxes: number; boxesOcupados: number };

// paleta sem verde
const COLORS = {
    red: "#ef4444",
    blue: "#3b82f6",
    yellow: "#f59e0b",
    purple: "#a855f7",
    pink: "#ec4899",
    cyan: "#06b6d4",
    gray: "#9ca3af",
};

function formatISODate(d: string) {
    const dt = new Date(d);
    const dd = String(dt.getDate()).padStart(2, "0");
    const mm = String(dt.getMonth() + 1).padStart(2, "0");
    return `${dd}/${mm}`;
}

export default function DashboardPage() {
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);

    const [stats, setStats] = useState<Stats>({ totalPatios: 0, totalBoxes: 0, boxesOcupados: 0 });
    const [veiculosEstacionados, setVeiculosEstacionados] = useState<VeiculoLocalizacaoResponseDto[]>([]);

    // gráficos
    const [resumo, setResumo] = useState<{ totalBoxes: number; ocupados: number; livres: number } | null>(null);
    const [serie, setSerie] = useState<Array<{ dia: string; ocupados: number; livres: number }>>([]);
    const [rangeDias, setRangeDias] = useState<7 | 14 | 30>(14);
    const [chartLoading, setChartLoading] = useState(false);
    const [show, setShow] = useState<{ ocupados: boolean; livres: boolean }>({ ocupados: true, livres: true });

    useEffect(() => {
        const fetchData = async () => {
            setIsLoading(true);
            setError(null);
            try {
                const today = new Date();
                const fim = today.toISOString().slice(0, 10);
                const ini = new Date(today.getTime() - (rangeDias - 1) * 24 * 60 * 60 * 1000).toISOString().slice(0, 10);

                const [patiosData, boxesData, resumoApi, serieApi] = await Promise.all([
                    PatioService.listarPaginadoFiltrado({}, 0, 1),
                    BoxService.listarPaginadoFiltrado({}, 0, 500),
                    DashboardApi.resumo(),
                    DashboardApi.ocupacaoPorDia(ini, fim),
                ]);

                const boxesOcupados = (boxesData.content || []).filter((b: any) => b.status === "O");
                const veiculosPromises = boxesOcupados.map(async (box: any) => {
                    try {
                        const veiculoPage = await VeiculoService.buscarPorFiltro({ boxNome: box.nome }, 0, 1);
                        if (veiculoPage.content.length > 0) {
                            return VeiculoService.getLocalizacao(veiculoPage.content[0].idVeiculo);
                        }
                        return null;
                    } catch {
                        return null;
                    }
                });
                const veiculosComLocalizacao = (await Promise.all(veiculosPromises)).filter(Boolean) as VeiculoLocalizacaoResponseDto[];

                setStats({ totalPatios: patiosData.totalElements, totalBoxes: boxesData.totalElements, boxesOcupados: boxesOcupados.length });
                setVeiculosEstacionados(veiculosComLocalizacao);
                setResumo(resumoApi);
                setSerie(serieApi);
            } catch (e: any) {
                console.error("Erro ao carregar dados do dashboard:", e);
                setError("Não foi possível carregar os dados do dashboard. Verifique a conexão com a API.");
            } finally {
                setIsLoading(false);
            }
        };
        fetchData();
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);

    useEffect(() => {
        const loadSerie = async () => {
            setChartLoading(true);
            try {
                const today = new Date();
                const fim = today.toISOString().slice(0, 10);
                const ini = new Date(today.getTime() - (rangeDias - 1) * 24 * 60 * 60 * 1000).toISOString().slice(0, 10);
                const serieApi = await DashboardApi.ocupacaoPorDia(ini, fim);
                setSerie(serieApi);
            } catch (e) {
                console.error(e);
            } finally {
                setChartLoading(false);
            }
        };
        loadSerie();
    }, [rangeDias]);

    const pieData = useMemo(() => {
        if (!resumo) return [];
        return [
            { name: "Ocupados", value: resumo.ocupados, color: COLORS.red },
            { name: "Livres", value: resumo.livres, color: COLORS.blue },
        ];
    }, [resumo]);

    const lineData = useMemo(
        () => (serie || []).map((x) => ({ ...x, diaLabel: formatISODate(x.dia) })),
        [serie]
    );

    const isPieEmpty = !!resumo && resumo.ocupados === 0 && resumo.livres === 0;
    const isLineEmpty = (serie ?? []).length === 0;

    const toggleLine = (key: "ocupados" | "livres") =>
        setShow((s) => ({ ...s, [key]: !s[key] }));

    if (isLoading) {
        return (
            <>
                <NavBar active="dashboard" />
                <main className="flex justify-center items-center min-h-screen bg-black">
                    <div className="flex flex-col items-center gap-2 text-white">
                        <Loader2 className="h-12 w-12 animate-spin text-[var(--color-mottu-light)]" />
                        <span>Carregando dados do dashboard...</span>
                    </div>
                </main>
            </>
        );
    }

    if (error) {
        return (
            <>
                <NavBar active="dashboard" />
                <main className="flex justify-center items-center min-h-screen bg-black p-4">
                    <div className="text-center bg-red-900/50 p-8 rounded-lg">
                        <AlertTriangle className="mx-auto h-12 w-12 text-red-400" />
                        <p className="mt-4 text-red-400">{error}</p>
                    </div>
                </main>
            </>
        );
    }

    return (
        <>
            <NavBar active="dashboard" />
            <main className="min-h-screen bg-black text-white p-4 md:p-8">
                <div className="container mx-auto">
                    <h1 className="text-3xl font-bold text-white mb-8">Dashboard Gerencial</h1>

                    {/* Cards de resumo (mantidos no seu tema) */}
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
                        <div className="bg-[var(--color-mottu-default)] p-6 rounded-lg shadow-lg">
                            <h2 className="text-lg font-semibold text-slate-200 flex items-center gap-2">
                                <MapPinned /> Pátios Totais
                            </h2>
                            <p className="text-4xl font-bold text-white">{stats.totalPatios}</p>
                        </div>
                        <div className="bg-[var(--color-mottu-default)] p-6 rounded-lg shadow-lg">
                            <h2 className="text-lg font-semibold text-slate-200 flex items-center gap-2">
                                <ParkingSquare /> Vagas Totais (Boxes)
                            </h2>
                            <p className="text-4xl font-bold text-white">{stats.totalBoxes}</p>
                        </div>
                        <div className="bg-[var(--color-mottu-default)] p-6 rounded-lg shadow-lg">
                            <h2 className="text-lg font-semibold text-slate-200 flex items-center gap-2">
                                <Car /> Vagas Ocupadas
                            </h2>
                            <p className="text-4xl font-bold text-white">{stats.boxesOcupados}</p>
                        </div>
                    </div>

                    {/* GRÁFICOS com fundo branco */}
                    <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
                        {/* Pizza */}
                        <section className="bg-white text-zinc-900 p-6 rounded-lg shadow-lg border border-zinc-200">
                            <h2 className="text-xl font-semibold mb-4">Estado Atual de Ocupação</h2>
                            {isPieEmpty ? (
                                <div className="w-full h-80 flex items-center justify-center text-zinc-500">
                                    Sem dados de ocupação no momento.
                                </div>
                            ) : (
                                <div className="w-full h-80">
                                    <ResponsiveContainer>
                                        <PieChart>
                                            <Pie
                                                data={pieData}
                                                dataKey="value"
                                                nameKey="name"
                                                innerRadius={70}
                                                outerRadius={110}
                                                isAnimationActive
                                                label
                                            >
                                                {pieData.map((entry, i) => (
                                                    <Cell key={i} fill={entry.color} />
                                                ))}
                                            </Pie>
                                            <Tooltip
                                                formatter={(val: any, name) => [`${val} boxes`, name as string]}
                                                contentStyle={{ background: "#ffffff", border: "1px solid #e5e7eb", color: "#111827" }}
                                            />
                                            <Legend />
                                        </PieChart>
                                    </ResponsiveContainer>
                                </div>
                            )}
                        </section>

                        {/* Linha */}
                        <section className="bg-white text-zinc-900 p-6 rounded-lg shadow-lg border border-zinc-200">
                            <div className="flex items-center justify-between mb-4">
                                <h2 className="text-xl font-semibold">Ocupação por Dia</h2>
                                <div className="flex items-center gap-2 text-xs">
                                    <span className="text-zinc-700">Período:</span>
                                    {[7, 14, 30].map((n) => (
                                        <button
                                            key={n}
                                            onClick={() => setRangeDias(n as 7 | 14 | 30)}
                                            className={`px-2 py-1 rounded border ${
                                                rangeDias === n ? "bg-zinc-100 border-zinc-400" : "border-zinc-300 hover:bg-zinc-50"
                                            }`}
                                        >
                                            {n}d
                                        </button>
                                    ))}
                                </div>
                            </div>

                            {(isLineEmpty && !chartLoading) ? (
                                <div className="w-full h-96 flex items-center justify-center text-zinc-500">
                                    Sem registros no período consultado.
                                </div>
                            ) : (
                                <div className="w-full h-96">
                                    <ResponsiveContainer>
                                        <LineChart data={lineData}>
                                            <CartesianGrid strokeDasharray="3 3" />
                                            <XAxis dataKey="diaLabel" />
                                            <YAxis allowDecimals={false} />
                                            <Tooltip
                                                labelFormatter={(l) => `Dia ${l}`}
                                                formatter={(val: any, name) => [`${val} boxes`, name as string]}
                                                contentStyle={{ background: "#ffffff", border: "1px solid #e5e7eb", color: "#111827" }}
                                            />
                                            <Legend
                                                content={() => (
                                                    <div className="flex gap-4 text-sm px-4 pb-2">
                                                        <button
                                                            onClick={() => toggleLine("ocupados")}
                                                            className={`flex items-center gap-2 ${show.ocupados ? "" : "opacity-50 line-through"}`}
                                                        >
                                                            <span className="inline-block w-3 h-3 rounded" style={{ background: COLORS.red }} />
                                                            Ocupados
                                                        </button>
                                                        <button
                                                            onClick={() => toggleLine("livres")}
                                                            className={`flex items-center gap-2 ${show.livres ? "" : "opacity-50 line-through"}`}
                                                        >
                                                            <span className="inline-block w-3 h-3 rounded" style={{ background: COLORS.blue }} />
                                                            Livres
                                                        </button>
                                                    </div>
                                                )}
                                            />
                                            {show.ocupados && (
                                                <Line
                                                    type="monotone"
                                                    dataKey="ocupados"
                                                    name="Ocupados"
                                                    stroke={COLORS.red}
                                                    dot={{ r: 2 }}
                                                    activeDot={{ r: 6 }}
                                                    strokeWidth={2}
                                                    animationDuration={600}
                                                />
                                            )}
                                            {show.livres && (
                                                <Line
                                                    type="monotone"
                                                    dataKey="livres"
                                                    name="Livres"
                                                    stroke={COLORS.blue}
                                                    dot={{ r: 2 }}
                                                    activeDot={{ r: 6 }}
                                                    strokeWidth={2}
                                                    animationDuration={600}
                                                />
                                            )}
                                            <Brush height={20} travellerWidth={8} />
                                        </LineChart>
                                    </ResponsiveContainer>
                                </div>
                            )}
                        </section>
                    </div>

                    {/* Tabela (mantida no tema atual) */}
                    <div className="bg-[var(--color-mottu-default)] p-6 rounded-lg shadow-lg">
                        <h2 className="text-2xl font-bold text-white mb-4">Motos Estacionadas</h2>
                        <div className="overflow-x-auto">
                            <table className="w-full text-left text-sm">
                                <thead className="bg-black/20 text-slate-200">
                                <tr>
                                    <th className="p-3">Matrícula</th>
                                    <th className="p-3">Modelo</th>
                                    <th className="p-3">Localização (Box)</th>
                                    <th className="p-3">Pátio</th>
                                    <th className="p-3">Ações</th>
                                </tr>
                                </thead>
                                <tbody>
                                {veiculosEstacionados.length > 0 ? (
                                    veiculosEstacionados.map((v) => (
                                        <tr key={v.idVeiculo} className="border-b border-slate-700 hover:bg-black/20">
                                            <td className="p-3 font-mono">{v.placa}</td>
                                            <td className="p-3">{v.modelo}</td>
                                            <td className="p-3">{v.boxAssociado?.nome}</td>
                                            <td className="p-3">{v.patioAssociado?.nomePatio || "-"}</td>
                                            <td className="p-3">
                                                <Link href={`/veiculo/detalhes/${v.idVeiculo}`} className="text-sky-300 hover:underline">
                                                    Ver Detalhes
                                                </Link>
                                            </td>
                                        </tr>
                                    ))
                                ) : (
                                    <tr>
                                        <td colSpan={5} className="text-center p-6 text-slate-300">
                                            Nenhuma moto estacionada no momento.
                                        </td>
                                    </tr>
                                )}
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </main>
        </>
    );
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PASTA: src\app\inicio
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// ARQUIVO: src\app\inicio\page.tsx   |   TIPO: Componente React (.tsx)
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// src/app/page.tsx
"use client";

import Link from 'next/link';
// import Image from 'next/image'; // Não precisa se não for usar o componente Image
import NavBar from '@/components/nav-bar';

export default function HomePage() {
    return (
        <>
            <NavBar active="inicio" />

            <main
                className="flex items-center justify-center min-h-screen text-white p-4" // Removido bg-cover, bg-center, bg-no-repeat
                style={{
                    backgroundColor: '#000000', // Fundo PRETO sólido
                    // REMOVIDA a linha backgroundImage COMPLETAMENTE para não causar 404
                    // backgroundImage: `none`, // Ou simplesmente não ter a propriedade
                }}
            >
                <section
                    className="max-w-3xl w-full p-8 md:p-10 rounded-2xl shadow-lg text-center border border-[var(--color-mottu-dark)]"
                    style={{
                        backgroundColor: 'var(--color-mottu-dark)', // Fundo do card central VERDE ESCURO
                        color: 'var(--color-mottu-text)', // Texto do card central BRANCO
                        // backdropFilter: 'blur(5px)', // Removido se não houver imagem de fundo
                    }}
                >
                    <div className="mb-6">
                        {/* Se você tiver um logo da Mottu na pasta public/, pode usar <Image /> */}
                        {/* <Image src="/mottu-logo.png" alt="Mottu Logo" width={200} height={80} className="mx-auto mb-4" /> */}
                        <h1 className="text-4xl md:text-5xl font-extrabold text-[var(--color-mottu-light)] tracking-tight drop-shadow-md">
                            Mottu Oficina
                        </h1>
                        <p className="mt-2 text-lg text-[var(--color-mottu-text)]">Sua plataforma de gestão de veículos e pátios</p>
                    </div>

                    <p className="mb-8 text-lg md:text-xl leading-relaxed text-[var(--color-mottu-text)]">
                        Simplifique a gestão da sua frota e otimize o controle de pátios e boxes. Com a Mottu Oficina, você tem o poder de organizar, rastrear e manter seus veículos com eficiência e inteligência.
                    </p>

                    <div className="flex flex-col sm:flex-row justify-center gap-4">
                        <Link href="/clientes/listar">
                            <button className="w-full sm:w-auto px-8 py-3 font-semibold text-[var(--color-mottu-text)] bg-[var(--color-mottu-default)] rounded-full shadow-lg hover:bg-[var(--color-mottu-light)] focus:outline-none focus:ring-2 focus:ring-[var(--color-mottu-light)] focus:ring-offset-2 focus:ring-offset-black transition-all duration-300 ease-in-out">
                                Começar Agora
                            </button>
                        </Link>
                        <Link href="/contato">
                            <button className="w-full sm:w-auto px-8 py-3 font-semibold text-[var(--color-mottu-text)] bg-transparent border-2 border-[var(--color-mottu-default)] rounded-full shadow-lg hover:bg-[var(--color-mottu-light)] hover:text-white focus:outline-none focus:ring-2 focus:ring-[var(--color-mottu-light)] focus:ring-offset-2 focus:ring-offset-black transition-all duration-300 ease-in-out">
                                Fale Conosco
                            </button>
                        </Link>
                    </div>
                </section>
            </main>
        </>
    );
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PASTA: src\app\mapa-2d
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// ARQUIVO: src\app\mapa-2d\page.tsx   |   TIPO: Componente React (.tsx)
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

"use client";

import NavBar from '@/components/nav-bar';
import PatioMottu2D from '@/components/PatioMottu2D';
import { Map } from 'lucide-react';

export default function Mapa2DPage() {
    return (
        <>
            <NavBar active="mapa-2d" />
            <main className="min-h-screen bg-black text-white p-4 md:p-8">
                <div className="container mx-auto bg-[var(--color-mottu-default)] p-6 md:p-8 rounded-lg shadow-xl">
                    <header className="text-center mb-8">
                        <h1 className="text-3xl md:text-4xl font-bold text-white flex items-center justify-center gap-3">
                            <Map size={36} />
                            Visualização 2D do Pátio
                        </h1>
                        <p className="mt-2 text-md text-slate-200 max-w-3xl mx-auto">
                            Este é um modelo esquemático interativo do pátio da Mottu em Guarulhos. Use o mouse para navegar (arrastar) e dar zoom (roda do mouse).
                        </p>
                    </header>

                    <PatioMottu2D />

                </div>
            </main>
        </>
    );
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PASTA: src\app\mapa-do-site
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// ARQUIVO: src\app\mapa-do-site\page.tsx   |   TIPO: Componente React (.tsx)
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

"use client";

import NavBar from '@/components/nav-bar';
import Link from 'next/link';
import {
    MdPeople, MdDirectionsCar, MdWarehouse, MdInventory2, MdMap,
    MdList, MdAdd, MdSearch, MdExplore, MdDashboard, MdRadar
} from "react-icons/md";
import { FaExternalLinkAlt } from "react-icons/fa";

// Estrutura de dados para descrever as seções do site
const sections = [
    {
        name: "Operações Radar",
        icon: <MdRadar className="text-3xl text-white" />,
        description: "Funcionalidades centrais para a operação diária do pátio, focadas no usuário final.",
        links: [
            { name: "Armazenar / Buscar Moto", path: "/radar", icon: <MdExplore />, detail: "Acesse a interface para escanear placas, estacionar motos em vagas livres e localizar veículos no pátio." },
            { name: "Dashboard Gerencial", path: "/dashboard", icon: <MdDashboard />, detail: "Visualize dados agregados do pátio, como total de vagas, ocupação e lista de motos estacionadas em tempo real." },
        ]
    },
    {
        name: "Visualizações",
        icon: <MdMap className="text-3xl text-white" />,
        description: "Ferramentas visuais para análise e navegação no sistema.",
        links: [
            { name: "Mapa 2D do Pátio", path: "/mapa-2d", icon: <MdMap />, detail: "Explore um modelo esquemático 2D do pátio de Guarulhos, com a disposição de galpões, acessos e áreas de circulação." },
        ]
    },
    {
        name: "Gerenciamento de Dados (Admin)",
        isGroup: true,
        description: "Área administrativa para o cadastro e manutenção das entidades base do sistema: Clientes, Veículos e a Estrutura Física do pátio.",
        items: [
            {
                name: "Clientes",
                icon: <MdPeople className="text-2xl text-white" />,
                description: "Centralize todas as informações dos seus clientes.",
                links: [
                    { name: "Listar Clientes", path: "/clientes/listar", icon: <MdList /> },
                    { name: "Cadastrar Cliente", path: "/clientes/cadastrar", icon: <MdAdd /> },
                    { name: "Buscar Clientes", path: "/clientes/buscar", icon: <MdSearch /> },
                ]
            },
            {
                name: "Veículos",
                icon: <MdDirectionsCar className="text-2xl text-white" />,
                description: "Gerencie toda a sua frota de veículos e suas tags BLE.",
                links: [
                    { name: "Listar Veículos", path: "/veiculo/listar", icon: <MdList /> },
                    { name: "Cadastrar Veículo", path: "/veiculo/cadastrar", icon: <MdAdd /> },
                    { name: "Buscar Veículos", path: "/veiculo/buscar", icon: <MdSearch /> },
                ]
            },
        ]
    },
    {
        name: "Estrutura Física (Admin)",
        isGroup: true,
        description: "Organize os espaços físicos do seu estacionamento. O controle é dividido em Pátios, Zonas e Boxes para máxima flexibilidade.",
        items: [
            {
                name: "Pátios",
                icon: <MdWarehouse className="text-2xl text-white" />,
                description: "Representam as grandes áreas, como um estacionamento principal.",
                links: [
                    { name: "Listar Pátios", path: "/patio/listar", icon: <MdList /> },
                    { name: "Cadastrar Pátio", path: "/patio/cadastrar", icon: <MdAdd /> },
                ]
            },
            {
                name: "Zonas",
                icon: <MdMap className="text-2xl text-white" />,
                description: "São subdivisões dentro de um pátio, como 'Setor A'.",
                links: [
                    { name: "Listar Zonas", path: "/zona/listar", icon: <MdList /> },
                    { name: "Cadastrar Zona", path: "/zona/cadastrar", icon: <MdAdd /> },
                ]
            },
            {
                name: "Boxes (Vagas)",
                icon: <MdInventory2 className="text-2xl text-white" />,
                description: "São as unidades finais de alocação, como uma vaga específica.",
                links: [
                    { name: "Listar Boxes", path: "/box/listar", icon: <MdList /> },
                    { name: "Cadastrar Box", path: "/box/cadastrar", icon: <MdAdd /> },
                ]
            }
        ]
    }
];

export default function MapaDoSitePage() {
    return (
        <>
            <NavBar active="mapa-do-site" />
            <main className="min-h-screen bg-black text-white p-4 md:p-8">
                <div className="container mx-auto bg-[var(--color-mottu-default)] p-6 md:p-8 rounded-lg shadow-xl">
                    <header className="text-center mb-12">
                        <h1 className="text-4xl font-bold text-white tracking-tight">Mapa do Site e Guia de Funcionalidades</h1>
                        <p className="mt-4 text-lg text-slate-200 max-w-3xl mx-auto">
                            Bem-vindo ao guia do Radar Motu. Aqui você encontra uma visão geral de todas as seções e funcionalidades do sistema para facilitar sua navegação.
                        </p>
                    </header>

                    <div className="space-y-10">
                        {sections.map(section => (
                            section.isGroup ? (
                                <div key={section.name} className="bg-black/20 p-6 rounded-lg border border-slate-700/50">
                                    <h2 className="text-2xl font-semibold text-white mb-2">{section.name}</h2>
                                    <p className="text-slate-300 mb-6">{section.description}</p>
                                    <div className="grid md:grid-cols-3 gap-6">
                                        {section.items?.map(item => (
                                            <div key={item.name} className="bg-slate-800 p-4 rounded-md">
                                                <div className="flex items-center gap-3 mb-3">
                                                    {item.icon}
                                                    <h3 className="text-xl font-bold text-[var(--color-mottu-light)]">{item.name}</h3>
                                                </div>
                                                <p className="text-sm text-slate-300 mb-4">{item.description}</p>
                                                <ul className="space-y-2">
                                                    {item.links.map(link => (
                                                        <li key={link.path}>
                                                            <Link href={link.path} className="flex items-center gap-2 text-sky-300 hover:text-sky-100 hover:underline">
                                                                {link.icon} {link.name} <FaExternalLinkAlt size={10} />
                                                            </Link>
                                                        </li>
                                                    ))}
                                                </ul>
                                            </div>
                                        ))}
                                    </div>
                                </div>
                            ) : (
                                <div key={section.name} className="bg-black/20 p-6 rounded-lg border border-slate-700/50">
                                    <div className="flex items-center gap-4 mb-4">
                                        {section.icon}
                                        <div>
                                            <h2 className="text-2xl font-bold text-white">{section.name}</h2>
                                            <p className="text-slate-300">{section.description}</p>
                                        </div>
                                    </div>
                                    <div className="grid sm:grid-cols-1 lg:grid-cols-2 gap-4 border-t border-slate-700 pt-4">
                                        {section.links.map(link => (
                                            <div key={link.path}>
                                                <Link href={link.path} className="flex items-center gap-2 text-lg font-semibold text-sky-300 hover:text-sky-100 hover:underline">
                                                    {link.icon} {link.name} <FaExternalLinkAlt size={12} />
                                                </Link>
                                                <p className="text-sm text-slate-400 pl-7">{link.detail}</p>
                                            </div>
                                        ))}
                                    </div>
                                </div>
                            )
                        ))}
                    </div>
                </div>
            </main>
        </>
    );
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PASTA: src\app\patio
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// ARQUIVO: src\app\patio\layout.tsx   |   TIPO: Componente React (.tsx)
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// src/app/patio/layout.tsx
'use client';
import React from 'react';

export default function PatioLayout({ children }: { children: React.ReactNode; }) {
    return <section>{children}</section>;
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PASTA: src\app\patio\alterar\[id]
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// ARQUIVO: src\app\patio\alterar\[id]\page.tsx   |   TIPO: Componente React (.tsx)
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// src/app/patio/alterar/[id]/page.tsx
"use client";
import React, { useState, useEffect, FormEvent } from 'react';
import { useParams, useRouter } from 'next/navigation';
import Link from 'next/link';
import NavBar from '@/components/nav-bar';
import { PatioService } from '@/utils/api';
import { PatioRequestDto } from '@/types/patio';
import { MdEdit, MdSave, MdArrowBack, MdErrorOutline, MdCheckCircle } from 'react-icons/md';
import { Building, Calendar, Text, Loader2, AlertCircle } from 'lucide-react';

export default function AlterarPatioPage() {
    const router = useRouter();
    const params = useParams();
    const id = typeof params.id === 'string' ? parseInt(params.id, 10) : null;

    const [formData, setFormData] = useState<PatioRequestDto>({
        nomePatio: '', dataEntrada: '', dataSaida: '', observacao: '',
    });

    const [isLoading, setIsLoading] = useState(false);
    const [isFetching, setIsFetching] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const [success, setSuccess] = useState<string | null>(null);

    useEffect(() => {
        if (!id) {
            setError("ID do pátio inválido.");
            setIsFetching(false);
            return;
        }
        const fetchPatio = async () => {
            setIsFetching(true);
            try {
                const data = await PatioService.getById(id);
                setFormData({
                    nomePatio: data.nomePatio,
                    dataEntrada: data.dataEntrada,
                    dataSaida: data.dataSaida,
                    observacao: data.observacao || '',
                });
            } catch (err: any) {
                setError(err.response?.data?.message || "Falha ao carregar dados do pátio.");
            } finally {
                setIsFetching(false);
            }
        };
        fetchPatio();
    }, [id]);

    const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
        setFormData({ ...formData, [e.target.name]: e.target.value });
    };

    const handleSubmit = async (e: FormEvent<HTMLFormElement>) => {
        e.preventDefault();
        if (!id) return;

        setIsLoading(true);
        setError(null);
        setSuccess(null);
        try {
            await PatioService.update(id, formData);
            setSuccess(`Pátio "${formData.nomePatio}" atualizado com sucesso!`);
            setTimeout(() => router.push('/patio/listar'), 2000);
        } catch (err: any) {
            setError(err.response?.data?.message || 'Falha ao atualizar pátio.');
        } finally {
            setIsLoading(false);
        }
    };

    if (isFetching) return (
        <>
            <NavBar active="patio" />
            <main className="flex justify-center items-center min-h-screen bg-black"><Loader2 className="h-12 w-12 animate-spin text-[var(--color-mottu-light)]" /></main>
        </>
    );

    if (error && !formData.nomePatio) return (
        <>
            <NavBar active="patio" />
            <main className="flex justify-center items-center min-h-screen bg-black p-4">
                <div className="text-center bg-red-900/50 p-8 rounded-lg">
                    <AlertCircle className="mx-auto h-12 w-12 text-red-400" />
                    <p className="mt-4 text-red-400">{error}</p>
                    <Link href="/patio/listar" className="mt-6 inline-block px-6 py-2 bg-slate-600 text-white rounded-md">Voltar</Link>
                </div>
            </main>
        </>
    );

    return (
        <>
            <NavBar active="patio" />
            <main className="min-h-screen bg-black text-white p-4 md:p-8 flex items-center justify-center">
                <div className="container max-w-lg mx-auto bg-[var(--color-mottu-default)] p-6 md:p-8 rounded-lg shadow-xl">
                    <h1 className="text-2xl md:text-3xl font-bold text-white flex items-center justify-center mb-6">
                        <MdEdit size={32} className="mr-3" />
                        Alterar Pátio (ID: {id})
                    </h1>
                    {success && <div className="mb-4 flex items-center gap-2 text-sm text-green-700 p-3 rounded-md bg-green-100"><MdCheckCircle className="text-xl" /> <span>{success}</span></div>}
                    {error && <div className="mb-4 flex items-center gap-2 text-sm text-red-700 p-3 rounded-md bg-red-100"><MdErrorOutline className="text-xl" /> <span>{error}</span></div>}
                    <form onSubmit={handleSubmit} className="space-y-4">
                        <div>
                            <label htmlFor="nomePatio" className="block text-sm font-medium text-slate-100 mb-1 flex items-center gap-1"><Building size={16}/> Nome do Pátio</label>
                            <input type="text" id="nomePatio" name="nomePatio" value={formData.nomePatio} onChange={handleChange} required className="w-full p-2 rounded bg-white text-slate-900 h-10" />
                        </div>
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                                <label htmlFor="dataEntrada" className="block text-sm font-medium text-slate-100 mb-1 flex items-center gap-1"><Calendar size={16}/> Data de Entrada</label>
                                <input type="date" id="dataEntrada" name="dataEntrada" value={formData.dataEntrada} onChange={handleChange} required className="w-full p-2 rounded bg-white text-slate-900 h-10 date-input-fix" />
                            </div>
                            <div>
                                <label htmlFor="dataSaida" className="block text-sm font-medium text-slate-100 mb-1 flex items-center gap-1"><Calendar size={16}/> Data de Saída</label>
                                <input type="date" id="dataSaida" name="dataSaida" value={formData.dataSaida} onChange={handleChange} required className="w-full p-2 rounded bg-white text-slate-900 h-10 date-input-fix" />
                            </div>
                        </div>
                        <div>
                            <label htmlFor="observacao" className="block text-sm font-medium text-slate-100 mb-1 flex items-center gap-1"><Text size={16}/> Observação</label>
                            <textarea id="observacao" name="observacao" value={formData.observacao || ''} onChange={handleChange} rows={3} className="w-full p-2 rounded bg-white text-slate-900" />
                        </div>
                        <div className="flex flex-col sm:flex-row justify-center gap-4 pt-4">
                            <button type="submit" disabled={isLoading} className="w-full sm:w-auto flex items-center justify-center gap-2 px-6 py-3 font-semibold text-white bg-[var(--color-mottu-dark)] rounded-md shadow hover:bg-opacity-80 disabled:opacity-50">
                                <MdSave size={20} /> {isLoading ? 'Salvando...' : 'Salvar Alterações'}
                            </button>
                            <Link href="/patio/listar" className="w-full sm:w-auto flex items-center justify-center gap-2 px-6 py-3 font-medium text-[var(--color-mottu-dark)] bg-white rounded-md shadow hover:bg-gray-100">
                                <MdArrowBack size={20} /> Voltar para Lista
                            </Link>
                        </div>
                    </form>
                </div>
            </main>
        </>
    );
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PASTA: src\app\patio\buscar
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// ARQUIVO: src\app\patio\buscar\page.tsx   |   TIPO: Componente React (.tsx)
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// src/app/patio/buscar/page.tsx
"use client";

import { useState, FormEvent, ChangeEvent } from 'react';
import Link from 'next/link';
import NavBar from '@/components/nav-bar';
import { MdSearch, MdClear, MdEdit, MdDelete, MdVisibility, MdErrorOutline, MdCheckCircle } from 'react-icons/md';
import { Building, Search as SearchIconLucide } from 'lucide-react';
import { PatioResponseDto, PatioFilter } from '@/types/patio';
import { SpringPage } from '@/types/common';
import { PatioService } from '@/utils/api';

const initialFilterState: PatioFilter = {
    nomePatio: '',
    dataEntradaInicio: '',
    dataEntradaFim: '',
    dataSaidaInicio: '',
    dataSaidaFim: '',
    observacao: '',
    veiculoPlaca: '',
    enderecoCidade: '',
    contatoEmail: '',
    zonaNome: '',
    boxNome: '', // Adicionado para corresponder ao backend
};

export default function BuscarPatiosPage() {
    const [patios, setPatios] = useState<PatioResponseDto[]>([]);
    const [pageInfo, setPageInfo] = useState<SpringPage<PatioResponseDto> | null>(null);
    const [currentPage, setCurrentPage] = useState(0);
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const [successMessage, setSuccessMessage] = useState<string | null>(null);
    const [hasSearched, setHasSearched] = useState(false);
    const [filter, setFilter] = useState<PatioFilter>(initialFilterState);

    const ITEMS_PER_PAGE = 9;
    const SORT_ORDER = 'idPatio,asc';

    const fetchData = async (pageToFetch = 0, currentFilters = filter) => {
        setIsLoading(true);
        setError(null);
        setHasSearched(true);

        if (pageToFetch === 0) {
            setPatios([]);
            setPageInfo(null);
        }

        try {
            const data = await PatioService.listarPaginadoFiltrado(currentFilters, pageToFetch, ITEMS_PER_PAGE, SORT_ORDER);
            setPatios(data.content);
            setPageInfo(data);
            setCurrentPage(data.number);
        } catch (err: any) {
            setError(err.response?.data?.message || err.message || 'Erro ao buscar pátios.');
            setPatios([]);
            setPageInfo(null);
        } finally {
            setIsLoading(false);
        }
    };

    const handleFilterChange = (e: ChangeEvent<HTMLInputElement>) => {
        setFilter(prev => ({ ...prev, [e.target.name]: e.target.value }));
    };

    const handleSearch = (e: FormEvent) => {
        e.preventDefault();
        setCurrentPage(0);
        fetchData(0, filter);
    };

    const handleClearFilters = () => {
        setFilter(initialFilterState);
        setPatios([]);
        setPageInfo(null);
        setCurrentPage(0);
        setHasSearched(false);
        setError(null);
    };

    const handlePageChange = (newPage: number) => {
        fetchData(newPage, filter);
    };

    return (
        <>
            <NavBar active="patio" />
            <main className="min-h-screen bg-black text-white p-4 md:p-8">
                <div className="container mx-auto bg-[var(--color-mottu-default)] p-6 md:p-8 rounded-lg shadow-xl">
                    <h1 className="flex items-center justify-center gap-2 text-2xl md:text-3xl font-bold mb-6 text-center text-white">
                        <SearchIconLucide size={30} /> Buscar Pátios
                    </h1>

                    <form onSubmit={handleSearch} className="mb-8 p-4 bg-black/20 rounded-lg">
                        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4 items-end">
                            {/* Linha 1 */}
                            <input type="text" name="nomePatio" value={filter.nomePatio || ''} onChange={handleFilterChange} placeholder="Nome do Pátio..." className="w-full p-2 h-10 rounded bg-white text-slate-900"/>
                            <input type="text" name="veiculoPlaca" value={filter.veiculoPlaca || ''} onChange={handleFilterChange} placeholder="Placa do Veículo..." className="w-full p-2 h-10 rounded bg-white text-slate-900"/>
                            <input type="text" name="zonaNome" value={filter.zonaNome || ''} onChange={handleFilterChange} placeholder="Nome da Zona..." className="w-full p-2 h-10 rounded bg-white text-slate-900"/>
                            <input type="text" name="boxNome" value={filter.boxNome || ''} onChange={handleFilterChange} placeholder="Nome do Box..." className="w-full p-2 h-10 rounded bg-white text-slate-900"/>

                            {/* Botões */}
                            <div className="lg:col-span-4 flex flex-col sm:flex-row justify-center items-center gap-3 pt-4">
                                <button type="submit" className="w-full sm:w-auto flex items-center justify-center gap-2 px-6 py-2.5 font-semibold text-white bg-[var(--color-mottu-dark)] rounded-md shadow hover:bg-opacity-80 h-10">
                                    <MdSearch size={20} /> Buscar Pátios
                                </button>
                                <button type="button" onClick={handleClearFilters} className="w-full sm:w-auto flex items-center justify-center gap-2 px-6 py-2.5 font-medium text-slate-700 bg-gray-200 rounded-md shadow hover:bg-gray-300 h-10">
                                    <MdClear size={20} /> Limpar Filtros
                                </button>
                            </div>
                        </div>
                    </form>

                    {successMessage && <div className="mb-4 text-center text-green-700 p-3 rounded-md bg-green-100"><MdCheckCircle className="inline mr-2" />{successMessage}</div>}
                    {error && <div className="mb-4 text-center text-red-700 p-3 rounded-md bg-red-100"><MdErrorOutline className="inline mr-2" />{error}</div>}

                    {isLoading && <p className="text-center text-slate-100 py-10">Buscando pátios...</p>}

                    {!isLoading && hasSearched && patios.length === 0 && !error && (
                        <div className="text-center py-10"><p className="text-slate-300">Nenhum pátio encontrado para os critérios informados.</p></div>
                    )}

                    {!isLoading && patios.length > 0 && (
                        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
                            {patios.map((patio) => (
                                <div key={patio.idPatio} className="bg-white text-slate-800 rounded-lg shadow-lg p-5 flex flex-col justify-between transition-all hover:shadow-2xl hover:scale-105">
                                    <div>
                                        <div className="flex items-center mb-3">
                                            <span className="text-xs font-semibold bg-slate-200 text-slate-700 px-2 py-0.5 rounded-full mr-2">ID: {patio.idPatio}</span>
                                            <h2 className="text-xl font-bold text-[var(--color-mottu-dark)] truncate">{patio.nomePatio}</h2>
                                        </div>
                                        <p className="text-sm text-slate-600">Entrada: {new Date(patio.dataEntrada).toLocaleDateString('pt-BR')}</p>
                                    </div>
                                    <div className="flex justify-end items-center gap-2 border-t border-slate-200 pt-3 mt-4">
                                        <Link href={`/patio/detalhes/${patio.idPatio}`} className="p-2 rounded-full text-blue-600 hover:bg-blue-100" title="Ver Detalhes"><MdVisibility size={22}/></Link>
                                        <Link href={`/patio/alterar/${patio.idPatio}`} className="p-2 rounded-full text-yellow-500 hover:bg-yellow-100" title="Editar Pátio"><MdEdit size={20}/></Link>
                                        <Link href={`/patio/deletar/${patio.idPatio}`} className="p-2 rounded-full text-red-500 hover:bg-red-100" title="Excluir Pátio"><MdDelete size={20}/></Link>
                                    </div>
                                </div>
                            ))}
                        </div>
                    )}

                    {!isLoading && pageInfo && pageInfo.totalPages > 1 && (
                        <div className="mt-8 flex justify-between items-center text-sm text-slate-100">
                            <span>Página {pageInfo.number + 1} de {pageInfo.totalPages}</span>
                            <div className="flex gap-2">
                                <button onClick={() => handlePageChange(currentPage - 1)} disabled={pageInfo.first} className="px-3 py-1.5 rounded-md bg-slate-700 hover:bg-slate-600 disabled:opacity-50"><MdChevronLeft/></button>
                                <button onClick={() => handlePageChange(currentPage + 1)} disabled={pageInfo.last} className="px-3 py-1.5 rounded-md bg-slate-700 hover:bg-slate-600 disabled:opacity-50"><MdChevronRight/></button>
                            </div>
                        </div>
                    )}
                </div>
            </main>
        </>
    );
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PASTA: src\app\patio\cadastrar
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// ARQUIVO: src\app\patio\cadastrar\page.tsx   |   TIPO: Componente React (.tsx)
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// src/app/patio/cadastrar/page.tsx
"use client";
import React, { useState, FormEvent } from 'react';
import Link from 'next/link';
import NavBar from '@/components/nav-bar';
import { PatioService } from '@/utils/api';
import { PatioRequestDto } from '@/types/patio';
import { MdAdd, MdSave, MdArrowBack, MdErrorOutline, MdCheckCircle } from 'react-icons/md';
import { Building, Calendar, Text } from 'lucide-react';

export default function CadastrarPatioPage() {
    const today = new Date().toISOString().split('T')[0];
    const initialState: PatioRequestDto = {
        nomePatio: '', dataEntrada: today, dataSaida: today, observacao: '',
    };
    const [formData, setFormData] = useState<PatioRequestDto>(initialState);
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const [success, setSuccess] = useState<string | null>(null);

    const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
        setFormData({ ...formData, [e.target.name]: e.target.value });
    };

    const handleSubmit = async (e: FormEvent<HTMLFormElement>) => {
        e.preventDefault();
        setIsLoading(true);
        setError(null);
        setSuccess(null);
        try {
            const createdPatio = await PatioService.create(formData);
            setSuccess(`Pátio "${createdPatio.nomePatio}" cadastrado com sucesso!`);
            setFormData(initialState);
            setTimeout(() => setSuccess(null), 5000);
        } catch (err: any) {
            setError(err.response?.data?.message || 'Falha ao cadastrar pátio.');
        } finally {
            setIsLoading(false);
        }
    };

    return (
        <>
            <NavBar active="patio" />
            <main className="min-h-screen bg-black text-white p-4 md:p-8 flex items-center justify-center">
                <div className="container max-w-lg mx-auto bg-[var(--color-mottu-default)] p-6 md:p-8 rounded-lg shadow-xl">
                    <h1 className="text-2xl md:text-3xl font-bold text-white flex items-center justify-center mb-6">
                        <MdAdd size={32} className="mr-3" />
                        Cadastrar Novo Pátio
                    </h1>
                    {success && <div className="mb-4 flex items-center gap-2 text-sm text-green-700 p-3 rounded-md bg-green-100 border border-green-300"><MdCheckCircle className="text-xl" /> <span>{success}</span></div>}
                    {error && <div className="mb-4 flex items-center gap-2 text-sm text-red-700 p-3 rounded-md bg-red-100 border border-red-300"><MdErrorOutline className="text-xl" /> <span>{error}</span></div>}

                    <form onSubmit={handleSubmit} className="space-y-4">
                        <div className="group">
                            <label htmlFor="nomePatio" className="block text-sm font-medium text-slate-100 mb-1 flex items-center gap-1"><Building size={16}/> Nome do Pátio <span className="text-red-300">*</span></label>
                            <input type="text" id="nomePatio" name="nomePatio" value={formData.nomePatio} onChange={handleChange} required placeholder="Ex: Pátio Principal" className="w-full p-2 rounded bg-white text-slate-900 h-10 peer required:invalid:border-red-500" />
                            <p className="mt-1 text-xs text-slate-300 invisible peer-invalid:visible">Campo obrigatório.</p>
                        </div>
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div className="group">
                                <label htmlFor="dataEntrada" className="block text-sm font-medium text-slate-100 mb-1 flex items-center gap-1"><Calendar size={16}/> Data de Entrada <span className="text-red-300">*</span></label>
                                <input type="date" id="dataEntrada" name="dataEntrada" value={formData.dataEntrada} onChange={handleChange} required className="w-full p-2 rounded bg-white text-slate-900 h-10 date-input-fix peer" />
                                <p className="mt-1 text-xs text-slate-300 invisible peer-invalid:visible">Campo obrigatório.</p>
                            </div>
                            <div className="group">
                                <label htmlFor="dataSaida" className="block text-sm font-medium text-slate-100 mb-1 flex items-center gap-1"><Calendar size={16}/> Data de Saída <span className="text-red-300">*</span></label>
                                <input type="date" id="dataSaida" name="dataSaida" value={formData.dataSaida} onChange={handleChange} required className="w-full p-2 rounded bg-white text-slate-900 h-10 date-input-fix peer" />
                                <p className="mt-1 text-xs text-slate-300 invisible peer-invalid:visible">Campo obrigatório.</p>
                            </div>
                        </div>
                        <div>
                            <label htmlFor="observacao" className="block text-sm font-medium text-slate-100 mb-1 flex items-center gap-1"><Text size={16}/> Observação</label>
                            <textarea id="observacao" name="observacao" value={formData.observacao || ''} onChange={handleChange} rows={3} placeholder="Alguma observação sobre o pátio..." className="w-full p-2 rounded bg-white text-slate-900" />
                        </div>
                        <div className="flex flex-col sm:flex-row justify-center gap-4 pt-4">
                            <button type="submit" disabled={isLoading} className="w-full sm:w-auto flex items-center justify-center gap-2 px-6 py-3 font-semibold text-white bg-[var(--color-mottu-dark)] rounded-md shadow hover:bg-opacity-80 disabled:opacity-50">
                                <MdSave size={20} /> {isLoading ? 'Salvando...' : 'Salvar Pátio'}
                            </button>
                            <Link href="/patio/listar" className="w-full sm:w-auto flex items-center justify-center gap-2 px-6 py-3 font-medium text-[var(--color-mottu-dark)] bg-white rounded-md shadow hover:bg-gray-100">
                                <MdArrowBack size={20} /> Voltar para Lista
                            </Link>
                        </div>
                    </form>
                </div>
            </main>
        </>
    );
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PASTA: src\app\patio\deletar\[id]
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// ARQUIVO: src\app\patio\deletar\[id]\page.tsx   |   TIPO: Componente React (.tsx)
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// src/app/patio/deletar/[id]/page.tsx
"use client";
import { useState, useEffect } from 'react';
import { useParams, useRouter } from 'next/navigation';
import Link from 'next/link';
import NavBar from '@/components/nav-bar';
import { PatioService } from '@/utils/api';
import { PatioResponseDto } from '@/types/patio';
import { Loader2, AlertCircle, Trash2, ArrowLeft } from 'lucide-react';

export default function DeletarPatioPage() {
    const params = useParams();
    const router = useRouter();
    const id = typeof params.id === 'string' ? parseInt(params.id, 10) : null;
    const [patio, setPatio] = useState<PatioResponseDto | null>(null);
    const [isDeleting, setIsDeleting] = useState(false);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);

    useEffect(() => {
        if (!id) {
            setError("ID do pátio inválido.");
            setIsLoading(false);
            return;
        }
        const fetchPatio = async () => {
            setIsLoading(true);
            try {
                const data = await PatioService.getById(id);
                setPatio(data);
            } catch (err: any) {
                setError(err.response?.data?.message || "Pátio não encontrado.");
            } finally {
                setIsLoading(false);
            }
        };
        fetchPatio();
    }, [id]);

    const handleConfirmDelete = async () => {
        if (!id) return;
        setIsDeleting(true);
        setError(null);
        try {
            await PatioService.delete(id);
            router.push('/patio/listar');
        } catch (err: any) {
            setError(err.response?.data?.message || "Erro ao excluir pátio.");
            setIsDeleting(false);
        }
    };

    if (isLoading) return (
        <>
            <NavBar active="patio" />
            <main className="flex justify-center items-center min-h-screen bg-black"><Loader2 className="h-12 w-12 animate-spin text-[var(--color-mottu-light)]" /></main>
        </>
    );

    if (error && !patio) return (
        <>
            <NavBar active="patio" />
            <main className="flex justify-center items-center min-h-screen bg-black p-4">
                <div className="text-center bg-red-900/50 p-8 rounded-lg">
                    <AlertCircle className="mx-auto h-12 w-12 text-red-400" />
                    <p className="mt-4 text-red-400">{error}</p>
                    <Link href="/patio/listar" className="mt-6 inline-flex items-center gap-2 px-6 py-2 bg-slate-600 text-white rounded-md"><ArrowLeft size={18}/> Voltar para Lista</Link>
                </div>
            </main>
        </>
    );

    if (!patio) return null;

    return (
        <>
            <NavBar active="patio" />
            <main className="min-h-screen bg-black text-white p-4 md:p-8 flex items-center justify-center">
                <div className="container max-w-lg mx-auto bg-slate-900 border border-red-500/50 p-6 md:p-8 rounded-lg shadow-xl text-center">
                    <Trash2 className="mx-auto h-12 w-12 text-red-400 mb-4" />
                    <h1 className="text-2xl font-bold text-white mb-2">Confirmar Exclusão</h1>
                    <p className="text-slate-300 mb-6">
                        Tem certeza que deseja excluir o pátio <strong className="text-white">{patio.nomePatio}</strong> (ID: {patio.idPatio})?
                    </p>

                    {error && <div className="mb-4 text-red-400 p-3 rounded-md bg-red-900/50">{error}</div>}

                    <div className="flex justify-center gap-4">
                        <Link href="/patio/listar" className="px-6 py-2 font-semibold text-slate-800 bg-gray-300 rounded-md hover:bg-gray-400">
                            Cancelar
                        </Link>
                        <button onClick={handleConfirmDelete} disabled={isDeleting} className="px-6 py-2 font-semibold text-white bg-red-600 rounded-md hover:bg-red-700 disabled:opacity-50 flex items-center gap-2">
                            {isDeleting ? <><Loader2 className="animate-spin h-5 w-5"/> Excluindo...</> : <>Excluir</>}
                        </button>
                    </div>
                </div>
            </main>
        </>
    );
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PASTA: src\app\patio\detalhes\[id]
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// ARQUIVO: src\app\patio\detalhes\[id]\page.tsx   |   TIPO: Componente React (.tsx)
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// src/app/patio/detalhes/[id]/page.tsx
"use client";
import { useState, useEffect } from 'react';
import { useParams } from 'next/navigation';
import Link from 'next/link';
import NavBar from '@/components/nav-bar';
import { PatioService } from '@/utils/api';
import { PatioResponseDto } from '@/types/patio';
import { Loader2, AlertCircle, Building, Edit, ArrowLeft } from 'lucide-react';

export default function DetalhesPatioPage() {
    const params = useParams();
    const id = typeof params.id === 'string' ? parseInt(params.id, 10) : null;
    const [patio, setPatio] = useState<PatioResponseDto | null>(null);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);

    useEffect(() => {
        if (!id) {
            setError("ID do pátio inválido.");
            setIsLoading(false);
            return;
        }
        const fetchPatio = async () => {
            setIsLoading(true);
            try {
                const data = await PatioService.getById(id);
                setPatio(data);
            } catch (err: any) {
                setError(err.response?.data?.message || "Pátio não encontrado.");
            } finally {
                setIsLoading(false);
            }
        };
        fetchPatio();
    }, [id]);

    if (isLoading) return (
        <>
            <NavBar active="patio" />
            <main className="flex justify-center items-center min-h-screen bg-black"><Loader2 className="h-12 w-12 animate-spin text-[var(--color-mottu-light)]" /></main>
        </>
    );

    if (error) return (
        <>
            <NavBar active="patio" />
            <main className="flex justify-center items-center min-h-screen bg-black p-4">
                <div className="text-center bg-red-900/50 p-8 rounded-lg">
                    <AlertCircle className="mx-auto h-12 w-12 text-red-400" />
                    <p className="mt-4 text-red-400">{error}</p>
                    <Link href="/patio/listar" className="mt-6 inline-flex items-center gap-2 px-6 py-2 bg-slate-600 text-white rounded-md"><ArrowLeft size={18}/> Voltar para Lista</Link>
                </div>
            </main>
        </>
    );

    if (!patio) return null;

    return (
        <>
            <NavBar active="patio" />
            <main className="min-h-screen bg-black text-white p-4 md:p-8">
                <div className="container max-w-4xl mx-auto bg-[var(--color-mottu-default)] p-6 md:p-8 rounded-lg shadow-xl">
                    <div className="flex flex-col sm:flex-row justify-between items-start mb-6">
                        <div>
                            <h1 className="text-2xl md:text-3xl font-bold text-white">{patio.nomePatio}</h1>
                            <p className="text-slate-300">Detalhes do Pátio (ID: {patio.idPatio})</p>
                        </div>
                        <div className="flex gap-2 mt-4 sm:mt-0">
                            <Link href="/patio/listar" className="flex items-center gap-2 px-4 py-2 font-medium text-[var(--color-mottu-dark)] bg-white rounded-md shadow hover:bg-gray-100">
                                <ArrowLeft size={18} /> Voltar
                            </Link>
                            <Link href={`/patio/alterar/${patio.idPatio}`} className="flex items-center gap-2 px-4 py-2 font-semibold text-white bg-[var(--color-mottu-dark)] rounded-md shadow hover:bg-opacity-80">
                                <Edit size={18} /> Editar
                            </Link>
                        </div>
                    </div>
                    <div className="bg-black/20 p-4 rounded-lg">
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-x-6 gap-y-2 text-sm">
                            <p><strong>Nome:</strong> {patio.nomePatio}</p>
                            <p><strong>Data de Entrada:</strong> {new Date(patio.dataEntrada).toLocaleDateString('pt-BR')}</p>
                            <p><strong>Data de Saída:</strong> {new Date(patio.dataSaida).toLocaleDateString('pt-BR')}</p>
                            <p className="md:col-span-2"><strong>Observação:</strong> {patio.observacao || '-'}</p>
                        </div>
                    </div>
                </div>
            </main>
        </>
    );
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PASTA: src\app\patio\listar
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// ARQUIVO: src\app\patio\listar\page.tsx   |   TIPO: Componente React (.tsx)
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// src/app/patio/listar/page.tsx
"use client";
import { useState, useEffect, FormEvent, ChangeEvent } from 'react';
import Link from 'next/link';
import NavBar from '@/components/nav-bar';
import { PatioService } from '@/utils/api';
import { PatioResponseDto, PatioFilter } from '@/types/patio';
import { SpringPage } from '@/types/common';
import { MdSearch, MdClear, MdAdd, MdChevronLeft, MdChevronRight, MdEdit, MdDelete, MdVisibility, MdErrorOutline } from 'react-icons/md';
import { Building } from 'lucide-react';

const initialFilterState: PatioFilter = { nomePatio: "" };

export default function ListarPatiosPage() {
    const [patios, setPatios] = useState<PatioResponseDto[]>([]);
    const [pageInfo, setPageInfo] = useState<SpringPage<PatioResponseDto> | null>(null);
    const [currentPage, setCurrentPage] = useState(0);
    const [filtros, setFiltros] = useState<PatioFilter>(initialFilterState);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);

    const ITEMS_PER_PAGE = 9;

    const fetchData = async (page = 0, currentFilters = filtros) => {
        setIsLoading(true);
        setError(null);
        try {
            const data = await PatioService.listarPaginadoFiltrado(currentFilters, page, ITEMS_PER_PAGE);
            setPatios(data.content);
            setPageInfo(data);
            setCurrentPage(data.number);
        } catch (err: any) {
            setError(err.response?.data?.message || 'Erro ao buscar pátios.');
        } finally {
            setIsLoading(false);
        }
    };

    useEffect(() => {
        fetchData();
    }, []);

    const handleFilterChange = (e: ChangeEvent<HTMLInputElement>) => {
        setFiltros({ ...filtros, [e.target.name]: e.target.value });
    };

    const handleFilterSubmit = (e: FormEvent) => {
        e.preventDefault();
        fetchData(0, filtros);
    };

    const handleClearFilters = () => {
        setFiltros(initialFilterState);
        fetchData(0, initialFilterState);
    };

    const handlePageChange = (newPage: number) => {
        fetchData(newPage, filtros);
    };

    return (
        <>
            <NavBar active="patio" />
            <main className="min-h-screen bg-black text-white p-4 md:p-8">
                <div className="container mx-auto bg-[var(--color-mottu-default)] p-6 md:p-8 rounded-lg shadow-xl">
                    <div className="flex flex-col sm:flex-row justify-between items-center mb-8">
                        <h1 className="text-2xl md:text-3xl font-bold text-white flex items-center">
                            <Building size={32} className="mr-3" />
                            Pátios Cadastrados
                        </h1>
                        <Link href="/patio/cadastrar" className="mt-4 sm:mt-0 flex items-center gap-2 px-4 py-2.5 font-semibold text-[var(--color-mottu-dark)] bg-white rounded-md shadow hover:bg-gray-100 transition-colors">
                            <MdAdd size={20} /> Novo Pátio
                        </Link>
                    </div>
                    {error && <div className="mb-4 text-center text-red-700 p-3 rounded-md bg-red-100"><MdErrorOutline className="inline mr-2" />{error}</div>}
                    <form onSubmit={handleFilterSubmit} className="mb-8 p-4 bg-black/20 rounded-lg">
                        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4 items-end">
                            <input type="text" name="nomePatio" value={filtros.nomePatio || ''} onChange={handleFilterChange} placeholder="Filtrar por nome..." className="w-full p-2 h-10 rounded bg-white text-slate-900"/>
                            <div className="flex gap-2 md:col-start-3">
                                <button type="submit" className="flex-1 flex items-center justify-center gap-2 h-10 px-4 font-semibold text-white bg-[var(--color-mottu-dark)] rounded-md hover:bg-opacity-80">
                                    <MdSearch /> Buscar
                                </button>
                                <button type="button" onClick={handleClearFilters} className="flex-1 flex items-center justify-center gap-2 h-10 px-4 font-medium text-slate-700 bg-gray-200 rounded-md hover:bg-gray-300">
                                    <MdClear /> Limpar
                                </button>
                            </div>
                        </div>
                    </form>
                    {isLoading ? <p className="text-center text-slate-100 py-10">Carregando...</p> : patios.length > 0 ? (
                        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
                            {patios.map((patio) => (
                                <div key={patio.idPatio} className="bg-white text-slate-800 rounded-lg shadow-lg p-5 flex flex-col justify-between transition-all hover:shadow-2xl hover:scale-105">
                                    <div>
                                        <div className="flex items-center mb-3">
                                            <span className="text-xs font-semibold bg-slate-200 text-slate-700 px-2 py-0.5 rounded-full mr-2">ID: {patio.idPatio}</span>
                                            <h2 className="text-xl font-bold text-[var(--color-mottu-dark)] truncate">{patio.nomePatio}</h2>
                                        </div>
                                        <p className="text-sm text-slate-600">Entrada: {new Date(patio.dataEntrada).toLocaleDateString('pt-BR')}</p>
                                    </div>
                                    <div className="flex justify-end items-center gap-2 border-t border-slate-200 pt-3 mt-4">
                                        <Link href={`/patio/detalhes/${patio.idPatio}`} className="p-2 rounded-full text-blue-600 hover:bg-blue-100" title="Ver Detalhes"><MdVisibility size={22}/></Link>
                                        <Link href={`/patio/alterar/${patio.idPatio}`} className="p-2 rounded-full text-yellow-500 hover:bg-yellow-100" title="Editar Pátio"><MdEdit size={20}/></Link>
                                        <Link href={`/patio/deletar/${patio.idPatio}`} className="p-2 rounded-full text-red-500 hover:bg-red-100" title="Excluir Pátio"><MdDelete size={20}/></Link>
                                    </div>
                                </div>
                            ))}
                        </div>
                    ) : <p className="text-center text-slate-300 py-10">Nenhum pátio encontrado.</p>}
                    {!isLoading && pageInfo && pageInfo.totalPages > 1 && (
                        <div className="mt-8 flex justify-between items-center text-sm text-slate-100">
                            <span>Página {pageInfo.number + 1} de {pageInfo.totalPages}</span>
                            <div className="flex gap-2">
                                <button onClick={() => handlePageChange(currentPage - 1)} disabled={pageInfo.first} className="px-3 py-1.5 rounded-md bg-slate-700 hover:bg-slate-600 disabled:opacity-50"><MdChevronLeft/></button>
                                <button onClick={() => handlePageChange(currentPage + 1)} disabled={pageInfo.last} className="px-3 py-1.5 rounded-md bg-slate-700 hover:bg-slate-600 disabled:opacity-50"><MdChevronRight/></button>
                            </div>
                        </div>
                    )}
                </div>
            </main>
        </>
    );
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PASTA: src\app\radar
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// ARQUIVO: src\app\radar\page.tsx   |   TIPO: Componente React (.tsx)
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// src/app/radar/page.tsx
"use client";
import Link from 'next/link';
import NavBar from '@/components/nav-bar';
import { ArrowRight, Search, ParkingSquare } from 'lucide-react';

export default function RadarPage() {
    return (
        <>
            <NavBar active="radar" />
            <main className="min-h-screen bg-black text-white p-4 md:p-8 flex items-center justify-center">
                <div className="container max-w-2xl mx-auto text-center">
                    <h1 className="text-4xl md:text-5xl font-bold text-white mb-4">Radar Motu</h1>
                    <p className="text-lg text-slate-300 mb-12">Selecione uma opção para começar.</p>

                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <Link href="/radar/armazenar" className="block p-8 bg-[var(--color-mottu-default)] rounded-lg shadow-lg hover:scale-105 transition-transform">
                            <ParkingSquare size={48} className="mx-auto mb-4 text-white"/>
                            <h2 className="text-2xl font-semibold text-white">Armazenar Moto</h2>
                            <p className="text-slate-200 mt-2">Estacione sua moto rapidamente encontrando uma vaga livre.</p>
                        </Link>

                        <Link href="/radar/buscar" className="block p-8 bg-slate-800 rounded-lg shadow-lg hover:scale-105 transition-transform">
                            <Search size={48} className="mx-auto mb-4 text-white"/>
                            <h2 className="text-2xl font-semibold text-white">Buscar Moto</h2>
                            <p className="text-slate-200 mt-2">Localize sua moto no pátio com o mapa de localização.</p>
                        </Link>
                    </div>
                </div>
            </main>
        </>
    );
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PASTA: src\app\radar\armazenar
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// ARQUIVO: src\app\radar\armazenar\page.tsx   |   TIPO: Componente React (.tsx)
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

"use client";

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import NavBar from '@/components/nav-bar';
import OcrScanner from '@/components/OcrScanner';
import { EstacionamentoService } from '@/utils/api';
import { BoxResponseDto } from '@/types/box';
import { Loader2, CheckCircle, AlertTriangle, MapPin } from 'lucide-react';

export default function ArmazenarPage() {
    const router = useRouter();
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const [vaga, setVaga] = useState<BoxResponseDto | null>(null);

    const handlePlateScan = async (placa: string) => {
        setIsLoading(true);
        setError(null);
        setVaga(null);
        try {
            const vagaEncontrada = await EstacionamentoService.estacionar(placa);
            setVaga(vagaEncontrada);
        } catch (err: any) {
            setError(err.response?.data?.message || 'Falha ao tentar estacionar. Verifique se a moto está registada e não está estacionada.');
        } finally {
            setIsLoading(false);
        }
    };

    return (
        <>
            <NavBar active="radar" />
            <main className="min-h-screen bg-black text-white p-4 md:p-8 flex flex-col items-center justify-center">
                <h1 className="text-3xl font-bold mb-8">Armazenar Moto</h1>

                {!vaga && <OcrScanner onPlateRecognized={handlePlateScan} />}

                {isLoading && (
                    <div className="mt-8 flex flex-col items-center gap-2 text-sky-300">
                        <Loader2 size={32} className="animate-spin" />
                        <p>A procurar vaga para a moto...</p>
                    </div>
                )}

                {error && (
                    <div className="mt-8 p-4 bg-red-900/50 border border-red-500 rounded-lg text-center">
                        <AlertTriangle size={32} className="mx-auto text-red-400 mb-2"/>
                        <p className="font-semibold">Erro ao Estacionar</p>
                        <p className="text-red-300 text-sm">{error}</p>
                    </div>
                )}

                {vaga && (
                    <div className="mt-8 p-6 bg-green-900/50 border border-green-500 rounded-lg text-center animate-fade-in">
                        <CheckCircle size={48} className="mx-auto text-green-400 mb-4"/>
                        <h2 className="text-2xl font-bold text-white">Vaga Encontrada!</h2>
                        <p className="text-slate-200 mb-4">A moto foi alocada com sucesso.</p>
                        <div className="text-left bg-black/30 p-4 rounded-md">
                            <p className="flex items-center gap-2 text-lg"><MapPin /> <strong>Vaga:</strong> {vaga.nome}</p>
                            <p className="text-sm text-slate-300">Status: {vaga.status === 'O' ? 'Ocupada' : 'Livre'}</p>
                        </div>
                        <button onClick={() => router.push('/radar')} className="mt-6 w-full px-6 py-3 font-semibold text-white bg-[var(--color-mottu-default)] rounded-md">
                            Voltar ao Início
                        </button>
                    </div>
                )}
            </main>
        </>
    );
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PASTA: src\app\radar\buscar
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// ARQUIVO: src\app\radar\buscar\page.tsx   |   TIPO: Componente React (.tsx)
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

"use client";

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import NavBar from '@/components/nav-bar';
import OcrScanner from '@/components/OcrScanner';
import { Loader2, AlertTriangle } from 'lucide-react';

export default function BuscarMotoPage() {
    const router = useRouter();
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);

    // Função para lidar com a placa reconhecida pelo OCR
    const handlePlateScan = async (placa: string) => {
        if (!placa) {
            setError("Nenhuma placa foi reconhecida.");
            return;
        }
        setIsLoading(true);
        setError(null);

        // Redireciona para a página de localização com a placa na URL.
        // A página de localização será responsável por procurar os dados.
        router.push(`/radar/localizar/${placa}`);
    };

    return (
        <>
            <NavBar active="radar" />
            <main className="min-h-screen bg-black text-white p-4 md:p-8 flex flex-col items-center justify-center">
                <div className="text-center mb-8">
                    <h1 className="text-3xl font-bold">Buscar Moto</h1>
                    <p className="text-slate-300">Escaneie a placa para encontrar a localização do veículo.</p>
                </div>

                <OcrScanner onPlateRecognized={handlePlateScan} />

                {isLoading && (
                    <div className="mt-8 flex flex-col items-center gap-2 text-sky-300">
                        <Loader2 size={32} className="animate-spin" />
                        <p>A redirecionar para o mapa...</p>
                    </div>
                )}

                {error && (
                    <div className="mt-8 p-4 bg-red-900/50 border border-red-500 rounded-lg text-center">
                        <AlertTriangle size={32} className="mx-auto text-red-400 mb-2"/>
                        <p className="font-semibold">Erro</p>
                        <p className="text-red-300 text-sm">{error}</p>
                    </div>
                )}
            </main>
        </>
    );
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PASTA: src\app\radar\localizar\[placa]
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// ARQUIVO: src\app\radar\localizar\[placa]\page.tsx   |   TIPO: Componente React (.tsx)
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

"use client";

import { useEffect, useState } from "react";
import { useParams, useRouter } from "next/navigation";
import NavBar from "@/components/nav-bar";

type BuscarResp =
    | { found: true; placa: string; boxId: number; boxNome: string; status: string }
    | { found: false; placa: string };

const MAP_PATH = "/vagas/mapa"; // se seu mapa estiver noutro caminho, ajuste aqui

export default function LocalizarPorPlacaPage() {
    const router = useRouter();
    const { placa: raw } = useParams<{ placa: string }>();
    const placa = (raw ?? "").toString().toUpperCase();

    const [msg, setMsg] = useState("Buscando...");

    useEffect(() => {
        let alive = true;
        const run = async () => {
            if (!placa) { setMsg("Placa inválida."); return; }
            try {
                const res = await fetch(`/api/vagas/buscar-placa/${encodeURIComponent(placa)}`);
                if (!res.ok) { setMsg(`Erro ${res.status} ao buscar a placa.`); return; }
                const data = (await res.json()) as BuscarResp;
                if (!alive) return;

                if (data.found) {
                    const url = `${MAP_PATH}?highlight=${encodeURIComponent(String(data.boxId))}` +
                        `&placa=${encodeURIComponent(data.placa)}` +
                        `&box=${encodeURIComponent(data.boxNome)}`;
                    router.replace(url);
                } else {
                    setMsg(`Placa ${data.placa} não encontrada em nenhuma vaga.`);
                }
            } catch (e: any) {
                setMsg(`Falha de rede: ${e?.message ?? e}`);
            }
        };
        run();
        return () => { alive = false; };
    }, [placa, router]);

    return (
        <>
            <NavBar active="radar" />
            <main className="min-h-screen bg-black text-white flex items-center justify-center p-6">
                <div className="max-w-md w-full rounded-2xl border border-zinc-700 bg-zinc-900 p-6 text-center">
                    <h1 className="text-2xl font-bold mb-2">Localizando placa…</h1>
                    <div className="font-mono text-emerald-300 mb-4">{placa}</div>
                    <p className="text-zinc-300">{msg}</p>
                    <div className="mt-6">
                        <button
                            onClick={() => router.push("/radar/buscar")}
                            className="px-4 py-2 rounded-xl bg-zinc-700 hover:bg-zinc-600"
                        >
                            Buscar outra
                        </button>
                    </div>
                </div>
            </main>
        </>
    );
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PASTA: src\app\radar\mobile-upload\[sessionId]
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// ARQUIVO: src\app\radar\mobile-upload\[sessionId]\page.tsx   |   TIPO: Componente React (.tsx)
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

"use client";

import { useParams } from 'next/navigation';
import { useState, useRef, ChangeEvent } from 'react';
import { Camera, Loader2, CheckCircle, AlertTriangle, FileImage, Send, RefreshCw } from 'lucide-react';
import { RadarService } from '@/utils/api';
import Image from 'next/image';

type UploadStatus = 'idle' | 'preview' | 'uploading' | 'success' | 'error';

export default function MobileUploadPage() {
    const params = useParams();
    const sessionId = typeof params.sessionId === 'string' ? params.sessionId : null;

    const cameraInputRef = useRef<HTMLInputElement>(null);
    const galleryInputRef = useRef<HTMLInputElement>(null);

    const [status, setStatus] = useState<UploadStatus>('idle');
    const [message, setMessage] = useState('');

    const [imagePreviewUrl, setImagePreviewUrl] = useState<string | null>(null);
    const [imageFile, setImageFile] = useState<File | null>(null);

    // Converte qualquer imagem para JPEG usando canvas
    const toJpegFile = async (file: File): Promise<File> => {
        try {
            // cria bitmap (rápido) quando disponível
            const bitmap = await createImageBitmap(file);
            const canvas = document.createElement('canvas');
            canvas.width = bitmap.width;
            canvas.height = bitmap.height;
            const ctx = canvas.getContext('2d');
            if (!ctx) throw new Error('Canvas 2D não disponível');
            ctx.drawImage(bitmap, 0, 0);

            const blob: Blob = await new Promise((resolve, reject) => {
                canvas.toBlob(
                    (b) => (b ? resolve(b) : reject(new Error('Falha ao gerar JPEG'))),
                    'image/jpeg',
                    0.92
                );
            });

            return new File([blob], (file.name || 'captura').replace(/\.\w+$/, '') + '.jpg', {
                type: 'image/jpeg',
                lastModified: Date.now(),
            });
        } catch {
            // fallback simples: se não conseguir, retorna o próprio arquivo original
            return file;
        }
    };

    const handleFileChange = async (event: ChangeEvent<HTMLInputElement>) => {
        const file = event.target.files?.[0];
        if (!file) return;

        // Converte para JPEG (evita HEIC/WEBP no backend)
        const jpeg = await toJpegFile(file);
        setImageFile(jpeg);

        const previewUrl = URL.createObjectURL(jpeg);
        setImagePreviewUrl(previewUrl);

        setStatus('preview');
        setMessage('');
    };

    const handleUpload = async () => {
        if (!imageFile || !sessionId) return;

        setStatus('uploading');
        setMessage('A enviar imagem...');

        try {
            const form = new FormData();
            form.append('image', imageFile, imageFile.name);

            await RadarService.uploadImagem(sessionId, form); // envia multipart
            setStatus('success');
            setMessage('Foto enviada com sucesso! Pode fechar esta janela.');
        } catch (error: any) {
            console.error("Erro no upload:", error);
            setStatus('error');
            setMessage(error?.response?.data?.error || 'Ocorreu um erro ao enviar a imagem.');
        }
    };

    const resetSelection = () => {
        setStatus('idle');
        setImageFile(null);
        if (imagePreviewUrl) URL.revokeObjectURL(imagePreviewUrl);
        setImagePreviewUrl(null);
        setMessage('');
    };

    return (
        <main className="min-h-screen bg-black text-white p-4 flex flex-col items-center justify-center text-center">
            <div className="w-full max-w-sm">
                {/* Inputs ocultos */}
                <input
                    ref={cameraInputRef}
                    type="file"
                    accept="image/*"
                    capture="environment" // câmera traseira
                    onChange={handleFileChange}
                    className="hidden"
                />
                <input
                    ref={galleryInputRef}
                    type="file"
                    accept="image/*"
                    onChange={handleFileChange}
                    className="hidden"
                />

                {/* ESTADO INICIAL */}
                {status === 'idle' && (
                    <>
                        <h1 className="text-3xl font-bold text-[var(--color-mottu-light)] mb-2">Capturar Placa</h1>
                        <p className="text-slate-300 mb-8">Tire uma foto ou escolha uma imagem da sua galeria.</p>
                        <div className="space-y-4">
                            <button
                                onClick={() => cameraInputRef.current?.click()}
                                className="w-full flex items-center justify-center gap-3 px-6 py-4 font-semibold text-white bg-[var(--color-mottu-default)] rounded-lg shadow-lg text-lg"
                            >
                                <Camera size={28} />
                                Tirar Foto
                            </button>
                            <button
                                onClick={() => galleryInputRef.current?.click()}
                                className="w-full flex items-center justify-center gap-3 px-6 py-4 font-semibold text-white bg-slate-700 rounded-lg shadow-lg text-lg"
                            >
                                <FileImage size={28} />
                                Escolher da Galeria
                            </button>
                        </div>
                    </>
                )}

                {/* PRÉ-VISUALIZAÇÃO */}
                {status === 'preview' && imagePreviewUrl && (
                    <>
                        <h2 className="text-2xl font-bold text-white mb-4">Pré-visualização</h2>
                        <div className="relative w-full h-64 mb-6 rounded-lg overflow-hidden border-2 border-slate-600">
                            <Image src={imagePreviewUrl} alt="Pré-visualização da placa" fill className="object-contain" />
                        </div>
                        <div className="space-y-3">
                            <button
                                onClick={handleUpload}
                                className="w-full flex items-center justify-center gap-3 px-6 py-3 font-semibold text-white bg-green-600 rounded-lg text-md"
                            >
                                <Send size={20} /> Enviar Foto
                            </button>
                            <button
                                onClick={resetSelection}
                                className="w-full flex items-center justify-center gap-2 px-6 py-2 text-sm text-slate-300 hover:underline"
                            >
                                <RefreshCw size={14} /> Tirar Outra Foto / Escolher Outra
                            </button>
                        </div>
                    </>
                )}

                {/* STATUS */}
                <div className="mt-6 min-h-[80px]">
                    {status === 'uploading' && (
                        <div className="flex flex-col items-center gap-2 text-sky-300">
                            <Loader2 size={32} className="animate-spin" />
                            <p>{message}</p>
                        </div>
                    )}
                    {status === 'success' && (
                        <div className="flex flex-col items-center gap-2 text-green-400">
                            <CheckCircle size={32} />
                            <p>{message}</p>
                        </div>
                    )}
                    {status === 'error' && (
                        <div className="flex flex-col items-center gap-2 text-red-400">
                            <AlertTriangle size={32} />
                            <p className="font-bold">Falha no Envio</p>
                            <p className="text-sm">{message}</p>
                            <button
                                onClick={resetSelection}
                                className="mt-4 px-4 py-2 bg-slate-600 rounded-md text-white"
                            >
                                Tentar Novamente
                            </button>
                        </div>
                    )}
                </div>
            </div>
        </main>
    );
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PASTA: src\app\vagas\buscar
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// ARQUIVO: src\app\vagas\buscar\page.tsx   |   TIPO: Componente React (.tsx)
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";

type BuscarResp = {
    found: boolean;
    placa: string;
    boxId?: number;
    boxNome?: string;
    status?: string;
};

export default function BuscarMotoPage() {
    const router = useRouter();
    const [placa, setPlaca] = useState("");
    const [loading, setLoading] = useState(false);
    const [msg, setMsg] = useState<string | null>(null);

    const normaliza = (p: string) => p.trim().toUpperCase();

    const onBuscar = async (e: React.FormEvent) => {
        e.preventDefault();
        const p = normaliza(placa);
        if (!p) {
            setMsg("Informe a placa.");
            return;
        }
        setLoading(true);
        setMsg(null);
        try {
            const res = await fetch(`/api/vagas/buscar-placa/${encodeURIComponent(p)}`);
            if (!res.ok) {
                const t = await res.text();
                setMsg(`Erro ao buscar: ${res.status} ${t}`);
                return;
            }
            const data = (await res.json()) as BuscarResp;
            if (data.found && data.boxId != null) {
                // ✅ redireciona para o mapa com destaque no box e a placa no header
                router.push(`/vagas/mapa?highlight=${encodeURIComponent(String(data.boxId))}&placa=${encodeURIComponent(data.placa)}&box=${encodeURIComponent(data.boxNome ?? "")}`);
            } else {
                setMsg(`Placa ${p} não encontrada em nenhuma vaga.`);
            }
        } catch (e: any) {
            setMsg(`Falha de rede: ${e?.message ?? e}`);
        } finally {
            setLoading(false);
        }
    };

    return (
        <main className="min-h-screen bg-black text-white p-6 flex items-center justify-center">
            <div className="w-full max-w-md rounded-2xl border border-zinc-700 bg-zinc-900 p-6">
                <h1 className="text-2xl font-bold mb-4">Buscar Moto por Placa</h1>
                <form onSubmit={onBuscar} className="flex gap-2">
                    <input
                        className="flex-1 rounded-xl bg-zinc-800 border border-zinc-700 px-3 py-2 outline-none"
                        placeholder="Ex.: ABC1D23"
                        value={placa}
                        onChange={(e) => setPlaca(e.target.value)}
                    />
                    <button
                        type="submit"
                        disabled={loading}
                        className="px-4 py-2 rounded-xl bg-emerald-600 hover:bg-emerald-700 disabled:opacity-50"
                    >
                        {loading ? "Buscando..." : "Buscar"}
                    </button>
                </form>
                {msg && (
                    <div className="mt-4 rounded-xl border border-amber-500/50 bg-amber-500/10 p-3 text-amber-200">
                        {msg}
                    </div>
                )}
            </div>
        </main>
    );
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PASTA: src\app\vagas\mapa
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// ARQUIVO: src\app\vagas\mapa\page.tsx   |   TIPO: Componente React (.tsx)
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

"use client";

import { useEffect, useMemo, useState } from "react";
import { useSearchParams, useRouter } from "next/navigation";

type BoxResponseDto = {
    idBox: number;
    nome: string;
    status: string;
    dataEntrada: string | null;
    dataSaida: string | null;
    observacao: string | null;
};

type BoxWithPlateResponse = {
    box: BoxResponseDto;
    placa: string | null;
};

type MapaResponse = {
    rows: number;
    cols: number;
    boxes: BoxWithPlateResponse[];
};

export default function MapaVagasPage() {
    const params = useSearchParams();
    const router = useRouter();

    const highlight = (params.get("highlight") || "").toUpperCase(); // pode ser id numérico como string
    const placaParam = params.get("placa") || "";
    const boxNomeParam = params.get("box") || "";

    const [mapa, setMapa] = useState<MapaResponse | null>(null);

    useEffect(() => {
        let alive = true;
        const fetchMapa = async () => {
            const res = await fetch("/api/vagas/mapa", { cache: "no-store" });
            if (!res.ok) return;
            const data = (await res.json()) as MapaResponse;
            if (alive) setMapa(data);
        };
        fetchMapa();
        const t = setInterval(fetchMapa, 2000);
        return () => { alive = false; clearInterval(t); };
    }, []);

    const gridStyle = useMemo(() => {
        if (!mapa) return { gridTemplateColumns: "repeat(5, minmax(0,1fr))" };
        return { gridTemplateColumns: `repeat(${mapa.cols}, minmax(0,1fr))` };
    }, [mapa]);

    const isOcupado = (b: BoxWithPlateResponse) => (b.box.status ?? "").toUpperCase() === "O";

    const onLiberar = async (boxId: number) => {
        if (!confirm(`Liberar box ${boxId}?`)) return;
        const res = await fetch(`/api/vagas/liberar/${boxId}`, { method: "POST" });
        if (res.ok) router.replace("/vagas/mapa");
    };

    return (
        <main className="min-h-screen bg-black text-white p-6">
            <div className="mx-auto max-w-5xl">
                <div className="flex items-baseline justify-between mb-6">
                    <h1 className="text-3xl font-bold">Mapa de Vagas (2D)</h1>
                    <div className="text-sm text-zinc-400">
                        {placaParam ? (
                            <>
                                Placa: <span className="font-mono text-emerald-300">{placaParam}</span>
                                {boxNomeParam ? <> • Box: <span className="font-mono">{boxNomeParam}</span></> : null}
                            </>
                        ) : null}
                    </div>
                </div>

                <div className="rounded-2xl border border-zinc-700 bg-zinc-900 p-4">
                    {!mapa ? (
                        <div className="text-zinc-300">Carregando mapa...</div>
                    ) : (
                        <div className="grid gap-3" style={gridStyle}>
                            {mapa.boxes.map((item) => {
                                const b = item.box;
                                const isHL =
                                    highlight &&
                                    (String(b.idBox).toUpperCase() === highlight || (b.nome || "").toUpperCase() === highlight);
                                const ocupado = isOcupado(item);
                                return (
                                    <div
                                        key={b.idBox}
                                        className={[
                                            "relative rounded-xl border p-4 transition",
                                            ocupado ? "border-emerald-600 bg-emerald-600/10" : "border-zinc-700 bg-zinc-800",
                                            isHL ? "ring-4 ring-amber-400/60 animate-pulse" : ""
                                        ].join(" ")}
                                    >
                                        <div className="text-sm text-zinc-300">{b.nome || `BOX ${b.idBox}`}</div>
                                        <div className="mt-2 text-2xl font-mono tracking-widest">
                                            {ocupado ? (item.placa || "OCUPADO") : "LIVRE"}
                                        </div>
                                        <div className="mt-3 flex gap-2">
                                            {ocupado ? (
                                                <button
                                                    onClick={() => onLiberar(b.idBox)}
                                                    className="px-3 py-1 rounded-lg bg-rose-600 hover:bg-rose-700 text-sm"
                                                >
                                                    Liberar
                                                </button>
                                            ) : (
                                                <span className="text-xs text-zinc-400">Disponível</span>
                                            )}
                                        </div>
                                    </div>
                                );
                            })}
                        </div>
                    )}
                </div>

                <div className="mt-6 flex gap-3">
                    <button
                        onClick={() => router.push("/vagas/buscar")}
                        className="px-4 py-2 rounded-xl bg-emerald-600 hover:bg-emerald-700"
                    >
                        Buscar outra placa
                    </button>
                    <button
                        onClick={() => router.push("/radar/armazenar")}
                        className="px-4 py-2 rounded-xl bg-zinc-700 hover:bg-zinc-600"
                    >
                        Voltar ao Radar (OCR)
                    </button>
                </div>
            </div>
        </main>
    );
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PASTA: src\app\veiculo
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// ARQUIVO: src\app\veiculo\layout.tsx   |   TIPO: Componente React (.tsx)
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

'use client';
import React from 'react';
export default function VeiculoLayout({ children }: { children: React.ReactNode; }) {
    return <section>{children}</section>;
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PASTA: src\app\veiculo\alterar\[id]
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// ARQUIVO: src\app\veiculo\alterar\[id]\page.tsx   |   TIPO: Componente React (.tsx)
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

"use client";
import React, { useState, useEffect, FormEvent } from 'react';
import { useParams, useRouter } from 'next/navigation';
import Link from 'next/link';
import NavBar from '@/components/nav-bar';
import { VeiculoService } from '@/utils/api';
import { VeiculoRequestDto, VeiculoResponseDto } from '@/types/veiculo';
import { MdEdit, MdSave, MdArrowBack, MdErrorOutline, MdCheckCircle } from 'react-icons/md';
import { Car, Hash, Building, Settings, Calendar, Info, Loader2, AlertCircle, ShieldCheck } from 'lucide-react';

const combustiveis = ["Gasolina", "Etanol", "Diesel", "Flex", "Gás Natural", "Elétrico", "Híbrido", "Outro"];

export default function AlterarVeiculoPage() {
    const router = useRouter();
    const params = useParams();
    const id = typeof params.id === 'string' ? parseInt(params.id, 10) : null;

    const [formData, setFormData] = useState<VeiculoRequestDto>({
        placa: '', renavam: '', chassi: '', fabricante: '', modelo: '', motor: '', ano: 0, combustivel: '',
        status: 'OPERACIONAL', tagBleId: ''
    });

    const [isLoading, setIsLoading] = useState(false);
    const [isFetching, setIsFetching] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const [success, setSuccess] = useState<string | null>(null);

    useEffect(() => {
        if (!id) {
            setError("ID do veículo inválido.");
            setIsFetching(false);
            return;
        }
        const fetchVeiculo = async () => {
            setIsFetching(true);
            try {
                const data = await VeiculoService.getById(id);
                setFormData({
                    placa: data.placa,
                    renavam: data.renavam,
                    chassi: data.chassi,
                    fabricante: data.fabricante,
                    modelo: data.modelo,
                    motor: data.motor || '',
                    ano: data.ano,
                    combustivel: data.combustivel,
                    status: data.status || 'OPERACIONAL',
                    tagBleId: data.tagBleId || ''
                });
            } catch (err: any) {
                setError(err.response?.data?.message || "Falha ao carregar dados do veículo.");
            } finally {
                setIsFetching(false);
            }
        };
        fetchVeiculo();
    }, [id]);

    const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
        const { name, value } = e.target;
        setFormData(prev => ({ ...prev, [name]: name === 'ano' ? parseInt(value, 10) || 0 : value }));
    };

    const handleSubmit = async (e: FormEvent<HTMLFormElement>) => {
        e.preventDefault();
        if (!id) return;

        setIsLoading(true);
        setError(null);
        setSuccess(null);
        try {
            await VeiculoService.update(id, formData);
            setSuccess(`Veículo de placa "${formData.placa}" atualizado com sucesso!`);
            setTimeout(() => router.push('/veiculo/listar'), 2000);
        } catch (err: any) {
            setError(err.response?.data?.message || 'Falha ao atualizar veículo.');
        } finally {
            setIsLoading(false);
        }
    };

    if (isFetching) return (
        <>
            <NavBar active="veiculo" />
            <main className="flex justify-center items-center min-h-screen bg-black"><Loader2 className="h-12 w-12 animate-spin text-[var(--color-mottu-light)]" /></main>
        </>
    );

    if (error && !isFetching) return (
        <>
            <NavBar active="veiculo" />
            <main className="flex justify-center items-center min-h-screen bg-black p-4">
                <div className="text-center bg-red-900/50 p-8 rounded-lg">
                    <AlertCircle className="mx-auto h-12 w-12 text-red-400" />
                    <p className="mt-4 text-red-400">{error}</p>
                    <Link href="/veiculo/listar" className="mt-6 inline-block px-6 py-2 bg-slate-600 text-white rounded-md">Voltar</Link>
                </div>
            </main>
        </>
    );

    return (
        <>
            <NavBar active="veiculo" />
            <main className="min-h-screen bg-black text-white p-4 md:p-8 flex items-center justify-center">
                <div className="container max-w-2xl mx-auto bg-[var(--color-mottu-default)] p-6 md:p-8 rounded-lg shadow-xl">
                    <h1 className="text-2xl md:text-3xl font-bold text-white flex items-center justify-center mb-6">
                        <MdEdit size={32} className="mr-3" />
                        Alterar Veículo (ID: {id})
                    </h1>

                    {success && (
                        <div className="mb-4 flex items-center gap-2 text-sm text-green-700 p-3 rounded-md bg-green-100 border border-green-300">
                            <MdCheckCircle className="text-xl" /> <span>{success}</span>
                        </div>
                    )}
                    {error && (
                        <div className="mb-4 flex items-center gap-2 text-sm text-red-700 p-3 rounded-md bg-red-100 border border-red-300" role="alert">
                            <MdErrorOutline className="text-xl" /> <span>{error}</span>
                        </div>
                    )}

                    <form onSubmit={handleSubmit} className="space-y-4">
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                                <label htmlFor="placa" className="block text-sm font-medium text-slate-100 mb-1 flex items-center gap-1"><Hash size={16}/> Placa</label>
                                <input type="text" id="placa" name="placa" value={formData.placa} onChange={handleChange} required maxLength={10} className="w-full p-2 rounded bg-white text-slate-900 h-10" />
                            </div>
                            <div>
                                <label htmlFor="renavam" className="block text-sm font-medium text-slate-100 mb-1 flex items-center gap-1"><Hash size={16}/> RENAVAM</label>
                                <input type="text" id="renavam" name="renavam" value={formData.renavam} onChange={handleChange} required maxLength={11} className="w-full p-2 rounded bg-white text-slate-900 h-10" />
                            </div>
                            <div>
                                <label htmlFor="chassi" className="block text-sm font-medium text-slate-100 mb-1 flex items-center gap-1"><Hash size={16}/> Chassi</label>
                                <input type="text" id="chassi" name="chassi" value={formData.chassi} onChange={handleChange} required maxLength={17} className="w-full p-2 rounded bg-white text-slate-900 h-10" />
                            </div>
                            <div>
                                <label htmlFor="fabricante" className="block text-sm font-medium text-slate-100 mb-1 flex items-center gap-1"><Building size={16}/> Fabricante</label>
                                <input type="text" id="fabricante" name="fabricante" value={formData.fabricante} onChange={handleChange} required maxLength={50} className="w-full p-2 rounded bg-white text-slate-900 h-10" />
                            </div>
                            <div>
                                <label htmlFor="modelo" className="block text-sm font-medium text-slate-100 mb-1 flex items-center gap-1"><Car size={16}/> Modelo</label>
                                <input type="text" id="modelo" name="modelo" value={formData.modelo} onChange={handleChange} required maxLength={60} className="w-full p-2 rounded bg-white text-slate-900 h-10" />
                            </div>
                            <div>
                                <label htmlFor="motor" className="block text-sm font-medium text-slate-100 mb-1 flex items-center gap-1"><Settings size={16}/> Motor</label>
                                <input type="text" id="motor" name="motor" value={formData.motor || ''} onChange={handleChange} maxLength={30} className="w-full p-2 rounded bg-white text-slate-900 h-10" />
                            </div>
                            <div>
                                <label htmlFor="ano" className="block text-sm font-medium text-slate-100 mb-1 flex items-center gap-1"><Calendar size={16}/> Ano</label>
                                <input type="number" id="ano" name="ano" value={formData.ano} onChange={handleChange} required min={1900} max={new Date().getFullYear() + 2} className="w-full p-2 rounded bg-white text-slate-900 h-10" />
                            </div>
                            <div>
                                <label htmlFor="combustivel" className="block text-sm font-medium text-slate-100 mb-1 flex items-center gap-1"><Info size={16}/> Combustível</label>
                                <select id="combustivel" name="combustivel" value={formData.combustivel} onChange={handleChange} required className="w-full p-2 rounded bg-white text-slate-900 h-10">
                                    <option value="">Selecione...</option>
                                    {combustiveis.map(c => <option key={c} value={c}>{c}</option>)}
                                </select>
                            </div>
                            <div>
                                <label htmlFor="status" className="block text-sm font-medium text-slate-100 mb-1 flex items-center gap-1"><ShieldCheck size={16}/> Status</label>
                                <select id="status" name="status" value={formData.status} onChange={handleChange} className="w-full p-2 rounded bg-white text-slate-900 h-10">
                                    <option value="OPERACIONAL">Operacional</option>
                                    <option value="EM_MANUTENCAO">Em Manutenção</option>
                                    <option value="INATIVO">Inativo</option>
                                </select>
                            </div>
                            <div>
                                <label htmlFor="tagBleId" className="block text-sm font-medium text-slate-100 mb-1 flex items-center gap-1"><Hash size={16}/> ID da Tag BLE</label>
                                <input type="text" id="tagBleId" name="tagBleId" value={formData.tagBleId} onChange={handleChange} placeholder="Ex: TAG001" maxLength={50} className="w-full p-2 rounded bg-white text-slate-900 h-10" />
                            </div>
                        </div>
                        <div className="flex flex-col sm:flex-row justify-center gap-4 pt-4">
                            <button type="submit" disabled={isLoading} className="w-full sm:w-auto flex items-center justify-center gap-2 px-6 py-3 font-semibold text-white bg-[var(--color-mottu-dark)] rounded-md shadow hover:bg-opacity-80 transition-colors disabled:opacity-50">
                                <MdSave size={20} /> {isLoading ? 'Salvando...' : 'Salvar Alterações'}
                            </button>
                            <Link href="/veiculo/listar" className="w-full sm:w-auto flex items-center justify-center gap-2 px-6 py-3 font-medium text-[var(--color-mottu-dark)] bg-white rounded-md shadow hover:bg-gray-100">
                                <MdArrowBack size={20} /> Voltar para Lista
                            </Link>
                        </div>
                    </form>
                </div>
            </main>
        </>
    );
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PASTA: src\app\veiculo\buscar
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// ARQUIVO: src\app\veiculo\buscar\page.tsx   |   TIPO: Componente React (.tsx)
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

"use client";
import { useState, FormEvent, ChangeEvent } from 'react';
import Link from 'next/link';
import NavBar from '@/components/nav-bar';
import { MdSearch, MdClear, MdEdit, MdDelete, MdVisibility, MdErrorOutline } from 'react-icons/md';
import { Car, Search as SearchIconLucide } from 'lucide-react';
import { VeiculoResponseDto, VeiculoFilter } from '@/types/veiculo';
import { SpringPage } from '@/types/common';
import { VeiculoService } from '@/utils/api';

const initialFilterState: VeiculoFilter = {
    placa: '', renavam: '', chassi: '', fabricante: '', modelo: '', motor: '',
    ano: undefined, combustivel: '', clienteCpf: '', boxNome: '', patioNome: '', zonaNome: '',
    tagBleId: '',
};

export default function BuscarVeiculosPage() {
    const [veiculos, setVeiculos] = useState<VeiculoResponseDto[]>([]);
    const [pageInfo, setPageInfo] = useState<SpringPage<VeiculoResponseDto> | null>(null);
    const [currentPage, setCurrentPage] = useState(0);
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const [hasSearched, setHasSearched] = useState(false);
    const [filter, setFilter] = useState<VeiculoFilter>(initialFilterState);

    const ITEMS_PER_PAGE = 9;
    const SORT_ORDER = 'idVeiculo,asc';

    const fetchData = async (pageToFetch = 0, currentFilters = filter) => {
        setIsLoading(true);
        setError(null);
        setHasSearched(true);

        if (pageToFetch === 0) {
            setVeiculos([]);
            setPageInfo(null);
        }

        try {
            const data = await VeiculoService.listarPaginadoFiltrado(currentFilters, pageToFetch, ITEMS_PER_PAGE, SORT_ORDER);
            setVeiculos(data.content);
            setPageInfo(data);
            setCurrentPage(data.number);
        } catch (err: any) {
            setError(err.response?.data?.message || err.message || 'Erro ao buscar veículos.');
            setVeiculos([]);
            setPageInfo(null);
        } finally {
            setIsLoading(false);
        }
    };

    const handleFilterChange = (e: ChangeEvent<HTMLInputElement>) => {
        setFilter(prev => ({ ...prev, [e.target.name]: e.target.value }));
    };

    const handleSearch = (e: FormEvent) => {
        e.preventDefault();
        setCurrentPage(0);
        fetchData(0, filter);
    };

    const handleClearFilters = () => {
        setFilter(initialFilterState);
        setVeiculos([]);
        setPageInfo(null);
        setCurrentPage(0);
        setHasSearched(false);
        setError(null);
    };

    const handlePageChange = (newPage: number) => {
        fetchData(newPage, filter);
    };

    return (
        <>
            <NavBar active="veiculo" />
            <main className="min-h-screen bg-black text-white p-4 md:p-8">
                <div className="container mx-auto bg-[var(--color-mottu-default)] p-6 md:p-8 rounded-lg shadow-xl">
                    <h1 className="flex items-center justify-center gap-2 text-2xl md:text-3xl font-bold mb-6 text-center text-white">
                        <SearchIconLucide size={30} /> Buscar Veículos
                    </h1>

                    <form onSubmit={handleSearch} className="mb-8 p-4 bg-black/20 rounded-lg">
                        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4 items-end">
                            <input type="text" name="placa" value={filter.placa || ''} onChange={handleFilterChange} className="w-full p-2 h-10 rounded bg-white text-slate-900" placeholder="Placa"/>
                            <input type="text" name="modelo" value={filter.modelo || ''} onChange={handleFilterChange} className="w-full p-2 h-10 rounded bg-white text-slate-900" placeholder="Modelo"/>
                            <input type="text" name="fabricante" value={filter.fabricante || ''} onChange={handleFilterChange} className="w-full p-2 h-10 rounded bg-white text-slate-900" placeholder="Fabricante"/>
                            <input type="number" name="ano" value={filter.ano || ''} onChange={handleFilterChange} className="w-full p-2 h-10 rounded bg-white text-slate-900" placeholder="Ano"/>
                            <input type="text" name="clienteCpf" value={filter.clienteCpf || ''} onChange={handleFilterChange} className="w-full p-2 h-10 rounded bg-white text-slate-900" placeholder="CPF do Cliente"/>
                            <input type="text" name="tagBleId" value={filter.tagBleId || ''} onChange={handleFilterChange} className="w-full p-2 h-10 rounded bg-white text-slate-900" placeholder="ID da Tag BLE"/>

                            <div className="lg:col-span-full flex flex-col sm:flex-row justify-center items-center gap-3 pt-4">
                                <button type="submit" className="w-full sm:w-auto flex items-center justify-center gap-2 px-6 py-2.5 font-semibold text-white bg-[var(--color-mottu-dark)] rounded-md shadow hover:bg-opacity-80 h-10">
                                    <MdSearch size={20} /> Buscar
                                </button>
                                <button type="button" onClick={handleClearFilters} className="w-full sm:w-auto flex items-center justify-center gap-2 px-6 py-2.5 font-medium text-slate-700 bg-gray-200 rounded-md shadow hover:bg-gray-300 h-10">
                                    <MdClear size={20} /> Limpar
                                </button>
                            </div>
                        </div>
                    </form>

                    {isLoading && <p className="text-center text-slate-100 py-10">Buscando...</p>}
                    {error && <div className="text-center text-red-400 p-4 bg-red-900/50 rounded-md">{error}</div>}

                    {!isLoading && hasSearched && veiculos.length === 0 && !error && (
                        <div className="text-center py-10"><p className="text-slate-300">Nenhum veículo encontrado.</p></div>
                    )}

                    {!isLoading && veiculos.length > 0 && (
                        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
                            {veiculos.map((veiculo) => (
                                <div key={veiculo.idVeiculo} className="bg-white text-slate-800 rounded-lg shadow-lg p-5 flex flex-col justify-between transition-all hover:shadow-2xl hover:scale-105">
                                    <div>
                                        <div className="flex items-center mb-3">
                                            <span className="text-xs font-semibold bg-slate-200 text-slate-700 px-2 py-0.5 rounded-full mr-2">ID: {veiculo.idVeiculo}</span>
                                            <h2 className="text-xl font-bold text-[var(--color-mottu-dark)] truncate">{veiculo.placa}</h2>
                                        </div>
                                        <p className="text-sm text-slate-600 truncate">Modelo: {veiculo.modelo}</p>
                                    </div>
                                    <div className="flex justify-end items-center gap-2 border-t border-slate-200 pt-3 mt-4">
                                        <Link href={`/veiculo/detalhes/${veiculo.idVeiculo}`} className="p-2 rounded-full text-blue-600 hover:bg-blue-100" title="Ver Detalhes"><MdVisibility size={22}/></Link>
                                        <Link href={`/veiculo/alterar/${veiculo.idVeiculo}`} className="p-2 rounded-full text-yellow-500 hover:bg-yellow-100" title="Editar Veículo"><MdEdit size={20}/></Link>
                                        <Link href={`/veiculo/deletar/${veiculo.idVeiculo}`} className="p-2 rounded-full text-red-500 hover:bg-red-100" title="Excluir Veículo"><MdDelete size={20}/></Link>
                                    </div>
                                </div>
                            ))}
                        </div>
                    )}
                </div>
            </main>
        </>
    );
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PASTA: src\app\veiculo\cadastrar
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// ARQUIVO: src\app\veiculo\cadastrar\page.tsx   |   TIPO: Componente React (.tsx)
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

"use client";
import React, { useState, FormEvent } from 'react';
import Link from 'next/link';
import NavBar from '@/components/nav-bar';
import { VeiculoService } from '@/utils/api';
import { VeiculoRequestDto, VeiculoResponseDto } from '@/types/veiculo';
import { MdAdd, MdSave, MdArrowBack, MdErrorOutline, MdCheckCircle } from 'react-icons/md';
import { Car, Hash, Building, Settings, Calendar, Info, ShieldCheck } from 'lucide-react';

const combustiveis = ["Gasolina", "Etanol", "Diesel", "Flex", "Gás Natural", "Elétrico", "Híbrido", "Outro"];

export default function CadastrarVeiculoPage() {
    const initialState: VeiculoRequestDto = {
        placa: '',
        renavam: '',
        chassi: '',
        fabricante: '',
        modelo: '',
        motor: '',
        ano: new Date().getFullYear(),
        combustivel: '',
        status: 'OPERACIONAL',
        tagBleId: ''
    };
    const [formData, setFormData] = useState<VeiculoRequestDto>(initialState);
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const [success, setSuccess] = useState<string | null>(null);

    const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
        const { name, value } = e.target;
        setFormData(prev => ({ ...prev, [name]: name === 'ano' ? parseInt(value, 10) || 0 : value }));
    };

    const handleSubmit = async (e: FormEvent<HTMLFormElement>) => {
        e.preventDefault();
        setIsLoading(true);
        setError(null);
        setSuccess(null);
        try {
            const createdVeiculo: VeiculoResponseDto = await VeiculoService.create(formData);
            setSuccess(`Veículo "${createdVeiculo.placa}" cadastrado com sucesso!`);
            setFormData(initialState);
            setTimeout(() => setSuccess(null), 5000);
        } catch (err: any) {
            setError(err.response?.data?.message || err.message || 'Falha ao cadastrar veículo.');
        } finally {
            setIsLoading(false);
        }
    };

    return (
        <>
            <NavBar active="veiculo" />
            <main className="min-h-screen bg-black text-white p-4 md:p-8 flex items-center justify-center">
                <div className="container max-w-2xl mx-auto bg-[var(--color-mottu-default)] p-6 md:p-8 rounded-lg shadow-xl">
                    <h1 className="text-2xl md:text-3xl font-bold text-white flex items-center justify-center mb-6">
                        <Car size={32} className="mr-3" />
                        Cadastrar Novo Veículo
                    </h1>

                    {success && (
                        <div className="mb-4 flex items-center gap-2 text-sm text-green-700 p-3 rounded-md bg-green-100 border border-green-300">
                            <MdCheckCircle className="text-xl" /> <span>{success}</span>
                        </div>
                    )}
                    {error && (
                        <div className="mb-4 flex items-center gap-2 text-sm text-red-700 p-3 rounded-md bg-red-100 border border-red-300" role="alert">
                            <MdErrorOutline className="text-xl" /> <span>{error}</span>
                        </div>
                    )}

                    <form onSubmit={handleSubmit} className="space-y-4">
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div className="group">
                                <label htmlFor="placa" className="block text-sm font-medium text-slate-100 mb-1 flex items-center gap-1"><Hash size={16}/> Placa <span className="text-red-300">*</span></label>
                                <input type="text" id="placa" name="placa" value={formData.placa} onChange={handleChange} required maxLength={10} placeholder="ABC-1234" className="w-full p-2 rounded bg-white text-slate-900 h-10 peer required:invalid:border-red-500" />
                            </div>
                            <div className="group">
                                <label htmlFor="renavam" className="block text-sm font-medium text-slate-100 mb-1 flex items-center gap-1"><Hash size={16}/> RENAVAM <span className="text-red-300">*</span></label>
                                <input type="text" id="renavam" name="renavam" value={formData.renavam} onChange={handleChange} required maxLength={11} placeholder="11 dígitos" className="w-full p-2 rounded bg-white text-slate-900 h-10 peer required:invalid:border-red-500" />
                            </div>
                            <div className="group">
                                <label htmlFor="chassi" className="block text-sm font-medium text-slate-100 mb-1 flex items-center gap-1"><Hash size={16}/> Chassi <span className="text-red-300">*</span></label>
                                <input type="text" id="chassi" name="chassi" value={formData.chassi} onChange={handleChange} required maxLength={17} placeholder="17 caracteres" className="w-full p-2 rounded bg-white text-slate-900 h-10 peer required:invalid:border-red-500" />
                            </div>
                            <div className="group">
                                <label htmlFor="fabricante" className="block text-sm font-medium text-slate-100 mb-1 flex items-center gap-1"><Building size={16}/> Fabricante <span className="text-red-300">*</span></label>
                                <input type="text" id="fabricante" name="fabricante" value={formData.fabricante} onChange={handleChange} required maxLength={50} placeholder="Ex: Honda" className="w-full p-2 rounded bg-white text-slate-900 h-10 peer required:invalid:border-red-500" />
                            </div>
                            <div className="group">
                                <label htmlFor="modelo" className="block text-sm font-medium text-slate-100 mb-1 flex items-center gap-1"><Car size={16}/> Modelo <span className="text-red-300">*</span></label>
                                <input type="text" id="modelo" name="modelo" value={formData.modelo} onChange={handleChange} required maxLength={60} placeholder="Ex: CG 160" className="w-full p-2 rounded bg-white text-slate-900 h-10 peer required:invalid:border-red-500" />
                            </div>
                            <div>
                                <label htmlFor="motor" className="block text-sm font-medium text-slate-100 mb-1 flex items-center gap-1"><Settings size={16}/> Motor</label>
                                <input type="text" id="motor" name="motor" value={formData.motor || ''} onChange={handleChange} maxLength={30} placeholder="162.7cc" className="w-full p-2 rounded bg-white text-slate-900 h-10" />
                            </div>
                            <div className="group">
                                <label htmlFor="ano" className="block text-sm font-medium text-slate-100 mb-1 flex items-center gap-1"><Calendar size={16}/> Ano <span className="text-red-300">*</span></label>
                                <input type="number" id="ano" name="ano" value={formData.ano} onChange={handleChange} required min={1900} max={new Date().getFullYear() + 2} className="w-full p-2 rounded bg-white text-slate-900 h-10 peer required:invalid:border-red-500" />
                            </div>
                            <div className="group">
                                <label htmlFor="combustivel" className="block text-sm font-medium text-slate-100 mb-1 flex items-center gap-1"><Info size={16}/> Combustível <span className="text-red-300">*</span></label>
                                <select id="combustivel" name="combustivel" value={formData.combustivel} onChange={handleChange} required className="w-full p-2 rounded bg-white text-slate-900 h-10 peer required:invalid:border-red-500">
                                    <option value="">Selecione...</option>
                                    {combustiveis.map(c => <option key={c} value={c}>{c}</option>)}
                                </select>
                            </div>
                            <div>
                                <label htmlFor="status" className="block text-sm font-medium text-slate-100 mb-1 flex items-center gap-1"><ShieldCheck size={16}/> Status</label>
                                <select id="status" name="status" value={formData.status} onChange={handleChange} className="w-full p-2 rounded bg-white text-slate-900 h-10">
                                    <option value="OPERACIONAL">Operacional</option>
                                    <option value="EM_MANUTENCAO">Em Manutenção</option>
                                    <option value="INATIVO">Inativo</option>
                                </select>
                            </div>
                            <div>
                                <label htmlFor="tagBleId" className="block text-sm font-medium text-slate-100 mb-1 flex items-center gap-1"><Hash size={16}/> ID da Tag BLE</label>
                                <input type="text" id="tagBleId" name="tagBleId" value={formData.tagBleId} onChange={handleChange} placeholder="Ex: TAG001" maxLength={50} className="w-full p-2 rounded bg-white text-slate-900 h-10" />
                            </div>
                        </div>
                        <div className="flex flex-col sm:flex-row justify-center gap-4 pt-4">
                            <button type="submit" disabled={isLoading} className="w-full sm:w-auto flex items-center justify-center gap-2 px-6 py-3 font-semibold text-white bg-[var(--color-mottu-dark)] rounded-md shadow hover:bg-opacity-80 transition-colors disabled:opacity-50">
                                <MdSave size={20} /> {isLoading ? 'Salvando...' : 'Salvar Veículo'}
                            </button>
                            <Link href="/veiculo/listar" className="w-full sm:w-auto flex items-center justify-center gap-2 px-6 py-3 font-medium text-[var(--color-mottu-dark)] bg-white rounded-md shadow hover:bg-gray-100">
                                <MdArrowBack size={20} /> Voltar para Lista
                            </Link>
                        </div>
                    </form>
                </div>
            </main>
        </>
    );
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PASTA: src\app\veiculo\deletar\[id]
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// ARQUIVO: src\app\veiculo\deletar\[id]\page.tsx   |   TIPO: Componente React (.tsx)
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

"use client";
import { useState, useEffect } from 'react';
import { useParams, useRouter } from 'next/navigation';
import Link from 'next/link';
import NavBar from '@/components/nav-bar';
import { VeiculoService } from '@/utils/api';
import { VeiculoResponseDto } from '@/types/veiculo';
import { Loader2, AlertCircle, Trash2, ArrowLeft } from 'lucide-react';

export default function DeletarVeiculoPage() {
    const params = useParams();
    const router = useRouter();
    const id = typeof params.id === 'string' ? parseInt(params.id, 10) : null;

    const [veiculo, setVeiculo] = useState<VeiculoResponseDto | null>(null);
    const [isDeleting, setIsDeleting] = useState(false);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);

    useEffect(() => {
        if (!id) {
            setError("ID do veículo inválido.");
            setIsLoading(false);
            return;
        }
        const fetchVeiculo = async () => {
            setIsLoading(true);
            try {
                const data = await VeiculoService.getById(id);
                setVeiculo(data);
            } catch (err: any) {
                setError(err.response?.data?.message || "Veículo não encontrado.");
            } finally {
                setIsLoading(false);
            }
        };
        fetchVeiculo();
    }, [id]);

    const handleConfirmDelete = async () => {
        if (!id) return;
        setIsDeleting(true);
        setError(null);
        try {
            await VeiculoService.delete(id);
            router.push('/veiculo/listar');
        } catch (err: any) {
            setError(err.response?.data?.message || "Erro ao excluir veículo.");
            setIsDeleting(false);
        }
    };

    if (isLoading) return (
        <>
            <NavBar active="veiculo" />
            <main className="flex justify-center items-center min-h-screen bg-black"><Loader2 className="h-12 w-12 animate-spin text-[var(--color-mottu-light)]" /></main>
        </>
    );

    if (error && !veiculo) return (
        <>
            <NavBar active="veiculo" />
            <main className="flex justify-center items-center min-h-screen bg-black p-4">
                <div className="text-center bg-red-900/50 p-8 rounded-lg">
                    <AlertCircle className="mx-auto h-12 w-12 text-red-400" />
                    <p className="mt-4 text-red-400">{error}</p>
                    <Link href="/veiculo/listar" className="mt-6 inline-flex items-center gap-2 px-6 py-2 bg-slate-600 text-white rounded-md"><ArrowLeft size={18}/> Voltar para Lista</Link>
                </div>
            </main>
        </>
    );

    if (!veiculo) return null;

    return (
        <>
            <NavBar active="veiculo" />
            <main className="min-h-screen bg-black text-white p-4 md:p-8 flex items-center justify-center">
                <div className="container max-w-lg mx-auto bg-slate-900 border border-red-500/50 p-6 md:p-8 rounded-lg shadow-xl text-center">
                    <Trash2 className="mx-auto h-12 w-12 text-red-400 mb-4" />
                    <h1 className="text-2xl font-bold text-white mb-2">Confirmar Exclusão</h1>
                    <p className="text-slate-300 mb-6">
                        Tem certeza que deseja excluir o veículo de placa <strong className="text-white">{veiculo.placa}</strong> ({veiculo.modelo})?
                    </p>

                    <div className="text-slate-300 text-sm mb-8 border-l-2 border-red-500 pl-4 bg-slate-800 p-4 rounded text-left">
                        <p><strong>ID do Veículo:</strong> {veiculo.idVeiculo}</p>
                        <p><strong>Placa:</strong> {veiculo.placa}</p>
                        <p><strong>Modelo:</strong> {veiculo.modelo}</p>
                        <p><strong>Fabricante:</strong> {veiculo.fabricante}</p>
                    </div>

                    {error && <div className="mb-4 text-red-400 p-3 rounded-md bg-red-900/50">{error}</div>}

                    <div className="flex justify-center gap-4">
                        <Link href="/veiculo/listar" className="px-6 py-2 font-semibold text-slate-800 bg-gray-300 rounded-md hover:bg-gray-400">
                            Cancelar
                        </Link>
                        <button onClick={handleConfirmDelete} disabled={isDeleting} className="px-6 py-2 font-semibold text-white bg-red-600 rounded-md hover:bg-red-700 disabled:opacity-50 flex items-center gap-2">
                            {isDeleting ? <><Loader2 className="animate-spin h-5 w-5"/> Excluindo...</> : <>Excluir</>}
                        </button>
                    </div>
                </div>
            </main>
        </>
    );
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PASTA: src\app\veiculo\detalhes\[id]
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// ARQUIVO: src\app\veiculo\detalhes\[id]\page.tsx   |   TIPO: Componente React (.tsx)
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

"use client";
import { useState, useEffect } from 'react';
import { useParams, useRouter } from 'next/navigation';
import Link from 'next/link';
import NavBar from '@/components/nav-bar';
import { VeiculoService } from '@/utils/api';
import { VeiculoResponseDto, VeiculoLocalizacaoResponseDto } from '@/types/veiculo';
import { Loader2, AlertCircle, Car, Edit, ArrowLeft, MapPin, Hash, ShieldCheck } from 'lucide-react';

export default function DetalhesVeiculoPage() {
    const params = useParams();
    const id = typeof params.id === 'string' ? parseInt(params.id, 10) : null;

    const [veiculo, setVeiculo] = useState<VeiculoResponseDto | null>(null);
    const [localizacao, setLocalizacao] = useState<VeiculoLocalizacaoResponseDto | null>(null);
    const [isLoading, setIsLoading] = useState(true);
    const [isLocating, setIsLocating] = useState(false);
    const [error, setError] = useState<string | null>(null);

    useEffect(() => {
        if (!id) {
            setError("ID do veículo inválido.");
            setIsLoading(false);
            return;
        }
        const fetchVeiculo = async () => {
            setIsLoading(true);
            try {
                const data = await VeiculoService.getById(id);
                setVeiculo(data);
                // Iniciar busca da localização assim que os dados do veículo chegarem
                handleFetchLocalizacao(id);
            } catch (err: any) {
                setError(err.response?.data?.message || "Veículo não encontrado ou erro ao carregar dados.");
            } finally {
                setIsLoading(false);
            }
        };
        fetchVeiculo();
    }, [id]);

    const handleFetchLocalizacao = async (veiculoId: number) => {
        setIsLocating(true);
        try {
            const locData = await VeiculoService.getLocalizacao(veiculoId);
            setLocalizacao(locData);
        } catch (err: any) {
            // Não sobrescrever o erro principal se for apenas um erro de localização
            console.error("Erro ao buscar localização:", err);
            setError(prev => prev || err.response?.data?.message || "Erro ao buscar localização.");
        } finally {
            setIsLocating(false);
        }
    };

    if (isLoading) return (
        <>
            <NavBar active="veiculo" />
            <main className="flex justify-center items-center min-h-screen bg-black"><Loader2 className="h-12 w-12 animate-spin text-[var(--color-mottu-light)]" /></main>
        </>
    );

    if (error && !veiculo) return (
        <>
            <NavBar active="veiculo" />
            <main className="flex justify-center items-center min-h-screen bg-black p-4">
                <div className="text-center bg-red-900/50 p-8 rounded-lg">
                    <AlertCircle className="mx-auto h-12 w-12 text-red-400" />
                    <p className="mt-4 text-red-400">{error}</p>
                    <Link href="/veiculo/listar" className="mt-6 inline-flex items-center gap-2 px-6 py-2 bg-slate-600 text-white rounded-md"><ArrowLeft size={18}/> Voltar para Lista</Link>
                </div>
            </main>
        </>
    );

    if (!veiculo) return null;

    return (
        <>
            <NavBar active="veiculo" />
            <main className="min-h-screen bg-black text-white p-4 md:p-8">
                <div className="container max-w-4xl mx-auto bg-[var(--color-mottu-default)] p-6 md:p-8 rounded-lg shadow-xl">
                    <div className="flex flex-col sm:flex-row justify-between items-start mb-6">
                        <div>
                            <h1 className="text-2xl md:text-3xl font-bold text-white">Veículo: {veiculo.placa}</h1>
                            <p className="text-slate-300">{veiculo.modelo} - {veiculo.fabricante} (ID: {veiculo.idVeiculo})</p>
                        </div>
                        <div className="flex gap-2 mt-4 sm:mt-0">
                            <Link href="/veiculo/listar" className="flex items-center gap-2 px-4 py-2 font-medium text-[var(--color-mottu-dark)] bg-white rounded-md shadow hover:bg-gray-100">
                                <ArrowLeft size={18} /> Voltar
                            </Link>
                            <Link href={`/veiculo/alterar/${veiculo.idVeiculo}`} className="flex items-center gap-2 px-4 py-2 font-semibold text-white bg-[var(--color-mottu-dark)] rounded-md shadow hover:bg-opacity-80">
                                <Edit size={18} /> Editar
                            </Link>
                        </div>
                    </div>

                    <div className="space-y-6">
                        <div className="bg-black/20 p-4 rounded-lg">
                            <h2 className="text-xl font-semibold mb-3 text-slate-100 flex items-center"><Car className="mr-2"/>Dados do Veículo</h2>
                            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-x-6 gap-y-2 text-sm">
                                <p><strong>Placa:</strong> {veiculo.placa}</p>
                                <p><strong>RENAVAM:</strong> {veiculo.renavam}</p>
                                <p><strong>Chassi:</strong> {veiculo.chassi}</p>
                                <p><strong>Modelo:</strong> {veiculo.modelo}</p>
                                <p><strong>Fabricante:</strong> {veiculo.fabricante}</p>
                                <p><strong>Ano:</strong> {veiculo.ano}</p>
                                <p><strong>Motor:</strong> {veiculo.motor || '-'}</p>
                                <p><strong>Combustível:</strong> {veiculo.combustivel}</p>
                                <p className="flex items-center gap-1"><strong>Status:</strong> <span className={veiculo.status === 'OPERACIONAL' ? 'text-green-300' : 'text-yellow-300'}>{veiculo.status || 'N/A'}</span></p>
                                <p><strong>Tag BLE:</strong> {veiculo.tagBleId || 'Não associada'}</p>
                            </div>
                        </div>

                        <div className="bg-black/20 p-4 rounded-lg">
                            <h2 className="text-xl font-semibold text-slate-100 flex items-center mb-3"><MapPin className="mr-2"/>Localização Atual</h2>
                            {isLocating ? (
                                <div className="flex items-center gap-2 text-sky-300"><Loader2 className="animate-spin"/>Buscando...</div>
                            ) : localizacao && localizacao.boxAssociado ? (
                                <div className="grid grid-cols-1 md:grid-cols-2 gap-x-6 gap-y-2 text-sm">
                                    <p><strong>Pátio:</strong> {localizacao.patioAssociado?.nomePatio || 'N/A'}</p>
                                    <p><strong>Zona:</strong> {localizacao.zonaAssociada?.nome || 'N/A'}</p>
                                    <p><strong>Box:</strong> {localizacao.boxAssociado?.nome || 'N/A'}</p>
                                </div>
                            ) : (
                                <p className="text-slate-400">Veículo não está estacionado em um box.</p>
                            )}
                        </div>
                    </div>
                </div>
            </main>
        </>
    );
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PASTA: src\app\veiculo\listar
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// ARQUIVO: src\app\veiculo\listar\page.tsx   |   TIPO: Componente React (.tsx)
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

"use client";
import { useState, useEffect, FormEvent, ChangeEvent } from 'react';
import Link from 'next/link';
import NavBar from '@/components/nav-bar';
import { VeiculoService } from '@/utils/api';
import { VeiculoResponseDto, VeiculoFilter } from '@/types/veiculo';
import { SpringPage } from '@/types/common';
import { MdSearch, MdClear, MdAdd, MdChevronLeft, MdChevronRight, MdEdit, MdDelete, MdVisibility, MdErrorOutline, MdCheckCircle } from 'react-icons/md';
import { Car, ShieldCheck } from 'lucide-react';

const initialFilterState: VeiculoFilter = {
    placa: '',
    modelo: '',
    fabricante: '',
    ano: undefined,
};

export default function ListarVeiculosPage() {
    const [veiculos, setVeiculos] = useState<VeiculoResponseDto[]>([]);
    const [pageInfo, setPageInfo] = useState<SpringPage<VeiculoResponseDto> | null>(null);
    const [currentPage, setCurrentPage] = useState(0);
    const [filtros, setFiltros] = useState<VeiculoFilter>(initialFilterState);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const [successMessage, setSuccessMessage] = useState<string | null>(null);
    const ITEMS_PER_PAGE = 9;
    const SORT_ORDER = 'idVeiculo,asc';

    const fetchData = async (pageToFetch = 0, currentFilters = filtros) => {
        setIsLoading(true);
        setError(null);
        try {
            const data = await VeiculoService.listarPaginadoFiltrado(currentFilters, pageToFetch, ITEMS_PER_PAGE, SORT_ORDER);
            setVeiculos(data.content);
            setPageInfo(data);
            setCurrentPage(data.number);
        } catch (err: any) {
            setError(err.response?.data?.message || err.message || 'Erro ao buscar veículos.');
            setVeiculos([]);
            setPageInfo(null);
        } finally {
            setIsLoading(false);
        }
    };

    useEffect(() => {
        fetchData(0, initialFilterState);
    }, []);

    const handleFilterChange = (e: ChangeEvent<HTMLInputElement>) => {
        const { name, value } = e.target;
        setFiltros(prev => ({ ...prev, [name]: value }));
    };

    const handleFilterSubmit = (e: FormEvent<HTMLFormElement>) => {
        e.preventDefault();
        setCurrentPage(0);
        fetchData(0, filtros);
    };

    const handleClearFilters = () => {
        setFiltros(initialFilterState);
        setCurrentPage(0);
        fetchData(0, initialFilterState);
    };

    const handlePageChange = (newPage: number) => {
        fetchData(newPage, filtros);
    };

    const handleDeleteVeiculo = async (veiculoId: number, placa: string) => {
        if (window.confirm(`Tem certeza que deseja excluir o veículo de placa "${placa}" (ID: ${veiculoId})?`)) {
            try {
                await VeiculoService.delete(veiculoId);
                setSuccessMessage(`Veículo "${placa}" excluído com sucesso!`);
                const pageToFetchAfterDelete = (pageInfo?.first && veiculos.length === 1 && currentPage > 0) ? currentPage - 1 : currentPage;
                fetchData(pageToFetchAfterDelete, filtros);
                setTimeout(() => setSuccessMessage(null), 4000);
            } catch (err: any) {
                setError(err.response?.data?.message || `Erro ao excluir veículo "${placa}".`);
            }
        }
    };

    const getStatusChip = (status: string | undefined) => {
        switch (status) {
            case 'OPERACIONAL':
                return <span className="text-xs font-semibold bg-green-200 text-green-800 px-2 py-0.5 rounded-full">Operacional</span>;
            case 'EM_MANUTENCAO':
                return <span className="text-xs font-semibold bg-yellow-200 text-yellow-800 px-2 py-0.5 rounded-full">Manutenção</span>;
            case 'INATIVO':
                return <span className="text-xs font-semibold bg-red-200 text-red-800 px-2 py-0.5 rounded-full">Inativo</span>;
            default:
                return <span className="text-xs font-semibold bg-gray-200 text-gray-800 px-2 py-0.5 rounded-full">N/A</span>;
        }
    }

    return (
        <>
            <NavBar active="veiculo" />
            <main className="min-h-screen bg-black text-white p-4 md:p-8">
                <div className="container mx-auto bg-[var(--color-mottu-default)] p-6 md:p-8 rounded-lg shadow-xl">
                    <div className="flex flex-col sm:flex-row justify-between items-center mb-8">
                        <h1 className="text-2xl md:text-3xl font-bold text-white flex items-center">
                            <Car size={32} className="mr-3" />
                            Veículos Cadastrados
                        </h1>
                        <Link href="/veiculo/cadastrar" className="mt-4 sm:mt-0 flex items-center gap-2 px-4 py-2.5 font-semibold text-[var(--color-mottu-dark)] bg-white rounded-md shadow hover:bg-gray-100 transition-colors duration-200">
                            <MdAdd size={20} /> Novo Veículo
                        </Link>
                    </div>

                    {successMessage && (
                        <div className="mb-4 flex items-center gap-2 text-sm text-green-700 p-3 rounded-md bg-green-100 border border-green-300">
                            <MdCheckCircle className="text-xl" /> <span>{successMessage}</span>
                        </div>
                    )}
                    {error && (
                        <div className="mb-4 flex items-center gap-2 text-sm text-red-700 p-3 rounded-md bg-red-100 border border-red-300" role="alert">
                            <MdErrorOutline className="text-xl" /> <span>{error}</span>
                        </div>
                    )}

                    <form onSubmit={handleFilterSubmit} className="mb-8 p-4 bg-black/20 rounded-lg">
                        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4 items-end">
                            <input type="text" name="placa" value={filtros.placa || ''} onChange={handleFilterChange} className="w-full p-2 h-10 rounded bg-white text-slate-900" placeholder="Filtrar por placa..." />
                            <input type="text" name="modelo" value={filtros.modelo || ''} onChange={handleFilterChange} className="w-full p-2 h-10 rounded bg-white text-slate-900" placeholder="Filtrar por modelo..." />
                            <div className="flex gap-2">
                                <button type="submit" className="flex-1 flex items-center justify-center gap-2 h-10 px-4 font-semibold text-white bg-[var(--color-mottu-dark)] rounded-md hover:bg-opacity-80">
                                    <MdSearch /> Buscar
                                </button>
                                <button type="button" onClick={handleClearFilters} className="flex-1 flex items-center justify-center gap-2 h-10 px-4 font-medium text-slate-700 bg-gray-200 rounded-md hover:bg-gray-300">
                                    <MdClear /> Limpar
                                </button>
                            </div>
                        </div>
                    </form>

                    {isLoading ? (
                        <p className="text-center text-slate-100 py-10">Carregando veículos...</p>
                    ) : veiculos.length > 0 ? (
                        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
                            {veiculos.map((veiculo) => (
                                <div key={veiculo.idVeiculo} className="bg-white text-slate-800 rounded-lg shadow-lg p-5 flex flex-col justify-between transition-all hover:shadow-2xl hover:scale-105">
                                    <div>
                                        <div className="flex items-center justify-between mb-3">
                                            <div className="flex items-center gap-2">
                                                <span className="text-xs font-semibold bg-slate-200 text-slate-700 px-2 py-0.5 rounded-full">ID: {veiculo.idVeiculo}</span>
                                                <h2 className="text-xl font-bold text-[var(--color-mottu-dark)] truncate" title={veiculo.placa}>{veiculo.placa}</h2>
                                            </div>
                                            {getStatusChip(veiculo.status)}
                                        </div>
                                        <div className="space-y-2 text-sm mb-4">
                                            <p className="flex items-center"><strong className="w-24">Modelo:</strong> <span className="text-slate-600 truncate">{veiculo.modelo}</span></p>
                                            <p className="flex items-center"><strong className="w-24">Fabricante:</strong> <span className="text-slate-600 truncate">{veiculo.fabricante}</span></p>
                                            <p className="flex items-center"><strong className="w-24">Ano:</strong> <span className="text-slate-600">{veiculo.ano}</span></p>
                                        </div>
                                    </div>
                                    <div className="flex justify-end items-center gap-2 border-t border-slate-200 pt-3 mt-auto">
                                        <Link href={`/veiculo/detalhes/${veiculo.idVeiculo}`} className="p-2 rounded-full text-blue-600 hover:bg-blue-100 transition-colors" title="Ver Detalhes">
                                            <MdVisibility size={22} />
                                        </Link>
                                        <Link href={`/veiculo/alterar/${veiculo.idVeiculo}`} className="p-2 rounded-full text-yellow-500 hover:bg-yellow-100 transition-colors" title="Editar Veículo">
                                            <MdEdit size={20} />
                                        </Link>
                                        <button onClick={() => handleDeleteVeiculo(veiculo.idVeiculo, veiculo.placa)} className="p-2 rounded-full text-red-500 hover:bg-red-100 transition-colors" title="Excluir Veículo">
                                            <MdDelete size={20} />
                                        </button>
                                    </div>
                                </div>
                            ))}
                        </div>
                    ) : (
                        <div className="text-center py-10">
                            <MdErrorOutline size={48} className="mx-auto text-slate-300 mb-2" />
                            <p className="text-slate-300">Nenhum veículo encontrado.</p>
                        </div>
                    )}

                    {!isLoading && pageInfo && pageInfo.totalPages > 1 && (
                        <div className="mt-8 flex flex-col sm:flex-row justify-between items-center text-sm text-slate-100">
                            <div className="mb-2 sm:mb-0">
                                Página <strong>{pageInfo.number + 1}</strong> de <strong>{pageInfo.totalPages}</strong> (Total: {pageInfo.totalElements} veículos)
                            </div>
                            <div className="flex gap-2">
                                <button onClick={() => handlePageChange(currentPage - 1)} disabled={isLoading || pageInfo.first} className="px-3 py-1.5 rounded-md bg-slate-700 hover:bg-slate-600 disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-1">
                                    <MdChevronLeft size={18} /> Anterior
                                </button>
                                <button onClick={() => handlePageChange(currentPage + 1)} disabled={isLoading || pageInfo.last} className="px-3 py-1.5 rounded-md bg-slate-700 hover:bg-slate-600 disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-1">
                                    Próxima <MdChevronRight size={18} />
                                </button>
                            </div>
                        </div>
                    )}
                </div>
            </main>
        </>
    );
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PASTA: src\app\zona
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// ARQUIVO: src\app\zona\layout.tsx   |   TIPO: Componente React (.tsx)
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

'use client';
import React from 'react';
export default function ZonaLayout({ children }: { children: React.ReactNode; }) {
    return <section>{children}</section>;
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PASTA: src\app\zona\alterar\[id]
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// ARQUIVO: src\app\zona\alterar\[id]\page.tsx   |   TIPO: Componente React (.tsx)
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// src/app/zona/alterar/[id]/page.tsx
"use client";

import { useState, useEffect, FormEvent } from 'react';
import { useParams, useRouter } from 'next/navigation';
import Link from 'next/link';
import NavBar from '@/components/nav-bar';
import { MdEdit, MdSave, MdArrowBack, MdErrorOutline, MdCheckCircle } from 'react-icons/md';
import { Tag, Calendar, Text, Info, Loader2, AlertCircle, Stethoscope } from 'lucide-react';

// Interfaces dos DTOs
import { ZonaRequestDto, ZonaResponseDto } from '@/types/zona';
import { ZonaService } from '@/utils/api';

export default function AlterarZonaPage() {
    const router = useRouter();
    const params = useParams();
    const idParam = params?.id;
    const id = typeof idParam === 'string' ? parseInt(idParam, 10) : null;

    const [formData, setFormData] = useState<ZonaRequestDto>({
        nome: '', dataEntrada: '', dataSaida: '', observacao: ''
    });

    const [isLoading, setIsLoading] = useState(false); // Para submissão
    const [isFetching, setIsFetching] = useState(true); // Para carregar dados iniciais
    const [error, setError] = useState<string | null>(null);
    const [success, setSuccess] = useState<string | null>(null);

    // Função para buscar os dados da zona ao carregar a página
    useEffect(() => {
        if (!id) {
            setError("ID da zona não fornecido na URL.");
            setIsFetching(false);
            return;
        }
        const fetchZonaData = async () => {
            setIsFetching(true);
            setError(null);
            try {
                const data: ZonaResponseDto = await ZonaService.getById(id);
                setFormData({
                    nome: data.nome,
                    dataEntrada: data.dataEntrada,
                    dataSaida: data.dataSaida,
                    observacao: data.observacao || '',
                });
            } catch (err: any) {
                setError(err.response?.data?.message || err.message || "Falha ao carregar dados da zona.");
                console.error("Erro detalhado no fetch inicial:", err);
            } finally {
                setIsFetching(false);
            }
        };
        fetchZonaData();
    }, [id]);

    const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
        const { name, value } = e.target;
        setFormData((prevData) => ({
            ...prevData,
            [name]: value,
        }));
    };

    const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {
        event.preventDefault();
        if (id === null) {
            setError("ID da zona inválido para atualização.");
            return;
        }
        setIsLoading(true);
        setError(null);
        setSuccess(null);

        try {
            const updatedZona: ZonaResponseDto = await ZonaService.update(id, formData);
            setSuccess(`Zona "${updatedZona.nome}" (ID: ${updatedZona.idZona}) atualizada com sucesso!`);
            setTimeout(() => {
                setSuccess(null);
                router.push('/zona/listar');
            }, 2000);
        } catch (err: any) {
            setError(err.response?.data?.message || err.message || 'Falha ao atualizar zona.');
            console.error("Erro detalhado na atualização:", err);
        } finally {
            setIsLoading(false);
        }
    };

    if (isFetching) {
        return (
            <>
                <NavBar active="zona-alterar" />
                <main className="container mx-auto p-8 flex justify-center items-center min-h-screen bg-[#012A46]">
                    <div className="flex flex-col items-center">
                        <Loader2 className="h-12 w-12 animate-spin text-sky-400" />
                        <p className="mt-3 text-sky-300 text-lg">Carregando dados da zona...</p>
                    </div>
                </main>
            </>
        );
    }

    if (error && !isFetching && (!formData.nome || formData.nome === '')) {
        return (
            <>
                <NavBar active="zona-alterar" />
                <main className="container mx-auto p-8 flex justify-center items-center min-h-screen bg-[#012A46]">
                    <div className="bg-slate-900 p-8 rounded-lg shadow-xl text-center">
                        <AlertCircle className="text-5xl text-red-400 mx-auto mb-4" />
                        <p className="text-red-400 text-lg mb-6">{error}</p>
                        <Link href="/zona/listar" className="px-6 py-3 bg-sky-600 text-white rounded-md shadow hover:bg-sky-700">Voltar para Lista</Link>
                    </div>
                </main>
            </>
        );
    }

    return (
        <>
            <NavBar active="zona-alterar" />
            <main className="container mx-auto px-4 py-12 bg-[#012A46] min-h-screen text-white">
                <div className="bg-slate-900 p-6 md:p-8 rounded-lg shadow-xl w-full max-w-lg mx-auto">
                    <h1 className="flex items-center justify-center gap-2 text-2xl md:text-3xl font-bold mb-8 text-center">
                        <MdEdit className="text-3xl text-sky-400" /> Alterar Zona (ID: {id})
                    </h1>

                    {error && (
                        <div className="relative text-red-400 bg-red-900/50 p-4 pr-10 rounded border border-red-500 mb-4" role="alert">
                            <div className="flex items-center gap-2"> <MdErrorOutline className="text-xl" /> <span>{error}</span> </div>
                            <button type="button" className="absolute top-0 bottom-0 right-0 px-4 py-3 hover:text-red-200" onClick={() => setError(null)} aria-label="Fechar"><span className="text-xl">&times;</span></button>
                        </div>
                    )}
                    {success && (
                        <div className="flex items-center justify-center gap-2 text-green-400 p-3 rounded bg-green-900/30 border border-green-700 mb-4">
                            <MdCheckCircle className="text-xl" /> <span>{success}</span>
                        </div>
                    )}

                    <form onSubmit={handleSubmit} className="space-y-5">
                        <div>
                            <label htmlFor="nome" className="flex items-center gap-1 block mb-1 text-sm font-medium text-slate-300">
                                <Tag size={16} /> Nome:
                            </label>
                            <input
                                type="text"
                                id="nome"
                                name="nome"
                                value={formData.nome}
                                onChange={handleChange}
                                required
                                maxLength={50}
                                className="w-full p-2 h-10 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500"
                            />
                        </div>

                        <div>
                            <label htmlFor="dataEntrada" className="flex items-center gap-1 block mb-1 text-sm font-medium text-slate-300">
                                <Calendar size={16} /> Data Entrada:
                            </label>
                            <input
                                type="date"
                                id="dataEntrada"
                                name="dataEntrada"
                                value={formData.dataEntrada}
                                onChange={handleChange}
                                required
                                className="w-full p-2 h-10 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500 date-input-fix"
                            />
                        </div>

                        <div>
                            <label htmlFor="dataSaida" className="flex items-center gap-1 block mb-1 text-sm font-medium text-slate-300">
                                <Calendar size={16} /> Data Saída:
                            </label>
                            <input
                                type="date"
                                id="dataSaida"
                                name="dataSaida"
                                value={formData.dataSaida}
                                onChange={handleChange}
                                required
                                className="w-full p-2 h-10 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500 date-input-fix"
                            />
                        </div>

                        <div>
                            <label htmlFor="observacao" className="flex items-center gap-1 block mb-1 text-sm font-medium text-slate-300">
                                <Text size={16} /> Observação:
                            </label>
                            <textarea
                                id="observacao"
                                name="observacao"
                                rows={3}
                                value={formData.observacao}
                                onChange={handleChange}
                                maxLength={100}
                                className="w-full p-2 rounded bg-slate-800 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500"
                            />
                        </div>

                        <div className="flex flex-col sm:flex-row items-center justify-center gap-4 pt-4">
                            <button
                                type="submit"
                                className={`flex items-center justify-center gap-2 px-6 py-3 font-semibold text-white bg-green-600 rounded-md shadow hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 focus:ring-offset-slate-900 transition-opacity duration-300 ${isLoading || isFetching ? 'opacity-50 cursor-not-allowed' : ''}`}
                                disabled={isLoading || isFetching}
                            >
                                <MdSave size={20} /> {isLoading ? 'Salvando...' : 'Salvar Alterações'}
                            </button>
                            <Link href="/zona/listar" className="flex items-center justify-center gap-2 px-6 py-3 font-semibold text-white bg-slate-600 rounded-md shadow hover:bg-slate-700 text-center focus:outline-none focus:ring-2 focus:ring-slate-500 focus:ring-offset-2 focus:ring-offset-slate-900">
                                <MdArrowBack size={20} /> Voltar para Lista
                            </Link>
                        </div>
                    </form>
                </div>
            </main>
            <style jsx global>{`
                .date-input-fix::-webkit-calendar-picker-indicator { filter: invert(0.8); cursor: pointer; }
                input[type="date"]:required:invalid::-webkit-datetime-edit { color: transparent; }
                input[type="date"]:focus::-webkit-datetime-edit { color: white !important; }
                input[type="date"]::-webkit-datetime-edit { color: white; }
            `}</style>
        </>
    );
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PASTA: src\app\zona\buscar
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// ARQUIVO: src\app\zona\buscar\page.tsx   |   TIPO: Componente React (.tsx)
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// src/app/zona/buscar/page.tsx
"use client";
import { useState, FormEvent, ChangeEvent } from 'react';
import Link from 'next/link';
import NavBar from '@/components/nav-bar';
import { MdSearch, MdClear, MdEdit, MdDelete, MdVisibility, MdErrorOutline } from 'react-icons/md';
import { MapPin as ZonaIcon, Search as SearchIconLucide } from 'lucide-react';
import { ZonaResponseDto, ZonaFilter } from '@/types/zona';
import { SpringPage } from '@/types/common';
import { ZonaService } from '@/utils/api';

const initialFilterState: ZonaFilter = {
    nome: '',
    dataEntradaInicio: '',
    dataEntradaFim: '',
    dataSaidaInicio: '',
    dataSaidaFim: '',
    observacao: '',
    boxNome: '',
    veiculoPlaca: '',
    patioNome: '',
};

export default function BuscarZonasPage() {
    const [zonas, setZonas] = useState<ZonaResponseDto[]>([]);
    const [pageInfo, setPageInfo] = useState<SpringPage<ZonaResponseDto> | null>(null);
    const [currentPage, setCurrentPage] = useState(0);
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const [hasSearched, setHasSearched] = useState(false);
    const [filter, setFilter] = useState<ZonaFilter>(initialFilterState);

    const ITEMS_PER_PAGE = 9;
    const SORT_ORDER = 'idZona,asc';

    const fetchData = async (pageToFetch = 0, currentFilters = filter) => {
        setIsLoading(true);
        setError(null);
        setHasSearched(true);

        if (pageToFetch === 0) {
            setZonas([]);
            setPageInfo(null);
        }

        try {
            const data = await ZonaService.listarPaginadoFiltrado(currentFilters, pageToFetch, ITEMS_PER_PAGE, SORT_ORDER);
            setZonas(data.content);
            setPageInfo(data);
            setCurrentPage(data.number);
        } catch (err: any) {
            setError(err.response?.data?.message || err.message || 'Erro ao buscar zonas.');
            setZonas([]);
            setPageInfo(null);
        } finally {
            setIsLoading(false);
        }
    };

    const handleFilterChange = (e: ChangeEvent<HTMLInputElement>) => {
        setFilter(prev => ({ ...prev, [e.target.name]: e.target.value }));
    };

    const handleSearch = (e: FormEvent) => {
        e.preventDefault();
        setCurrentPage(0);
        fetchData(0, filter);
    };

    const handleClearFilters = () => {
        setFilter(initialFilterState);
        setZonas([]);
        setPageInfo(null);
        setCurrentPage(0);
        setHasSearched(false);
        setError(null);
    };

    const handlePageChange = (newPage: number) => {
        fetchData(newPage, filter);
    };

    return (
        <>
            <NavBar active="zona" />
            <main className="min-h-screen bg-black text-white p-4 md:p-8">
                <div className="container mx-auto bg-[var(--color-mottu-default)] p-6 md:p-8 rounded-lg shadow-xl">
                    <h1 className="flex items-center justify-center gap-2 text-2xl md:text-3xl font-bold mb-6 text-center text-white">
                        <SearchIconLucide size={30} /> Buscar Zonas
                    </h1>

                    <form onSubmit={handleSearch} className="mb-8 p-4 bg-black/20 rounded-lg">
                        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4 items-end">
                            <input type="text" name="nome" value={filter.nome || ''} onChange={handleFilterChange} placeholder="Nome da Zona..." className="w-full p-2 h-10 rounded bg-white text-slate-900"/>
                            <input type="text" name="patioNome" value={filter.patioNome || ''} onChange={handleFilterChange} placeholder="Nome do Pátio..." className="w-full p-2 h-10 rounded bg-white text-slate-900"/>
                            <input type="text" name="boxNome" value={filter.boxNome || ''} onChange={handleFilterChange} placeholder="Nome do Box..." className="w-full p-2 h-10 rounded bg-white text-slate-900"/>
                            <input type="text" name="veiculoPlaca" value={filter.veiculoPlaca || ''} onChange={handleFilterChange} placeholder="Placa do Veículo..." className="w-full p-2 h-10 rounded bg-white text-slate-900"/>

                            <div className="md:col-span-full flex flex-col sm:flex-row justify-center items-center gap-3 pt-4">
                                <button type="submit" className="w-full sm:w-auto flex items-center justify-center gap-2 px-6 py-2.5 font-semibold text-white bg-[var(--color-mottu-dark)] rounded-md shadow hover:bg-opacity-80 h-10">
                                    <MdSearch size={20} /> Buscar
                                </button>
                                <button type="button" onClick={handleClearFilters} className="w-full sm:w-auto flex items-center justify-center gap-2 px-6 py-2.5 font-medium text-slate-700 bg-gray-200 rounded-md shadow hover:bg-gray-300 h-10">
                                    <MdClear size={20} /> Limpar
                                </button>
                            </div>
                        </div>
                    </form>

                    {isLoading && <p className="text-center text-slate-100 py-10">Buscando...</p>}
                    {error && <div className="text-center text-red-400 p-4 bg-red-900/50 rounded-md">{error}</div>}

                    {!isLoading && hasSearched && zonas.length === 0 && !error && (
                        <div className="text-center py-10"><p className="text-slate-300">Nenhuma zona encontrada.</p></div>
                    )}

                    {!isLoading && zonas.length > 0 && (
                        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
                            {zonas.map((zona) => (
                                <div key={zona.idZona} className="bg-white text-slate-800 rounded-lg shadow-lg p-5 flex flex-col justify-between transition-all hover:shadow-2xl hover:scale-105">
                                    <div>
                                        <div className="flex items-center mb-3">
                                            <span className="text-xs font-semibold bg-slate-200 text-slate-700 px-2 py-0.5 rounded-full mr-2">ID: {zona.idZona}</span>
                                            <h2 className="text-xl font-bold text-[var(--color-mottu-dark)] truncate">{zona.nome}</h2>
                                        </div>
                                        <p className="text-sm text-slate-600">Entrada: {new Date(zona.dataEntrada).toLocaleDateString('pt-BR')}</p>
                                    </div>
                                    <div className="flex justify-end items-center gap-2 border-t border-slate-200 pt-3 mt-4">
                                        <Link href={`/zona/detalhes/${zona.idZona}`} className="p-2 rounded-full text-blue-600 hover:bg-blue-100" title="Ver Detalhes"><MdVisibility size={22}/></Link>
                                        <Link href={`/zona/alterar/${zona.idZona}`} className="p-2 rounded-full text-yellow-500 hover:bg-yellow-100" title="Editar Zona"><MdEdit size={20}/></Link>
                                        <Link href={`/zona/deletar/${zona.idZona}`} className="p-2 rounded-full text-red-500 hover:bg-red-100" title="Excluir Zona"><MdDelete size={20}/></Link>
                                    </div>
                                </div>
                            ))}
                        </div>
                    )}
                </div>
            </main>
        </>
    );
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PASTA: src\app\zona\cadastrar
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// ARQUIVO: src\app\zona\cadastrar\page.tsx   |   TIPO: Componente React (.tsx)
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// src/app/zona/cadastrar/page.tsx
"use client";
import { useState, FormEvent } from 'react';
import Link from 'next/link';
import NavBar from '@/components/nav-bar';
import { MdAddCircleOutline, MdSave, MdArrowBack, MdErrorOutline, MdCheckCircle } from 'react-icons/md';
import { Tag, Calendar, Text } from 'lucide-react';
import { ZonaRequestDto, ZonaResponseDto } from '@/types/zona';
import { ZonaService } from '@/utils/api';

export default function CadastrarZonaPage() {
    const today = new Date().toISOString().split('T')[0];
    const initialState: ZonaRequestDto = {
        nome: '',
        dataEntrada: today,
        dataSaida: today,
        observacao: '',
    };
    const [formData, setFormData] = useState<ZonaRequestDto>(initialState);
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const [success, setSuccess] = useState<string | null>(null);

    const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
        const { name, value } = e.target;
        setFormData((prevData) => ({
            ...prevData,
            [name]: value,
        }));
    };

    const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {
        event.preventDefault();
        setIsLoading(true);
        setError(null);
        setSuccess(null);
        try {
            const createdZona: ZonaResponseDto = await ZonaService.create(formData);
            setSuccess(`Zona "${createdZona.nome}" (ID: ${createdZona.idZona}) cadastrada com sucesso!`);
            setFormData(initialState);
            setTimeout(() => setSuccess(null), 5000);
        } catch (err: any) {
            setError(err.response?.data?.message || err.message || 'Falha ao cadastrar zona.');
        } finally {
            setIsLoading(false);
        }
    };

    return (
        <>
            <NavBar active="zona" />
            <main className="container mx-auto px-4 py-12 bg-black min-h-screen text-white">
                <div className="bg-[var(--color-mottu-default)] p-6 md:p-8 rounded-lg shadow-xl w-full max-w-lg mx-auto">
                    <h1 className="flex items-center justify-center gap-2 text-2xl md:text-3xl font-bold mb-8 text-center text-white">
                        <MdAddCircleOutline className="text-3xl" /> Nova Zona
                    </h1>

                    {error && (
                        <div className="relative text-red-200 bg-red-800/80 p-4 pr-10 rounded border border-red-600 mb-4" role="alert">
                            <div className="flex items-center gap-2"> <MdErrorOutline className="text-xl" /> <span>{error}</span> </div>
                            <button type="button" className="absolute top-0 bottom-0 right-0 px-4 py-3 hover:text-red-100" onClick={() => setError(null)} aria-label="Fechar"><span className="text-xl">&times;</span></button>
                        </div>
                    )}
                    {success && (
                        <div className="flex items-center justify-center gap-2 text-green-900 p-3 rounded bg-green-200 border border-green-400 mb-4">
                            <MdCheckCircle className="text-xl" /> <span>{success}</span>
                        </div>
                    )}

                    <form onSubmit={handleSubmit} className="space-y-5">
                        <div className="group">
                            <label htmlFor="nome" className="flex items-center gap-1 block mb-1 text-sm font-medium text-white">
                                <Tag size={16} /> Nome: <span className="text-red-300">*</span>
                            </label>
                            <input
                                type="text"
                                id="nome"
                                name="nome"
                                value={formData.nome}
                                onChange={handleChange}
                                required
                                maxLength={50}
                                placeholder="Ex: Zona de Carga"
                                className="w-full p-2 h-10 rounded bg-white text-slate-900 peer required:invalid:border-red-500"
                            />
                            <p className="mt-1 text-xs text-slate-300 invisible peer-invalid:visible">Campo obrigatório.</p>
                        </div>
                        <div className="group">
                            <label htmlFor="dataEntrada" className="flex items-center gap-1 block mb-1 text-sm font-medium text-white">
                                <Calendar size={16} /> Data Entrada: <span className="text-red-300">*</span>
                            </label>
                            <input
                                type="date"
                                id="dataEntrada"
                                name="dataEntrada"
                                value={formData.dataEntrada}
                                onChange={handleChange}
                                required
                                className="w-full p-2 h-10 rounded bg-white text-slate-900 date-input-fix peer"
                            />
                            <p className="mt-1 text-xs text-slate-300 invisible peer-invalid:visible">Campo obrigatório.</p>
                        </div>

                        <div className="group">
                            <label htmlFor="dataSaida" className="flex items-center gap-1 block mb-1 text-sm font-medium text-white">
                                <Calendar size={16} /> Data Saída: <span className="text-red-300">*</span>
                            </label>
                            <input
                                type="date"
                                id="dataSaida"
                                name="dataSaida"
                                value={formData.dataSaida}
                                onChange={handleChange}
                                required
                                className="w-full p-2 h-10 rounded bg-white text-slate-900 date-input-fix peer"
                            />
                            <p className="mt-1 text-xs text-slate-300 invisible peer-invalid:visible">Campo obrigatório.</p>
                        </div>

                        <div>
                            <label htmlFor="observacao" className="flex items-center gap-1 block mb-1 text-sm font-medium text-white">
                                <Text size={16} /> Observação:
                            </label>
                            <textarea
                                id="observacao"
                                name="observacao"
                                rows={3}
                                value={formData.observacao}
                                onChange={handleChange}
                                maxLength={100}
                                placeholder="Alguma observação sobre a zona..."
                                className="w-full p-2 rounded bg-white text-slate-900"
                            />
                        </div>

                        <div className="flex flex-col sm:flex-row items-center justify-center gap-4 pt-4">
                            <button
                                type="submit"
                                className="flex items-center justify-center gap-2 px-6 py-3 font-semibold text-white bg-[var(--color-mottu-dark)] rounded-md shadow hover:bg-opacity-80 transition-colors duration-200 disabled:opacity-50"
                                disabled={isLoading}
                            >
                                <MdSave size={20} /> {isLoading ? 'Salvando...' : 'Salvar Zona'}
                            </button>
                            <Link href="/zona/listar" className="flex items-center justify-center gap-2 px-6 py-3 font-semibold text-[var(--color-mottu-dark)] bg-white rounded-md shadow hover:bg-gray-100">
                                <MdArrowBack size={20} /> Voltar para Lista
                            </Link>
                        </div>
                    </form>
                </div>
            </main>
            <style jsx global>{`
                .date-input-fix::-webkit-calendar-picker-indicator { cursor: pointer; }
                input[type="date"]:required:invalid::-webkit-datetime-edit { color: transparent; }
                input[type="date"]:focus::-webkit-datetime-edit { color: #1e293b !important; }
                input[type="date"]::-webkit-datetime-edit { color: #1e293b; }
            `}</style>
        </>
    );
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PASTA: src\app\zona\deletar\[id]
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// ARQUIVO: src\app\zona\deletar\[id]\page.tsx   |   TIPO: Componente React (.tsx)
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// src/app/zona/deletar/[id]/page.tsx
"use client";

import { useState, useEffect } from 'react';
import { useParams, useRouter } from 'next/navigation';
import Link from 'next/link';
import NavBar from '@/components/nav-bar';
import { MdDeleteForever, MdCancel, MdErrorOutline, MdWarningAmber, MdInfoOutline } from 'react-icons/md';
import { Trash2, AlertCircle, Loader2, Stethoscope } from 'lucide-react';

// Interfaces dos DTOs
import { ZonaResponseDto } from '@/types/zona';
import { ZonaService } from '@/utils/api';

export default function DeletarZonaPage() {
    const router = useRouter();
    const params = useParams();
    const idParam = params?.id;
    const id = typeof idParam === 'string' ? parseInt(idParam, 10) : null;

    const [zonaInfo, setZonaInfo] = useState<ZonaResponseDto | null>(null);
    const [isLoadingInfo, setIsLoadingInfo] = useState(true);
    const [isDeleting, setIsDeleting] = useState(false);
    const [error, setError] = useState<string | null>(null);

    // Função para formatar a data para exibição
    const formatDate = (dateString: string | null | undefined): string => {
        if (!dateString) return '-';
        try {
            return new Date(dateString + 'T00:00:00Z').toLocaleDateString('pt-BR', { timeZone: 'UTC' });
        } catch (e) {
            console.error("Erro ao formatar data:", dateString, e);
            return 'Inválida';
        }
    };

    // Efeito para buscar os dados da zona para confirmação
    useEffect(() => {
        if (!id) {
            setError("ID da zona não fornecido na URL.");
            setIsLoadingInfo(false);
            return;
        }
        const fetchZonaData = async () => {
            setIsLoadingInfo(true);
            setError(null);
            try {
                const data: ZonaResponseDto = await ZonaService.getById(id);
                setZonaInfo(data);
            } catch (err: any) {
                if (err.response && err.response.status === 404) {
                    setError(`Zona com ID ${id} não encontrada(a) ou já foi excluída(a).`);
                } else {
                    setError(err.response?.data?.message || err.message || "Falha ao carregar dados da zona para exclusão.");
                }
                console.error("Erro detalhado no fetch de deleção:", err);
                setZonaInfo(null);
            } finally {
                setIsLoadingInfo(false);
            }
        };
        fetchZonaData();
    }, [id]);

    // Handler para confirmar a deleção
    const handleConfirmDelete = async () => {
        if (id === null || !zonaInfo) {
            setError("Não é possível excluir: ID inválido ou dados da zona não carregados.");
            return;
        }
        setIsDeleting(true);
        setError(null);

        try {
            await ZonaService.delete(id);
            console.log(`Zona ID ${id} excluída com sucesso.`);
            router.push('/zona/listar?deleted=true');
        } catch (err: any) {
            setError(err.response?.data?.message || err.message || "Falha ao excluir zona.");
            console.error("Erro detalhado na deleção:", err);
        } finally {
            setIsDeleting(false);
        }
    };

    // Handler para cancelar a deleção (volta para a lista)
    const handleCancel = () => {
        router.push('/zona/listar');
    };

    if (isLoadingInfo) {
        return (
            <>
                <NavBar active="zona-deletar" />
                <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white flex justify-center items-center">
                    <p className="text-center text-sky-300 py-10 text-xl flex items-center gap-2">
                        <Loader2 className="h-6 w-6 animate-spin" /> Carregando dados para confirmação...
                    </p>
                </main>
            </>
        );
    }

    if (error && !zonaInfo) {
        return (
            <>
                <NavBar active="zona-deletar" />
                <main className="container mx-auto px-4 py-8 bg-[#012A46] min-h-screen text-white flex justify-center items-center">
                    <div className="bg-slate-900 p-6 md:p-8 m-4 rounded-lg shadow-xl w-full max-w-lg mx-auto text-center">
                        <AlertCircle className="text-5xl text-red-400 mx-auto mb-4" />
                        <h2 className="flex items-center justify-center gap-2 text-2xl md:text-3xl font-bold mb-6 text-center text-red-400">
                            <MdErrorOutline className="text-3xl" /> Erro ao Carregar
                        </h2>
                        <p className="text-center text-red-400 bg-red-900/50 p-3 rounded border border-red-500 mb-6">{error}</p>
                        <div className="text-center">
                            <button onClick={handleCancel} className="flex items-center justify-center gap-2 px-6 py-3 font-semibold text-white bg-slate-600 rounded-md shadow hover:bg-slate-700">
                                <MdInfoOutline size={20} /> Voltar para Lista
                            </button>
                        </div>
                    </div>
                </main>
            </>
        );
    }

    return (
        <>
            <NavBar active="zona-deletar" />
            <main className="flex items-center justify-center min-h-screen bg-[#012A46] text-white px-4 py-10">
                <div className="bg-slate-900 p-6 md:p-8 m-4 rounded-lg shadow-xl w-full max-w-lg border border-red-500">
                    <h2 className="flex items-center justify-center gap-2 text-2xl md:text-3xl font-bold mb-4 text-center text-red-400">
                        <Trash2 size={28} className="text-red-400" /> Confirmar Exclusão
                    </h2>
                    <p className="text-center mb-6 text-slate-300">Tem certeza que deseja excluir a zona abaixo? Esta ação não pode ser desfeita.</p>

                    {zonaInfo && (
                        <div className="text-slate-300 text-sm mb-8 border-l-2 border-red-500 pl-4 bg-slate-800 p-4 rounded">
                            <p><strong>ID da Zona:</strong> {zonaInfo.idZona}</p>
                            <p><strong>Nome:</strong> {zonaInfo.nome}</p>
                            <p><strong>Data Entrada:</strong> {formatDate(zonaInfo.dataEntrada)}</p>
                            <p><strong>Data Saída:</strong> {formatDate(zonaInfo.dataSaida)}</p>
                            <p><strong>Observação:</strong> {zonaInfo.observacao || '-'}</p>
                        </div>
                    )}

                    {error && (
                        <p className="text-center text-red-400 bg-red-900/50 p-3 rounded border border-red-500 mb-4">{error}</p>
                    )}

                    <div className="flex flex-col sm:flex-row items-center justify-center gap-4 mt-6">
                        <button
                            onClick={handleConfirmDelete}
                            className={`flex items-center justify-center gap-2 px-6 py-3 font-semibold text-white bg-red-600 rounded-md shadow hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 focus:ring-offset-slate-900 transition-opacity duration-300 ${isDeleting ? 'opacity-50 cursor-not-allowed' : ''}`}
                            disabled={isDeleting}
                        >
                            {isDeleting ? 'Excluindo...' : (<><MdDeleteForever size={20} /> Sim, Excluir</>)}
                        </button>
                        <button
                            onClick={handleCancel}
                            className="flex items-center justify-center gap-2 px-6 py-3 font-semibold text-white bg-slate-600 rounded-md shadow hover:bg-slate-700 focus:outline-none focus:ring-2 focus:ring-slate-500 focus:ring-offset-2 focus:ring-offset-slate-900"
                            disabled={isDeleting}
                        >
                            <MdCancel size={20} /> Não, Cancelar
                        </button>
                    </div>
                </div>
            </main>
        </>
    );
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PASTA: src\app\zona\detalhes\[id]
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// ARQUIVO: src\app\zona\detalhes\[id]\page.tsx   |   TIPO: Componente React (.tsx)
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// src/app/zona/detalhes/[id]/page.tsx
"use client";

import { useState, useEffect } from 'react';
import { useParams } from 'next/navigation';
import Link from 'next/link';
import NavBar from '@/components/nav-bar';
import { ZonaService } from '@/utils/api';
import { ZonaResponseDto } from '@/types/zona';
import { Loader2, AlertCircle, MapPin as ZonaIcon, Edit, ArrowLeft } from 'lucide-react';

export default function DetalhesZonaPage() {
    const params = useParams();
    const id = typeof params.id === 'string' ? parseInt(params.id, 10) : null;

    const [zona, setZona] = useState<ZonaResponseDto | null>(null);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);

    const formatDate = (dateString: string | null | undefined): string => {
        if (!dateString) return 'N/A';
        try {
            return new Date(dateString + 'T00:00:00Z').toLocaleDateString('pt-BR', { timeZone: 'UTC' });
        } catch {
            return 'Data inválida';
        }
    };

    useEffect(() => {
        if (!id) {
            setError("ID da zona inválido.");
            setIsLoading(false);
            return;
        }
        const fetchZona = async () => {
            setIsLoading(true);
            try {
                const data = await ZonaService.getById(id);
                setZona(data);
            } catch (err: any) {
                setError(err.response?.data?.message || "Zona não encontrada ou erro ao carregar dados.");
            } finally {
                setIsLoading(false);
            }
        };
        fetchZona();
    }, [id]);

    if (isLoading) return (
        <>
            <NavBar active="zona" />
            <main className="flex justify-center items-center min-h-screen bg-black"><Loader2 className="h-12 w-12 animate-spin text-[var(--color-mottu-light)]" /></main>
        </>
    );

    if (error) return (
        <>
            <NavBar active="zona" />
            <main className="flex justify-center items-center min-h-screen bg-black p-4">
                <div className="text-center bg-red-900/50 p-8 rounded-lg">
                    <AlertCircle className="mx-auto h-12 w-12 text-red-400" />
                    <p className="mt-4 text-red-400">{error}</p>
                    <Link href="/zona/listar" className="mt-6 inline-flex items-center gap-2 px-6 py-2 bg-slate-600 text-white rounded-md"><ArrowLeft size={18}/> Voltar para Lista</Link>
                </div>
            </main>
        </>
    );

    if (!zona) return null;

    return (
        <>
            <NavBar active="zona" />
            <main className="min-h-screen bg-black text-white p-4 md:p-8">
                <div className="container max-w-4xl mx-auto bg-[var(--color-mottu-default)] p-6 md:p-8 rounded-lg shadow-xl">
                    <div className="flex flex-col sm:flex-row justify-between items-start mb-6">
                        <div>
                            <h1 className="text-2xl md:text-3xl font-bold text-white">{zona.nome}</h1>
                            <p className="text-slate-300">Detalhes da Zona (ID: {zona.idZona})</p>
                        </div>
                        <div className="flex gap-2 mt-4 sm:mt-0">
                            <Link href="/zona/listar" className="flex items-center gap-2 px-4 py-2 font-medium text-[var(--color-mottu-dark)] bg-white rounded-md shadow hover:bg-gray-100">
                                <ArrowLeft size={18} /> Voltar
                            </Link>
                            <Link href={`/zona/alterar/${zona.idZona}`} className="flex items-center gap-2 px-4 py-2 font-semibold text-white bg-[var(--color-mottu-dark)] rounded-md shadow hover:bg-opacity-80">
                                <Edit size={18} /> Editar
                            </Link>
                        </div>
                    </div>

                    <div className="bg-black/20 p-4 rounded-lg">
                        <h2 className="text-xl font-semibold mb-3 text-slate-100 flex items-center"><ZonaIcon className="mr-2"/>Dados da Zona</h2>
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-x-6 gap-y-2 text-sm">
                            <p><strong>Nome:</strong> {zona.nome}</p>
                            <p><strong>Data de Entrada:</strong> {formatDate(zona.dataEntrada)}</p>
                            <p><strong>Data de Saída:</strong> {formatDate(zona.dataSaida)}</p>
                            <p className="md:col-span-2"><strong>Observação:</strong> {zona.observacao || '-'}</p>
                        </div>
                    </div>
                </div>
            </main>
        </>
    );
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PASTA: src\app\zona\listar
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// ARQUIVO: src\app\zona\listar\page.tsx   |   TIPO: Componente React (.tsx)
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// src/app/zona/listar/page.tsx
"use client";
import { useState, useEffect, FormEvent, ChangeEvent } from 'react';
import Link from 'next/link';
import NavBar from '@/components/nav-bar';
import { ZonaService } from '@/utils/api';
import { ZonaResponseDto, ZonaFilter } from '@/types/zona';
import { SpringPage } from '@/types/common';
import { MdSearch, MdClear, MdAdd, MdChevronLeft, MdChevronRight, MdEdit, MdDelete, MdVisibility, MdErrorOutline } from 'react-icons/md';
import { Map as MapIcon } from 'lucide-react';

const initialFilterState: ZonaFilter = { nome: "" };

export default function ListarZonasPage() {
    const [zonas, setZonas] = useState<ZonaResponseDto[]>([]);
    const [pageInfo, setPageInfo] = useState<SpringPage<ZonaResponseDto> | null>(null);
    const [currentPage, setCurrentPage] = useState(0);
    const [filtros, setFiltros] = useState<ZonaFilter>(initialFilterState);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);

    const ITEMS_PER_PAGE = 9;

    const fetchData = async (page = 0, currentFilters = filtros) => {
        setIsLoading(true);
        setError(null);
        try {
            const data = await ZonaService.listarPaginadoFiltrado(currentFilters, page, ITEMS_PER_PAGE);
            setZonas(data.content);
            setPageInfo(data);
            setCurrentPage(data.number);
        } catch (err: any) {
            setError(err.response?.data?.message || 'Erro ao buscar zonas.');
        } finally {
            setIsLoading(false);
        }
    };

    useEffect(() => {
        fetchData();
    }, []);

    const handleFilterChange = (e: ChangeEvent<HTMLInputElement>) => {
        setFiltros({ ...filtros, [e.target.name]: e.target.value });
    };

    const handleFilterSubmit = (e: FormEvent) => {
        e.preventDefault();
        fetchData(0, filtros);
    };

    const handleClearFilters = () => {
        setFiltros(initialFilterState);
        fetchData(0, initialFilterState);
    };

    const handlePageChange = (newPage: number) => {
        fetchData(newPage, filtros);
    };

    return (
        <>
            <NavBar active="zona" />
            <main className="min-h-screen bg-black text-white p-4 md:p-8">
                <div className="container mx-auto bg-[var(--color-mottu-default)] p-6 md:p-8 rounded-lg shadow-xl">
                    <div className="flex flex-col sm:flex-row justify-between items-center mb-8">
                        <h1 className="text-2xl md:text-3xl font-bold text-white flex items-center">
                            <MapIcon size={32} className="mr-3" />
                            Zonas Cadastradas
                        </h1>
                        <Link href="/zona/cadastrar" className="mt-4 sm:mt-0 flex items-center gap-2 px-4 py-2.5 font-semibold text-[var(--color-mottu-dark)] bg-white rounded-md shadow hover:bg-gray-100">
                            <MdAdd size={20} /> Nova Zona
                        </Link>
                    </div>
                    {error && <div className="mb-4 text-center text-red-700 p-3 rounded-md bg-red-100"><MdErrorOutline className="inline mr-2" />{error}</div>}
                    <form onSubmit={handleFilterSubmit} className="mb-8 p-4 bg-black/20 rounded-lg">
                        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4 items-end">
                            <input type="text" name="nome" value={filtros.nome} onChange={handleFilterChange} placeholder="Filtrar por nome..." className="w-full p-2 h-10 rounded bg-white text-slate-900"/>
                            <div className="flex gap-2 md:col-start-3">
                                <button type="submit" className="flex-1 flex items-center justify-center gap-2 h-10 px-4 font-semibold text-white bg-[var(--color-mottu-dark)] rounded-md hover:bg-opacity-80">
                                    <MdSearch /> Buscar
                                </button>
                                <button type="button" onClick={handleClearFilters} className="flex-1 flex items-center justify-center gap-2 h-10 px-4 font-medium text-slate-700 bg-gray-200 rounded-md hover:bg-gray-300">
                                    <MdClear /> Limpar
                                </button>
                            </div>
                        </div>
                    </form>
                    {isLoading ? <p className="text-center text-slate-100 py-10">Carregando...</p> : zonas.length > 0 ? (
                        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
                            {zonas.map((zona) => (
                                <div key={zona.idZona} className="bg-white text-slate-800 rounded-lg shadow-lg p-5 flex flex-col justify-between transition-all hover:shadow-2xl hover:scale-105">
                                    <div>
                                        <div className="flex items-center mb-3">
                                            <span className="text-xs font-semibold bg-slate-200 text-slate-700 px-2 py-0.5 rounded-full mr-2">ID: {zona.idZona}</span>
                                            <h2 className="text-xl font-bold text-[var(--color-mottu-dark)] truncate">{zona.nome}</h2>
                                        </div>
                                        <p className="text-sm text-slate-600">Entrada: {new Date(zona.dataEntrada).toLocaleDateString('pt-BR')}</p>
                                    </div>
                                    <div className="flex justify-end items-center gap-2 border-t border-slate-200 pt-3 mt-4">
                                        <Link href={`/zona/detalhes/${zona.idZona}`} className="p-2 rounded-full text-blue-600 hover:bg-blue-100" title="Ver Detalhes"><MdVisibility size={22}/></Link>
                                        <Link href={`/zona/alterar/${zona.idZona}`} className="p-2 rounded-full text-yellow-500 hover:bg-yellow-100" title="Editar Zona"><MdEdit size={20}/></Link>
                                        <Link href={`/zona/deletar/${zona.idZona}`} className="p-2 rounded-full text-red-500 hover:bg-red-100" title="Excluir Zona"><MdDelete size={20}/></Link>
                                    </div>
                                </div>
                            ))}
                        </div>
                    ) : <p className="text-center text-slate-300 py-10">Nenhuma zona encontrada.</p>}
                    {!isLoading && pageInfo && pageInfo.totalPages > 1 && (
                        <div className="mt-8 flex justify-between items-center text-sm text-slate-100">
                            <span>Página {pageInfo.number + 1} de {pageInfo.totalPages}</span>
                            <div className="flex gap-2">
                                <button onClick={() => handlePageChange(currentPage - 1)} disabled={pageInfo.first} className="px-3 py-1.5 rounded-md bg-slate-700 hover:bg-slate-600 disabled:opacity-50"><MdChevronLeft/></button>
                                <button onClick={() => handlePageChange(currentPage + 1)} disabled={pageInfo.last} className="px-3 py-1.5 rounded-md bg-slate-700 hover:bg-slate-600 disabled:opacity-50"><MdChevronRight/></button>
                            </div>
                        </div>
                    )}
                </div>
            </main>
        </>
    );
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PASTA: src\components
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// ARQUIVO: src\components\CrudScaffold.tsx   |   TIPO: Componente React (.tsx)
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// src/components/CrudScaffold.tsx
"use client";

import { ReactNode } from "react";

export default function CrudScaffold({
                                         title,
                                         actions,
                                         children,
                                     }: {
    title: string;
    actions?: ReactNode;
    children: ReactNode;
}) {
    return (
        <section className="py-8 md:py-10">
            <div className="container-page card">
                <div className="card-inner">
                    <div className="flex items-center justify-between mb-6">
                        <h1 className="text-2xl md:text-3xl font-bold">{title}</h1>
                        {actions && <div className="flex gap-2">{actions}</div>}
                    </div>
                    <div>{children}</div>
                </div>
            </div>
        </section>
    );
}


//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// ARQUIVO: src\components\LeafletMap.tsx   |   TIPO: Componente React (.tsx)
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// components\LeafletMap.tsx | arquivo LeafletMap.tsx
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// src/components/LeafletMap.tsx
'use client';

import React, { useState, useEffect } from 'react';
import { MapContainer, TileLayer, Marker, Popup, useMap } from 'react-leaflet';
// O CSS do Leaflet é importado em app/contato/layout.tsx
// import 'leaflet/dist/leaflet.css';
import L from 'leaflet';

// Correção para o ícone padrão do Leaflet em Next.js
const defaultIcon = new L.Icon({
    iconUrl: 'https://unpkg.com/leaflet@1.9.4/dist/images/marker-icon.png',
    iconRetinaUrl: 'https://unpkg.com/leaflet@1.9.4/dist/images/marker-icon-2x.png',
    shadowUrl: 'https://unpkg.com/leaflet@1.9.4/dist/images/marker-shadow.png',
    iconSize: [25, 41],
    iconAnchor: [12, 41],
    popupAnchor: [1, -34],
    shadowSize: [41, 41]
});

interface LeafletMapProps {
    position: [number, number];
    zoom?: number;
    markerText?: string;
    style?: React.CSSProperties; // Para estilos inline se necessário
    className?: string;          // Para classes CSS (ex: Tailwind)
}

// Componente para recentralizar o mapa quando a posição mudar
const ChangeView: React.FC<{ center: [number, number]; zoom: number }> = ({ center, zoom }) => {
    const map = useMap();
    map.setView(center, zoom);
    return null;
}

const LeafletMap: React.FC<LeafletMapProps> = ({
                                                   position,
                                                   zoom = 16,
                                                   markerText = "Localização",
                                                   style, // Pode ser usado para sobrescrever altura/largura padrão se necessário
                                                   className
                                               }) => {
    const [isClient, setIsClient] = useState(false);

    useEffect(() => {
        setIsClient(typeof window !== 'undefined');
    }, []);

    if (!isClient) {
        // Renderiza um placeholder no servidor ou antes da hidratação no cliente
        return (
            <div style={style || { height: '350px', width: '100%', backgroundColor: '#e0e0e0' }} className={`${className || ''} flex items-center justify-center`}>
                <p>Carregando mapa...</p>
            </div>
        );
    }

    // Garante que a posição é um array de números válido
    const validPosition: [number, number] = Array.isArray(position) && position.length === 2 && typeof position[0] === 'number' && typeof position[1] === 'number'
        ? position
        : [0, 0]; // Posição padrão caso inválida

    return (
        <MapContainer
            center={validPosition}
            zoom={zoom}
            style={style || { height: '100%', width: '100%' }} // Usa 100% para preencher o container pai (.leaflet-container)
            className={className} // Aplica classes CSS externas se houver
            scrollWheelZoom={true} // Habilitar zoom com scroll por padrão
            attributionControl={true} // Mostrar atribuição por padrão
        >
            <ChangeView center={validPosition} zoom={zoom} /> {/* Para atualizar o mapa se a props mudar */}
            <TileLayer
                attribution='&copy; <a href="https://www.openstreetmap.org/copyright" target="_blank" rel="noopener noreferrer">OpenStreetMap</a> contributors'
                url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
            />
            <Marker position={validPosition} icon={defaultIcon}>
                {markerText && <Popup>{markerText}</Popup>}
            </Marker>
        </MapContainer>
    );
};

export default LeafletMap;


//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// ARQUIVO: src\components\OcrScanner.tsx   |   TIPO: Componente React (.tsx)
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

"use client";

import React, { useRef, useState, useCallback, useEffect } from 'react';
import Webcam from 'react-webcam';
import { createWorker } from 'tesseract.js';
import { Camera, Loader2, ScanLine, Smartphone, ArrowLeft } from 'lucide-react';
import { QRCodeSVG } from 'qrcode.react';
import { RadarService, OcrSession } from '@/utils/api';

interface OcrScannerProps {
    onPlateRecognized: (plate: string) => void;
}

// Tipo para controlar o modo de operação do scanner
type ScannerMode = 'choice' | 'webcam' | 'mobile';

const OcrScanner: React.FC<OcrScannerProps> = ({ onPlateRecognized }) => {
    const webcamRef = useRef<Webcam>(null);
    const [isScanning, setIsScanning] = useState(false);
    const [status, setStatus] = useState('Escolha um método para escanear a matrícula.');

    // Estado para controlar qual interface é exibida
    const [mode, setMode] = useState<ScannerMode>('choice');

    // Estados para o fluxo de QR Code
    const [sessionId, setSessionId] = useState<string | null>(null);
    const pollingIntervalRef = useRef<NodeJS.Timeout | null>(null);

    const cleanPlate = (text: string) => {
        return text.replace(/[^A-Z0-9]/gi, '').toUpperCase().trim();
    };

    const handleScan = useCallback(async () => {
        if (isScanning || !webcamRef.current) return;

        setIsScanning(true);
        setStatus('A ler a imagem...');
        const imageSrc = webcamRef.current.getScreenshot();

        if (!imageSrc) {
            setStatus('Não foi possível capturar a imagem.');
            setIsScanning(false);
            return;
        }

        const worker = await createWorker('por');
        try {
            setStatus('A processar a matrícula...');
            const { data: { text } } = await worker.recognize(imageSrc);
            const plate = cleanPlate(text);

            if (plate.length >= 7) {
                setStatus(`Matrícula encontrada: ${plate}`);
                onPlateRecognized(plate);
            } else {
                setStatus('Matrícula não reconhecida. Tente novamente.');
            }
        } catch (error) {
            console.error(error);
            setStatus('Erro no reconhecimento. Tente novamente.');
        } finally {
            await worker.terminate();
            setIsScanning(false);
        }
    }, [isScanning, onPlateRecognized]);

    useEffect(() => {
        return () => {
            if (pollingIntervalRef.current) {
                clearInterval(pollingIntervalRef.current);
            }
        };
    }, []);

    const startPolling = (currentSessionId: string) => {
        pollingIntervalRef.current = setInterval(async () => {
            try {
                const session: OcrSession = await RadarService.getStatusSessao(currentSessionId);
                if (session.status === 'COMPLETED' && session.recognizedPlate) {
                    if (pollingIntervalRef.current) clearInterval(pollingIntervalRef.current);
                    setStatus(`Matrícula ${session.recognizedPlate} recebida do telemóvel!`);
                    onPlateRecognized(session.recognizedPlate);
                } else if (session.status === 'ERROR') {
                    if (pollingIntervalRef.current) clearInterval(pollingIntervalRef.current);
                    setStatus(`Erro no telemóvel: ${session.errorMessage || 'Tente novamente.'}`);
                }
            } catch (error) {
                console.error("Erro ao verificar status da sessão:", error);
                if (pollingIntervalRef.current) clearInterval(pollingIntervalRef.current);
                setStatus('Erro de comunicação. Tente novamente.');
            }
        }, 3000);
    };

    const handleUsePhone = async () => {
        setMode('mobile');
        if (sessionId) return;
        try {
            setStatus('A gerar QR Code...');
            const { sessionId: newSessionId } = await RadarService.iniciarSessao();
            setSessionId(newSessionId);
            setStatus('Escaneie o QR Code com o seu telemóvel.');
            startPolling(newSessionId);
        } catch (error) {
            setStatus('Erro ao iniciar sessão com o telemóvel.');
            console.error(error);
        }
    };

    const getMobileUploadUrl = () => {
        if (!sessionId) return '';
        const url = new URL(`/radar/mobile-upload/${sessionId}`, window.location.origin);
        return url.toString();
    };

    const handleBackToChoice = () => {
        if (pollingIntervalRef.current) {
            clearInterval(pollingIntervalRef.current);
            pollingIntervalRef.current = null;
        }
        setSessionId(null);
        setMode('choice');
        setStatus('Escolha um método para escanear a matrícula.');
    };

    const renderContent = () => {
        switch (mode) {
            case 'webcam':
                return (
                    <>
                        <div className="relative w-full h-64 bg-black rounded-md overflow-hidden">
                            <Webcam
                                audio={false}
                                ref={webcamRef}
                                screenshotFormat="image/jpeg"
                                videoConstraints={{ facingMode: 'environment' }}
                                className="w-full h-full object-cover"
                            />
                            <div className="absolute inset-0 flex items-center justify-center pointer-events-none">
                                <div className="w-4/5 h-2/5 border-4 border-green-400 rounded-lg animate-pulse" />
                            </div>
                        </div>
                        <p className="text-center text-sm text-slate-300 min-h-[20px]">{status}</p>
                        <div className="w-full flex flex-col gap-2">
                            <button
                                onClick={handleScan}
                                disabled={isScanning}
                                className="flex items-center justify-center gap-2 px-6 py-3 font-semibold text-white bg-[var(--color-mottu-default)] rounded-md shadow hover:bg-opacity-80 transition-colors disabled:opacity-50"
                            >
                                {isScanning ? <Loader2 className="animate-spin" /> : <ScanLine />}
                                {isScanning ? 'A analisar...' : 'Escanear Matrícula'}
                            </button>
                            <button
                                onClick={handleBackToChoice}
                                className="flex items-center justify-center gap-2 px-4 py-2 text-sm text-slate-300 hover:text-white hover:bg-slate-700 rounded-md"
                            >
                                <ArrowLeft size={16} /> Voltar
                            </button>
                        </div>
                    </>
                );
            case 'mobile':
                return (
                    <>
                        <div className="w-full h-64 bg-white rounded-md flex items-center justify-center p-4">
                            {sessionId ? (
                                <QRCodeSVG value={getMobileUploadUrl()} size={220} />
                            ) : (
                                <Loader2 className="animate-spin text-slate-500 h-12 w-12" />
                            )}
                        </div>
                        <p className="text-center text-sm text-slate-300 min-h-[20px]">{status}</p>
                        <div className="w-full flex flex-col gap-2">
                            <div className="text-center text-sky-300 flex items-center justify-center gap-2">
                                <Loader2 className="animate-spin" />
                                A aguardar imagem do telemóvel...
                            </div>
                            <button
                                onClick={handleBackToChoice}
                                className="flex items-center justify-center gap-2 px-4 py-2 text-sm text-slate-300 hover:text-white hover:bg-slate-700 rounded-md"
                            >
                                <ArrowLeft size={16} /> Voltar
                            </button>
                        </div>
                    </>
                );
            case 'choice':
            default:
                return (
                    <>
                        <div className="w-full h-64 flex flex-col items-center justify-center gap-4 bg-black/20 rounded-lg">
                            <button
                                onClick={() => { setMode('webcam'); setStatus('Aponte a câmara para a matrícula.'); }}
                                className="w-4/5 flex items-center justify-center gap-3 px-6 py-4 font-semibold text-white bg-[var(--color-mottu-default)] rounded-lg shadow-lg text-lg transition-transform hover:scale-105"
                            >
                                <Camera size={28} />
                                Escanear com a Câmara
                            </button>
                            <button
                                onClick={handleUsePhone}
                                className="w-4/5 flex items-center justify-center gap-3 px-6 py-4 font-semibold text-white bg-slate-700 rounded-lg shadow-lg text-lg transition-transform hover:scale-105"
                            >
                                <Smartphone size={28} />
                                Enviar pelo Telemóvel
                            </button>
                        </div>
                        <p className="text-center text-sm text-slate-300 min-h-[20px]">{status}</p>
                    </>
                );
        }
    };

    return (
        <div className="w-full max-w-md mx-auto flex flex-col items-center gap-4 p-4 border-2 border-dashed border-gray-500 rounded-lg">
            {renderContent()}
        </div>
    );
};

export default OcrScanner;


//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// ARQUIVO: src\components\PatioMottu2D.tsx   |   TIPO: Componente React (.tsx)
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

import React, { useEffect, useMemo, useRef, useState } from "react";
import { BoxService } from "@/utils/api";
import { BoxResponseDto } from "@/types/box";
import { Loader2 } from "lucide-react";
import UsuarioMarkers from "@/components/map/UsuarioMarkers";

/**
 * PatioMottu2D.tsx
 *
 * Modelo esquemático 2D interativo do pátio da Mottu em Guarulhos.
 * Aprimorado com ícones de moto, alinhamento corrigido, e controlos de visualização.
 * Escala: 1 unidade do plano ≈ 1 metro.
 */

// ———————————————— Dados Geométricos e de Layout (Ajustáveis) ————————————————
const LOT_OUTLINE: [number, number][] = [
    [0, 0], [60, 0], [60, 16], [50, 16], [50, 22], [64, 22], [64, 68], [6, 68], [6, 60], [0, 60], [0, 0],
];
const ROOFS: { id: string; poly: [number, number][] }[] = [
    { id: "galpao-norte", poly: [ [2,2], [58,2], [58,30], [2,30] ] },
    { id: "galpao-sul-oeste", poly: [ [2,32], [36,32], [36,66], [2,66] ] },
    { id: "galpao-miolo", poly: [ [38,32], [58,32], [58,54], [38,54] ] },
];
const ZONAS = [
    { id: 'Z-A', label: 'Zona A (Norte)', poly: [[3, 3], [57, 3], [57, 29], [3, 29]], color: 'rgba(255, 165, 0, 0.2)'},
    { id: 'Z-B', label: 'Zona B (Sudoeste)', poly: [[3, 33], [35, 33], [35, 65], [3, 65]], color: 'rgba(0, 128, 128, 0.2)'},
    { id: 'Z-C', label: 'Zona C (Miolo)', poly: [[39, 33], [57, 33], [57, 53], [39, 53]], color: 'rgba(128, 0, 128, 0.2)'},
];
const STREETS = [
    { name: "R. Antônio Pegoraro", from: [-10, -6], to: [72, -6] },
    { name: "Viela Espingarda", from: [70, 20], to: [70, 74] },
    { name: "R. Maria Antonieta", from: [-8, 74], to: [66, 74] },
];

type MappedBox = {
    id: string;
    zonaId: string;
    x: number; y: number; w: number; h: number;
    status: 'Livre' | 'Ocupado' | 'Indefinido';
};

// ———————————————— Componentes e Hooks ————————————————
function toPath(poly: [number, number][]) {
    return poly.map(([x, y], i) => `${i === 0 ? "M" : "L"}${x},${y}`).join(" ") + " Z";
}

function usePanZoom() {
    const [k, setK] = useState(8);
    const [tx, setTx] = useState(40); // Alinhamento inicial melhorado
    const [ty, setTy] = useState(40); // Alinhamento inicial melhorado
    const dragging = useRef(false);
    const last = useRef({ x: 0, y: 0 });

    const onWheel = (e: React.WheelEvent) => {
        e.preventDefault();
        const delta = e.deltaY > 0 ? -1 : 1;
        const next = Math.min(40, Math.max(2, k + delta * 0.5));
        setK(next);
    };
    const onDown = (e: React.MouseEvent) => {
        dragging.current = true; last.current = { x: e.clientX, y: e.clientY };
        (e.target as SVGSVGElement).style.cursor = 'grabbing';
    };
    const onUp = (e: React.MouseEvent) => {
        dragging.current = false;
        (e.target as SVGSVGElement).style.cursor = 'grab';
    };
    const onMove = (e: React.MouseEvent) => {
        if (!dragging.current) return;
        const dx = e.clientX - last.current.x; const dy = e.clientY - last.current.y;
        setTx(tx + dx); setTy(ty + dy); last.current = { x: e.clientX, y: e.clientY };
    };
    return { k, tx, ty, onWheel, onDown, onUp, onMove };
}

function DynamicScaleBar({ k }: { k: number }) {
    const targetWidthPx = 100;
    const metersPerPixel = 1 / k;
    const targetMeters = targetWidthPx * metersPerPixel;

    const niceNumbers = [1, 2, 5, 10, 20, 50, 100];
    let niceMeters = 10;

    const powerOf10 = Math.pow(10, Math.floor(Math.log10(targetMeters)));
    const rel = targetMeters / powerOf10;
    if (rel < 1.5) niceMeters = 1 * powerOf10;
    else if (rel < 3.5) niceMeters = 2 * powerOf10;
    else if (rel < 7.5) niceMeters = 5 * powerOf10;
    else niceMeters = 10 * powerOf10;

    const px = niceMeters * k;

    return (
        <div className="absolute bottom-3 left-3 px-2 py-1 bg-white/80 shadow rounded text-xs text-gray-800 pointer-events-none">
            <div className="h-[6px] w-full mb-1 border-x border-b border-black" style={{ width: px, borderTop: '1px solid black' }} />
            <span>{niceMeters} m</span>
        </div>
    );
}

export default function PatioMottu2D() {
    const { k, tx, ty, onWheel, onDown, onUp, onMove } = usePanZoom();
    const [viewOptions, setViewOptions] = useState({
        showRoofs: true,
        showZones: true,
        showBoxes: true,
        showStreetNames: true,
        showMotos: true,
    });
    const [hoveredItem, setHoveredItem] = useState<{ type: string; id: string; x: number; y: number } | null>(null);
    const [boxes, setBoxes] = useState<MappedBox[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);

    const generateBoxesLayout = (zonaId: string, x: number, y: number, cols: number, rows: number, w: number, h: number, gap: number) => {
        const boxesLayout = [];
        for (let r = 0; r < rows; r++) {
            for (let c = 0; c < cols; c++) {
                const id = `${zonaId}-B${(r * cols + c + 1).toString().padStart(2, '0')}`;
                boxesLayout.push({ id, zonaId, x: x + c * (w + gap), y: y + r * (h + gap), w, h });
            }
        }
        return boxesLayout;
    };

    useEffect(() => {
        const loadBoxData = async () => {
            setIsLoading(true);
            setError(null);
            try {
                const apiBoxesResponse = await BoxService.listarPaginadoFiltrado({}, 0, 500);
                const apiBoxesMap = new Map(apiBoxesResponse.content.map(box => [box.nome, box]));
                const layoutBoxes = [
                    ...generateBoxesLayout('Z-A', 5, 5, 12, 5, 3, 4, 1),
                    ...generateBoxesLayout('Z-B', 5, 35, 7, 6, 3, 4, 1),
                    ...generateBoxesLayout('Z-C', 40, 35, 4, 4, 3, 4, 1),
                ];
                const mergedBoxes = layoutBoxes.map(layoutBox => {
                    const apiBox = apiBoxesMap.get(layoutBox.id);
                    return {
                        ...layoutBox,
                        status: apiBox ? (apiBox.status === 'L' ? 'Livre' : 'Ocupado') : 'Indefinido',
                    };
                });
                setBoxes(mergedBoxes as MappedBox[]);
            } catch (err) {
                console.error("Falha ao buscar dados dos boxes:", err);
                setError("Não foi possível carregar o status das vagas.");
            } finally {
                setIsLoading(false);
            }
        };
        loadBoxData();
    }, []);

    const handleViewChange = (option: keyof typeof viewOptions) => {
        setViewOptions(prev => ({ ...prev, [option]: !prev[option] }));
    };

    const getBoxFillColor = (status: MappedBox['status']) => {
        switch (status) {
            case 'Livre': return 'rgba(74, 222, 128, 0.7)';
            case 'Ocupado': return 'rgba(239, 68, 68, 0.7)';
            default: return 'rgba(156, 163, 175, 0.7)';
        }
    };
    const getBoxStrokeColor = (status: MappedBox['status']) => {
        switch (status) {
            case 'Livre': return '#22c55e';
            case 'Ocupado': return '#dc2626';
            default: return '#6b7280';
        }
    };

    return (
        <div className="w-full h-[80vh] bg-neutral-100 rounded-2xl shadow-inner relative select-none">
            <div className="absolute top-3 left-3 z-10 bg-white/90 rounded-xl shadow p-3 text-sm text-gray-700">
                <div className="font-semibold mb-2">Controles de Visualização</div>
                <div className="space-y-1 text-xs">
                    {Object.keys(viewOptions).map(key => (
                        <label key={key} className="flex items-center gap-2 cursor-pointer">
                            <input
                                type="checkbox"
                                checked={viewOptions[key as keyof typeof viewOptions]}
                                onChange={() => handleViewChange(key as keyof typeof viewOptions)}
                                className="h-4 w-4 rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                            />
                            <span>
                        {key === 'showRoofs' && 'Mostrar Telhados'}
                                {key === 'showZones' && 'Mostrar Zonas'}
                                {key === 'showBoxes' && 'Mostrar Vagas (Boxes)'}
                                {key === 'showStreetNames' && 'Mostrar Ruas'}
                                {key === 'showMotos' && 'Mostrar Motos'}
                    </span>
                        </label>
                    ))}
                </div>
            </div>

            {isLoading && (
                <div className="absolute inset-0 z-20 flex items-center justify-center bg-black/30 text-white rounded-2xl">
                    <div className="flex flex-col items-center gap-2 p-4 bg-black/50 rounded-lg">
                        <Loader2 className="animate-spin h-8 w-8" />
                        <span>Carregando status das vagas...</span>
                    </div>
                </div>
            )}
            {error && !isLoading && (
                <div className="absolute bottom-4 right-4 z-20 p-3 bg-red-100 text-red-800 text-xs rounded-lg shadow-lg">
                    <strong>Erro:</strong> {error}
                </div>
            )}

            <svg
                className="w-full h-full cursor-grab"
                onWheel={onWheel}
                onMouseDown={onDown}
                onMouseUp={onUp}
                onMouseLeave={onUp}
                onMouseMove={onMove}
            >
                <defs>
                    <pattern id="grid" width={10} height={10} patternUnits="userSpaceOnUse">
                        <path d="M 10 0 L 0 0 0 10" fill="none" stroke="#ddd" strokeWidth={0.3} />
                    </pattern>
                    {/* NOVO: Símbolo SVG para a moto */}
                    <symbol id="moto-icon" viewBox="0 0 24 24">
                        <path d="M19.26 10.71a2.01 2.01 0 00-2.09-1.52H9.83l2.21-4.66.5-1.04a1 1 0 00-.88-1.5H9.41a1 1 0 00-.97.76L5.3 10H3a1 1 0 00-1 1v2a1 1 0 001 1h1v3a2 2 0 002 2h1a2 2 0 002-2v-3h3.58a2 2 0 001.9-1.32l1.78-4.68zM7.5 17.5a1.5 1.5 0 110-3 1.5 1.5 0 010 3zm9-5a1.5 1.5 0 110-3 1.5 1.5 0 010 3z" />
                    </symbol>
                </defs>

                <g transform={`translate(${tx},${ty}) scale(${k})`}>
                    <rect x={-500} y={-500} width={1000} height={1000} fill="url(#grid)" />
                    <path d={toPath(LOT_OUTLINE)} fill="#f0f0f0" stroke="#111" strokeWidth={0.4 / k} />

                    {viewOptions.showRoofs && ROOFS.map(r => (
                        <path key={r.id} d={toPath(r.poly)} fill="#c9cdd3" stroke="#6b7280" strokeWidth={0.35 / k} />
                    ))}

                    {viewOptions.showZones && ZONAS.map(z => (
                        <path
                            key={z.id}
                            d={toPath(z.poly)}
                            fill={z.color}
                            stroke={hoveredItem?.id === z.id ? 'black' : '#888'}
                            strokeWidth={hoveredItem?.id === z.id ? 0.6 / k : 0.2 / k}
                            onMouseEnter={() => setHoveredItem({ type: 'Zona', id: z.id, x: z.poly[0][0], y: z.poly[0][1] - 2 })}
                            onMouseLeave={() => setHoveredItem(null)}
                        />
                    ))}

                    {viewOptions.showBoxes && boxes.map(b => (
                        <g key={b.id}>
                            <rect
                                x={b.x}
                                y={b.y}
                                width={b.w}
                                height={b.h}
                                fill={getBoxFillColor(b.status)}
                                stroke={hoveredItem?.id === b.id ? 'blue' : getBoxStrokeColor(b.status)}
                                strokeWidth={hoveredItem?.id === b.id ? 0.5 / k : 0.2 / k}
                                onMouseEnter={() => setHoveredItem({ type: 'Box', id: b.id, x: b.x, y: b.y - 1 })}
                                onMouseLeave={() => setHoveredItem(null)}
                            />
                            {/* NOVO: Renderiza o ícone da moto se o box estiver ocupado */}
                            {b.status === 'Ocupado' && (
                                <use
                                    href="#moto-icon"
                                    x={b.x + b.w * 0.1}
                                    y={b.y + b.h * 0.1}
                                    width={b.w * 0.8}
                                    height={b.h * 0.8}
                                    fill="white"
                                    style={{pointerEvents: 'none'}} // Para não interferir no hover do retângulo
                                />
                            )}
                        </g>
                    ))}

                    {viewOptions.showStreetNames && STREETS.map((s, i) => (
                        <g key={i}>
                            <line x1={s.from[0]} y1={s.from[1]} x2={s.to[0]} y2={s.to[1]} stroke="#9ca3af" strokeWidth={4 / k} />
                            <text x={(s.from[0] + s.to[0]) / 2} y={(s.from[1] + s.to[1]) / 2 - 1} fontSize={2.5} textAnchor="middle" fill="#6b7280" style={{ textShadow: '0 0 3px white' }}>{s.name}</text>
                        </g>
                    ))}

                    {hoveredItem && (
                        <text x={hoveredItem.x} y={hoveredItem.y} fontSize={3 / k} fill="black" style={{pointerEvents: 'none', fontWeight: 'bold', textShadow: '0 0 4px white'}}>
                            {hoveredItem.type}: {hoveredItem.id}
                        </text>
                    )}
                </g>
            </svg>

            <DynamicScaleBar k={k} />

            <div className="absolute right-3 top-3 bg-white/90 rounded-xl shadow p-3 text-sm text-gray-700 pointer-events-none">
                <div className="font-semibold mb-1">Legenda</div>
                <ul className="space-y-1 text-xs">
                    <li><span className="inline-block w-3 h-3 align-middle mr-2 rounded-sm" style={{ background: "#c9cdd3" }} /> Áreas Cobertas</li>
                    <li><span className="inline-block w-3 h-3 align-middle mr-2 rounded-sm" style={{ background: "rgba(255, 165, 0, 0.2)" }} /> Zona de Estacionamento</li>
                    <li><span className="inline-block w-3 h-3 align-middle mr-2 rounded-sm bg-green-400" /> Vaga (Box) Livre</li>
                    <li className="flex items-center">
                        <svg width="12" height="12" viewBox="0 0 12 12" className="mr-2">
                            <rect width="12" height="12" fill="rgb(239, 68, 68)" rx="2"/>
                            <use href="#moto-icon" width="10" height="10" x="1" y="1" fill="white"/>
                        </svg>
                        Vaga (Box) Ocupada
                    </li>
                    <li><span className="inline-block w-3 h-3 align-middle mr-2 rounded-sm bg-gray-400" /> Vaga (Status Desconhecido)</li>
                </ul>
            </div>
        </div>
    );
}


//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// ARQUIVO: src\components\nav-bar.tsx   |   TIPO: Componente React (.tsx)
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

"use client";

import Link from "next/link";
import { usePathname } from "next/navigation";
import { useState } from 'react';
import {
    MdHome, MdPeople, MdDirectionsCar, MdWarehouse, MdInventory2, MdMap, MdContactMail,
    MdList, MdAdd, MdSearch, MdMenu, MdClose, MdExplore, MdDashboard
} from "react-icons/md";

// Estrutura de dados para os itens de navegação com submenus
const navItems = [
    { href: "/", label: "Início", icon: MdHome, basePath: "/" },
    {
        basePath: "/clientes", label: "Clientes", icon: MdPeople,
        subItems: [
            { href: "/clientes/listar", label: "Listar", icon: MdList },
            { href: "/clientes/cadastrar", label: "Cadastrar", icon: MdAdd },
            { href: "/clientes/buscar", label: "Buscar", icon: MdSearch },
        ]
    },
    {
        basePath: "/veiculo", label: "Veículos", icon: MdDirectionsCar,
        subItems: [
            { href: "/veiculo/listar", label: "Listar", icon: MdList },
            { href: "/veiculo/cadastrar", label: "Cadastrar", icon: MdAdd },
            { href: "/veiculo/buscar", label: "Buscar", icon: MdSearch },
        ]
    },
    {
        basePath: "/patio", label: "Pátios", icon: MdWarehouse,
        subItems: [
            { href: "/patio/listar", label: "Listar", icon: MdList },
            { href: "/patio/cadastrar", label: "Cadastrar", icon: MdAdd },
            { href: "/patio/buscar", label: "Buscar", icon: MdSearch },
        ]
    },
    {
        basePath: "/box", label: "Boxes", icon: MdInventory2,
        subItems: [
            { href: "/box/listar", label: "Listar", icon: MdList },
            { href: "/box/cadastrar", label: "Cadastrar", icon: MdAdd },
            { href: "/box/buscar", label: "Buscar", icon: MdSearch },
        ]
    },
    {
        basePath: "/zona", label: "Zonas", icon: MdMap,
        subItems: [
            { href: "/zona/listar", label: "Listar", icon: MdList },
            { href: "/zona/cadastrar", label: "Cadastrar", icon: MdAdd },
            { href: "/zona/buscar", label: "Buscar", icon: MdSearch },
        ]
    },
    { href: "/radar", label: "Radar", icon: MdExplore, basePath: "/radar" },
    { href: "/dashboard", label: "Dashboard", icon: MdDashboard, basePath: "/dashboard" },
    { href: "/mapa-2d", label: "Mapa 2D", icon: MdMap, basePath: "/mapa-2d" },
    { href: "/mapa-do-site", label: "Mapa do Site", icon: MdExplore, basePath: "/mapa-do-site" },
    { href: "/contato", label: "Fale Conosco", icon: MdContactMail, basePath: "/contato" },
];

export default function NavBar() {
    const pathname = usePathname();
    const [openMenu, setOpenMenu] = useState<string | null>(null);
    const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);

    // Função para determinar se um item está ativo (considerando sub-rotas)
    const isItemActive = (item: typeof navItems[0]) => {
        if (item.basePath === "/") {
            return pathname === "/";
        }
        return item.basePath && pathname?.startsWith(item.basePath);
    };

    return (
        <header className="w-full sticky top-0 z-50">
            <nav className="w-full bg-[var(--color-mottu-dark)] text-white shadow-md">
                <div className="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
                    <div className="flex h-16 items-center justify-between">
                        <div className="flex items-center gap-3">
                            <Link href="/" className="font-bold text-lg">Mottu Oficina</Link>
                        </div>

                        <ul className="hidden md:flex items-center gap-1">
                            {navItems.map((item) => {
                                const isActive = isItemActive(item);
                                if (!item.subItems) {
                                    return (
                                        <li key={item.href}>
                                            <Link href={item.href!} className={`flex items-center gap-2 rounded-lg px-3 py-2 text-sm transition ${isActive ? "bg-white text-[var(--color-mottu-dark)] font-semibold" : "hover:bg-white/10"}`}>
                                                <item.icon className="text-xl" />
                                                <span>{item.label}</span>
                                            </Link>
                                        </li>
                                    );
                                }
                                return (
                                    <li key={item.label} className="relative" onMouseEnter={() => setOpenMenu(item.label)} onMouseLeave={() => setOpenMenu(null)}>
                                        <button className={`flex items-center gap-2 rounded-lg px-3 py-2 text-sm transition w-full text-left ${isActive ? "bg-white text-[var(--color-mottu-dark)] font-semibold" : "hover:bg-white/10"}`}>
                                            <item.icon className="text-xl" />
                                            <span>{item.label}</span>
                                        </button>
                                        {openMenu === item.label && (
                                            <div className="absolute left-0 w-48 rounded-md shadow-lg bg-slate-800 ring-1 ring-black ring-opacity-5 z-50">
                                                <div className="py-1">
                                                    {item.subItems.map(sub => (
                                                        <Link key={sub.href} href={sub.href} className="flex items-center gap-3 px-4 py-2 text-sm text-slate-200 hover:bg-slate-700 hover:text-white">
                                                            <sub.icon />
                                                            {sub.label}
                                                        </Link>
                                                    ))}
                                                </div>
                                            </div>
                                        )}
                                    </li>
                                );
                            })}
                        </ul>

                        <div className="md:hidden">
                            <button onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}>
                                {isMobileMenuOpen ? <MdClose size={28} /> : <MdMenu size={28} />}
                            </button>
                        </div>
                    </div>
                </div>

                {isMobileMenuOpen && (
                    <div className="md:hidden bg-[var(--color-mottu-dark)] border-t border-slate-700">
                        <ul className="px-2 pt-2 pb-3 space-y-1 sm:px-3">
                            {navItems.map((item) => {
                                const isActive = isItemActive(item);
                                if (!item.subItems) {
                                    return (
                                        <li key={item.href}><Link href={item.href!} onClick={() => setIsMobileMenuOpen(false)} className={`flex items-center gap-3 rounded-md px-3 py-2 text-base font-medium ${isActive ? "bg-white text-[var(--color-mottu-dark)]" : "hover:bg-white/10"}`}><item.icon />{item.label}</Link></li>
                                    )
                                }
                                return (
                                    <li key={item.label}>
                                        <span className={`flex items-center gap-3 rounded-md px-3 py-2 text-base font-medium ${isActive ? "bg-slate-700" : ""}`}><item.icon />{item.label}</span>
                                        <ul className="pl-8 pt-1 space-y-1">
                                            {item.subItems.map(sub => (
                                                <li key={sub.href}><Link href={sub.href} onClick={() => setIsMobileMenuOpen(false)} className="flex items-center gap-2 rounded-md px-3 py-2 text-sm hover:bg-white/10"><sub.icon />{sub.label}</Link></li>
                                            ))}
                                        </ul>
                                    </li>
                                )
                            })}
                        </ul>
                    </div>
                )}
            </nav>
        </header>
    );
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PASTA: src\components\forms
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// ARQUIVO: src\components\forms\TabbedForm.tsx   |   TIPO: Componente React (.tsx)
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// src/components/forms/TabbedForm.tsx
"use client";

import React, { ReactNode } from 'react';
import { Tab } from '@headlessui/react';

export interface AppTab {
    label: string;
    content: ReactNode;
    icon?: ReactNode;
    disabled?: boolean;
}

interface TabbedFormProps {
    tabs: AppTab[];
    selectedIndex?: number;
    onChange?: (index: number) => void;
}

const TabbedForm: React.FC<TabbedFormProps> = ({ tabs, selectedIndex, onChange }) => {
    return (
        <div className="w-full">
            <Tab.Group selectedIndex={selectedIndex} onChange={onChange}>
                {/* Container das Abas - Removemos a borda inferior daqui */}
                <Tab.List className="flex space-x-1 px-1 sm:px-2">
                    {tabs.map((tabItem) => (
                        <Tab
                            key={tabItem.label}
                            disabled={tabItem.disabled}
                            className={({ selected }) =>
                                `
                  px-3 sm:px-5 py-2.5 text-xs sm:text-sm font-medium focus:outline-none flex items-center gap-2 whitespace-nowrap
                  rounded-t-md                           // Cantos superiores arredondados
                  transition-colors duration-150
                  relative                                // Para posicionamento do pseudo-elemento ou borda
                  group                                   // Para hover nos separadores (opcional)

                  ${tabItem.disabled
                                    ? 'text-slate-600 cursor-not-allowed' // Estilo desabilitado
                                    : selected
                                        ? 'bg-slate-800 text-sky-300 shadow-sm' // ABA ATIVA: Fundo mais claro (ajuste a cor), texto destacado
                                        : 'bg-slate-900/50 text-slate-400 hover:bg-slate-700/70 hover:text-sky-200' // ABA INATIVA: Fundo escuro, hover sutil
                                }

                  /* Separador sutil à direita (exceto último) */
                  ${!tabItem.disabled && 'border-r border-slate-700/50 last:border-r-0'}
                `
                            }
                        >
                            {tabItem.icon}
                            {tabItem.label}
                        </Tab>
                    ))}
                    {/* Espaço vazio para preencher a linha abaixo das abas, exceto sob a ativa */}
                    <div className="flex-grow border-b border-slate-700"></div>
                </Tab.List>

                {/* Painéis de Conteúdo */}
                <Tab.Panels className="mt-[-1px]"> {/* Leve sobreposição para conectar */}
                    {tabs.map((tabItem, idx) => (
                        <Tab.Panel
                            key={idx}
                            // Fundo um pouco mais claro para conectar com a aba ativa
                            className="rounded-b-lg rounded-tr-lg bg-slate-800 p-3 sm:p-5 focus:outline-none border border-t-0 border-slate-700"
                        >
                            {tabItem.content}
                        </Tab.Panel>
                    ))}
                </Tab.Panels>
            </Tab.Group>
        </div>
    );
};

export default TabbedForm;


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PASTA: src\components\map
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// ARQUIVO: src\components\map\UsuarioMarkers.tsx   |   TIPO: Componente React (.tsx)
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// Simples: recebe marcadores já com posição calculada (cx, cy) no mesmo sistema do SVG.
// Passe também k para escalar texto/traço conforme zoom.
type Marker = { id: string | number; label: string; cx: number; cy: number };

export default function UsuarioMarkers({
                                           itens,
                                           k = 1,
                                       }: { itens: Marker[]; k?: number }) {
    return (
        <g pointerEvents="none">
            {itens.map((m) => (
                <g key={m.id} transform={`translate(${m.cx},${m.cy})`}>
                    <circle r={1.2 / k} fill="#2563eb" stroke="white" strokeWidth={0.35 / k} />
                    <text
                        x={2 / k}
                        y={1 / k}
                        fontSize={2.6 / k}
                        fill="#111827"
                        stroke="white"
                        strokeWidth={0.35 / k}
                    >
                        {m.label}
                    </text>
                </g>
            ))}
        </g>
    );
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PASTA: src\utils
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// ARQUIVO: src\utils\api.ts   |   TIPO: TypeScript (.ts)
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// mottu-web/src/utils/api.ts

import axios from "axios";
import { SpringPage } from "@/types/common";
import {
    ClienteRequestDto,
    ClienteResponseDto,
    ClienteFilter,
} from "@/types/cliente";
import {
    VeiculoRequestDto,
    VeiculoResponseDto,
    VeiculoFilter,
    VeiculoLocalizacaoResponseDto,
} from "@/types/veiculo";
import {
    PatioRequestDto,
    PatioResponseDto,
    PatioFilter,
} from "@/types/patio";
import {
    BoxRequestDto,
    BoxResponseDto,
    BoxFilter,
} from "@/types/box";
import {
    ZonaRequestDto,
    ZonaResponseDto,
    ZonaFilter,
} from "@/types/zona";

// ---- OCR / Radar types ----
export interface OcrSession {
    id: string;
    status: "PENDING" | "PROCESSING" | "COMPLETED" | "ERROR";
    recognizedPlate?: string;
    errorMessage?: string;
}

/**
 * Base da API:
 * - Padrão: '/api' (funciona com rewrites do Next e com Caddy HTTPS — mesma origem).
 * - Override opcional: NEXT_PUBLIC_API_BASE_URL (ex.: 'https://app.local:3443/api' ou 'http://localhost:8080/api').
 */
export const API_BASE_URL =
    process.env.NEXT_PUBLIC_API_BASE_URL || "/api";

/**
 * Client único, sem headers forçados.
 * - Para JSON, o Axios seta automaticamente "application/json".
 * - Para FormData, o Axios seta automaticamente "multipart/form-data; boundary=...".
 */
const api = axios.create({
    baseURL: API_BASE_URL,
    withCredentials: true,
    timeout: 30000,
});

// util p/ limpar filtros
const cleanFilterParams = (filter: object): Record<string, any> =>
    Object.entries(filter).reduce((acc, [k, v]) => {
        if (v !== null && v !== undefined && v !== "") acc[k] = v;
        return acc;
    }, {} as Record<string, any>);

// ---------------- CLIENTES ----------------
export const ClienteService = {
    listarPaginadoFiltrado: async (
        filter: ClienteFilter = {},
        page = 0,
        size = 10,
        sort = "idCliente,asc"
    ): Promise<SpringPage<ClienteResponseDto>> => {
        const params = { ...cleanFilterParams(filter), page, size, sort };
        const { data } = await api.get<SpringPage<ClienteResponseDto>>(
            "/clientes/search",
            { params }
        );
        return data;
    },

    getById: async (id: number): Promise<ClienteResponseDto> => {
        const { data } = await api.get<ClienteResponseDto>(`/clientes/${id}`);
        return data;
    },

    create: async (
        payload: ClienteRequestDto
    ): Promise<ClienteResponseDto> => {
        const { data } = await api.post<ClienteResponseDto>("/clientes", payload);
        return data;
    },

    update: async (
        id: number,
        payload: ClienteRequestDto
    ): Promise<ClienteResponseDto> => {
        const { data } = await api.put<ClienteResponseDto>(
            `/clientes/${id}`,
            payload
        );
        return data;
    },

    delete: async (id: number): Promise<void> => {
        await api.delete(`/clientes/${id}`);
    },
};

// ---------------- VEÍCULOS ----------------
export const VeiculoService = {
    listarPaginadoFiltrado: async (
        filter: VeiculoFilter = {},
        page = 0,
        size = 10,
        sort = "idVeiculo,asc"
    ): Promise<SpringPage<VeiculoResponseDto>> => {
        const params = { ...cleanFilterParams(filter), page, size, sort };
        const { data } = await api.get<SpringPage<VeiculoResponseDto>>(
            "/veiculos/search",
            { params }
        );
        return data;
    },

    getById: async (id: number): Promise<VeiculoResponseDto> => {
        const { data } = await api.get<VeiculoResponseDto>(`/veiculos/${id}`);
        return data;
    },

    create: async (
        payload: VeiculoRequestDto
    ): Promise<VeiculoResponseDto> => {
        const { data } = await api.post<VeiculoResponseDto>("/veiculos", payload);
        return data;
    },

    update: async (
        id: number,
        payload: VeiculoRequestDto
    ): Promise<VeiculoResponseDto> => {
        const { data } = await api.put<VeiculoResponseDto>(
            `/veiculos/${id}`,
            payload
        );
        return data;
    },

    delete: async (id: number): Promise<void> => {
        await api.delete(`/veiculos/${id}`);
    },

    getLocalizacao: async (
        id: number
    ): Promise<VeiculoLocalizacaoResponseDto> => {
        const { data } = await api.get<VeiculoLocalizacaoResponseDto>(
            `/veiculos/${id}/localizacao`
        );
        return data;
    },
};

// ---------------- PÁTIOS ----------------
export const PatioService = {
    listarPaginadoFiltrado: async (
        filter: PatioFilter = {},
        page = 0,
        size = 10,
        sort = "idPatio,asc"
    ): Promise<SpringPage<PatioResponseDto>> => {
        const params = { ...cleanFilterParams(filter), page, size, sort };
        const { data } = await api.get<SpringPage<PatioResponseDto>>(
            "/patios/search",
            { params }
        );
        return data;
    },

    getById: async (id: number): Promise<PatioResponseDto> => {
        const { data } = await api.get<PatioResponseDto>(`/patios/${id}`);
        return data;
    },

    create: async (
        payload: PatioRequestDto
    ): Promise<PatioResponseDto> => {
        const { data } = await api.post<PatioResponseDto>("/patios", payload);
        return data;
    },

    update: async (
        id: number,
        payload: PatioRequestDto
    ): Promise<PatioResponseDto> => {
        const { data } = await api.put<PatioResponseDto>(
            `/patios/${id}`,
            payload
        );
        return data;
    },

    delete: async (id: number): Promise<void> => {
        await api.delete(`/patios/${id}`);
    },
};

// ---------------- BOXES ----------------
export const BoxService = {
    listarPaginadoFiltrado: async (
        filter: BoxFilter = {},
        page = 0,
        size = 10,
        sort = "idBox,asc"
    ): Promise<SpringPage<BoxResponseDto>> => {
        const params = { ...cleanFilterParams(filter), page, size, sort };
        const { data } = await api.get<SpringPage<BoxResponseDto>>(
            "/boxes/search",
            { params }
        );
        return data;
    },

    getById: async (id: number): Promise<BoxResponseDto> => {
        const { data } = await api.get<BoxResponseDto>(`/boxes/${id}`);
        return data;
    },

    create: async (
        payload: BoxRequestDto
    ): Promise<BoxResponseDto> => {
        const { data } = await api.post<BoxResponseDto>("/boxes", payload);
        return data;
    },

    update: async (
        id: number,
        payload: BoxRequestDto
    ): Promise<BoxResponseDto> => {
        const { data } = await api.put<BoxResponseDto>(
            `/boxes/${id}`,
            payload
        );
        return data;
    },

    delete: async (id: number): Promise<void> => {
        await api.delete(`/boxes/${id}`);
    },
};

// ---------------- ZONAS ----------------
export const ZonaService = {
    listarPaginadoFiltrado: async (
        filter: ZonaFilter = {},
        page = 0,
        size = 10,
        sort = "idZona,asc"
    ): Promise<SpringPage<ZonaResponseDto>> => {
        const params = { ...cleanFilterParams(filter), page, size, sort };
        const { data } = await api.get<SpringPage<ZonaResponseDto>>(
            "/zonas/search",
            { params }
        );
        return data;
    },

    getById: async (id: number): Promise<ZonaResponseDto> => {
        const { data } = await api.get<ZonaResponseDto>(`/zonas/${id}`);
        return data;
    },

    create: async (
        payload: ZonaRequestDto
    ): Promise<ZonaResponseDto> => {
        const { data } = await api.post<ZonaResponseDto>("/zonas", payload);
        return data;
    },

    update: async (
        id: number,
        payload: ZonaRequestDto
    ): Promise<ZonaResponseDto> => {
        const { data } = await api.put<ZonaResponseDto>(
            `/zonas/${id}`,
            payload
        );
        return data;
    },

    delete: async (id: number): Promise<void> => {
        await api.delete(`/zonas/${id}`);
    },
};

// ---------------- ESTACIONAMENTO ----------------
export const EstacionamentoService = {
    estacionar: async (placa: string): Promise<BoxResponseDto> => {
        const { data } = await api.post<BoxResponseDto>(
            "/estacionamento/estacionar",
            null,
            { params: { placa } }
        );
        return data;
    },

    liberarVaga: async (placa: string): Promise<void> => {
        await api.post("/estacionamento/liberar", null, { params: { placa } });
    },
};

// ---------------- RADAR / OCR ----------------
export const RadarService = {
    iniciarSessao: async (): Promise<{ sessionId: string }> => {
        const { data } = await api.post<{ sessionId: string }>(
            "/radar/iniciar-sessao"
        );
        return data;
    },

    getStatusSessao: async (sessionId: string): Promise<OcrSession> => {
        const { data } = await api.get<OcrSession>(
            `/radar/status-sessao/${encodeURIComponent(sessionId)}`
        );
        return data;
    },

    /**
     * Envia a imagem da placa para o backend.
     * Aceita tanto File quanto FormData. NÃO define headers manualmente.
     */
    uploadImagem: async (sessionId: string, fileOrForm: File | FormData): Promise<any> => {
        const formData =
            fileOrForm instanceof FormData
                ? fileOrForm
                : (() => {
                    const fd = new FormData();
                    fd.append("image", fileOrForm); // nome do campo que o backend espera
                    return fd;
                })();

        const { data } = await api.post(
            `/radar/upload-imagem/${encodeURIComponent(sessionId)}`,
            formData
        );
        return data;
    },
};

export default api;


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PASTA: src\utils\api
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// ARQUIVO: src\utils\api\dashboard.ts   |   TIPO: TypeScript (.ts)
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// src/utils/api/dashboard.ts
export type ResumoOcupacao = {
    totalBoxes: number;
    ocupados: number;
    livres: number;
};

export type OcupacaoDia = {
    dia: string;      // ISO (yyyy-MM-dd)
    ocupados: number;
    livres: number;
};

// Se a env estiver errada/vazia, caímos para "/api"
const RAW = (process.env.NEXT_PUBLIC_API || "").trim();
const BASE =
    RAW && /^https?:\/\//i.test(RAW) ? RAW.replace(/\/+$/, "") : "/api";

async function http<T>(pathOrUrl: string) {
    const res = await fetch(pathOrUrl, { cache: "no-store" });
    if (!res.ok) {
        const text = await res.text().catch(() => "");
        throw new Error(`HTTP ${res.status} - ${text || res.statusText} @ ${pathOrUrl}`);
    }
    return res.json() as Promise<T>;
}

export const DashboardApi = {
    resumo(): Promise<ResumoOcupacao> {
        // /api/dashboard/resumo  (ou http://host:8080/api/dashboard/resumo se a env estiver correta)
        return http<ResumoOcupacao>(`${BASE}/dashboard/resumo`);
    },

    ocupacaoPorDia(ini: string, fim: string): Promise<OcupacaoDia[]> {
        const qs = new URLSearchParams({ ini, fim }).toString();
        return http<OcupacaoDia[]>(`${BASE}/dashboard/ocupacao-por-dia?${qs}`);
    },
};


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PASTA: src\utils\map
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
// ARQUIVO: src\utils\map\geometry.ts   |   TIPO: TypeScript (.ts)
//――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

// src/utils/map/geometry.ts
export type Rect = { x: number; y: number; w: number; h: number };

// configuração do “mapa1”: origem, grade, tamanho da célula
const ZONAS = {
    A: { origin: { x: 520, y: 120 }, rows: 6, cols: 10, cell: { w: 26, h: 26 }, gap: 6 },
    B: { origin: { x: 480, y: 420 }, rows: 6, cols: 10, cell: { w: 26, h: 26 }, gap: 6 },
    C: { origin: { x: 720, y: 420 }, rows: 4, cols: 6,  cell: { w: 26, h: 26 }, gap: 6 },
} as const;

// Converte “A05”, “B12” etc -> {zona, linha, coluna}
function parseBoxNome(boxNome?: string) {
    if (!boxNome) return null;
    const m = boxNome.trim().match(/^([A-Z])\s*0*([1-9]\d*)$/i);
    if (!m) return null;
    const zonaKey = m[1].toUpperCase() as keyof typeof ZONAS; // A/B/C...
    const idx = parseInt(m[2], 10) - 1; // 0-based
    const zona = ZONAS[zonaKey];
    if (!zona) return null;
    const row = Math.floor(idx / zona.cols);
    const col = idx % zona.cols;
    if (row >= zona.rows) return null;
    return { zonaKey, row, col, zona };
}

export function rectByBoxNome(boxNome?: string): Rect | null {
    const parsed = parseBoxNome(boxNome);
    if (!parsed) return null;
    const { zona, row, col } = parsed;
    const { origin, cell, gap } = zona;
    const x = origin.x + col * (cell.w + gap);
    const y = origin.y + row * (cell.h + gap);
    return { x, y, w: cell.w, h: cell.h };
}


